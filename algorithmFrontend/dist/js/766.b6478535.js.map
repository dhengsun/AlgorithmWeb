{"version":3,"file":"js/766.b6478535.js","mappings":"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","sources":["webpack://vue-django-frontend/./src/views/ProblemTrashView.vue","webpack://vue-django-frontend/./src/views/ProblemTrashView.vue?a792","webpack://vue-django-frontend/./src/constants/tags.js","webpack://vue-django-frontend/./src/api/question.js"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <!-- 替换原有的filter-card部分 -->\n    <div class=\"filter-card\">\n      <!-- 搜索框放在最上方 -->\n      <div class=\"search-container\">\n        <el-input\n          v-model=\"searchQuery\"\n          placeholder=\"搜索题目\"\n          class=\"search-input\"\n          clearable\n          @clear=\"handleSearchClear\"\n          @keyup.enter=\"handleSearch\"\n        >\n          <template #prepend>\n            <el-select \n              v-model=\"searchType\" \n              placeholder=\"选择类型\"\n              style=\"width: 110px\"\n            >\n              <el-option label=\"题号\" value=\"id\" />\n              <el-option label=\"站外ID\" value=\"ext_id\" />\n              <el-option label=\"题目名称\" value=\"name\" />\n            </el-select>\n          </template>\n          <template #append>\n            <el-button \n              type=\"primary\" \n              @click=\"handleSearch\"\n              :icon=\"Search\"\n            />\n          </template>\n        </el-input>\n      </div>\n\n      <!-- 筛选按钮和模式选择 -->\n      <div class=\"filter-header\">\n        <el-button type=\"primary\" @click=\"showFilterDialog\" size=\"small\">\n          <el-icon><Filter /></el-icon>\n          筛选\n        </el-button>\n        <el-radio-group v-model=\"filterMode\" size=\"small\" style=\"margin-left: 10px\">\n          <el-radio-button label=\"intersection\">交集</el-radio-button>\n          <el-radio-button label=\"union\">并集</el-radio-button>\n        </el-radio-group>\n      </div>\n      \n      <!-- 已选条件展示 -->\n      <div class=\"selected-filters\" v-if=\"hasSelectedFilters\">\n        <span class=\"filter-label\">已选择：</span>\n        <div class=\"filter-tags\">\n          <!-- 平台筛选 -->\n          <el-tag \n            v-if=\"selectedPlatform\"\n            closable\n            :type=\"getPlatformTagType(selectedPlatform)\"\n            @close=\"removeFilter('platform')\"\n          >\n            {{ getPlatformName(selectedPlatform) }}\n          </el-tag>\n          \n          <!-- 难度筛选 -->\n          <el-tag \n            v-for=\"diff in selectedDifficulties\"\n            :key=\"`diff-${diff}`\"\n            closable\n            :type=\"getDifficultyTagType({ difficulty: diff, oj_platform: selectedPlatform })\"\n            @close=\"removeFilter('difficulty', diff)\"\n          >\n            {{ diff }}\n          </el-tag>\n          \n          <!-- 标签筛选 -->\n          <el-tag \n            v-for=\"tag in selectedTags\"\n            :key=\"`tag-${tag}`\"\n            closable\n            :type=\"getTagType(tag, selectedPlatform)\"\n            @close=\"removeFilter('tag', tag)\"\n          >\n            {{ getTagName(tag) }}\n          </el-tag>\n        </div>\n      </div>\n    </div>\n\n    <!-- 主内容区 -->\n    <div class=\"content-wrapper\">\n      <!-- 标签展示模式切换（仅对洛谷题目有效） -->\n      <div class=\"tag-mode-switch\" v-if=\"hasLuoguProblems\">\n        <el-radio-group v-model=\"tagDisplayMode\" size=\"small\">\n          <el-radio-button label=\"algorithm\">算法标签</el-radio-button>\n          <el-radio-button label=\"source\">来源标签</el-radio-button>\n          <el-radio-button label=\"time\">时间标签</el-radio-button>\n          <el-radio-button label=\"region\">地区标签</el-radio-button>\n          <el-radio-button label=\"other\">其他标签</el-radio-button>\n          <el-radio-button label=\"all\">全部标签</el-radio-button>\n        </el-radio-group>\n      </div>\n\n      <!-- 题目列表表格 -->\n      <div class=\"table-container\">\n        <el-table \n          :data=\"problems\" \n          style=\"width: 100%\"\n          v-loading=\"loading\"\n          @row-click=\"handleRowClick\"\n        >\n          <!-- 题号列 -->\n          <el-table-column prop=\"id\" label=\"题号\" width=\"80\" />\n          \n          <!-- 题目名称列 -->\n          <el-table-column label=\"题目名称\" min-width=\"220\">\n            <template #default=\"{row}\">\n              <span class=\"problem-title\">{{ row.name }}</span>\n              <span class=\"solution-count\" v-if=\"row.solution_count > 0\">\n                ({{ row.solution_count }}解)\n              </span>\n            </template>\n          </el-table-column>\n          \n          <!-- 平台列 -->\n          <el-table-column label=\"平台\" width=\"100\">\n            <template #default=\"{row}\">\n              <el-tag :type=\"getPlatformTagType(row.oj_platform)\" size=\"small\">\n                {{ getPlatformName(row.oj_platform) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n\n          <!-- 添加题解数列 -->\n            <el-table-column prop=\"solution_count\" label=\"题解\" width=\"80\" align=\"center\">\n              <template #default=\"{row}\">\n                <el-tag v-if=\"row.solution_count > 0\" type=\"info\" size=\"small\">\n                  {{ row.solution_count }}\n                </el-tag>\n                <span v-else>-</span>\n              </template>\n            </el-table-column>\n\n          <!-- 原题ID列 -->\n          <el-table-column label=\"原题ID\" width=\"120\">\n            <template #default=\"{row}\">\n              <a \n                :href=\"generateOjLink(row)\" \n                target=\"_blank\" \n                class=\"external-id\"\n                @click.stop\n              >\n                {{ row.ext_question_id }}\n              </a>\n            </template>\n          </el-table-column>\n          \n          <!-- 难度列 -->\n          <el-table-column label=\"难度\" width=\"120\">\n            <template #default=\"{row}\">\n              <el-tag \n                :type=\"getDifficultyTagType(row)\" \n                size=\"small\"\n                effect=\"dark\"\n              >\n                {{ row.difficulty }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          \n          <!-- 标签列 -->\n          <el-table-column label=\"标签\">\n            <template #default=\"{row}\">\n              <div class=\"tag-container\">\n                <el-tag\n                  v-for=\"tag in getFilteredTags(row.algorithm_tags, row.oj_platform)\"\n                  :key=\"tag\"\n                  :type=\"getTagType(tag, row.oj_platform)\"\n                  size=\"small\"\n                  class=\"tag-item\"\n                >\n                  {{ getTagName(tag) }}\n                </el-tag>\n              </div>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n\n      <!-- 分页器 -->\n      <div class=\"pagination-wrapper\" v-if=\"totalCount > 0\">\n        <el-pagination\n          v-model:current-page=\"currentPage\"\n          :page-size=\"pageSize\"\n          :total=\"totalCount\"\n          layout=\"prev, pager, next\"\n          @current-change=\"fetchProblems\"\n        />\n      </div>\n    </div>\n\n    <!-- 筛选弹窗 -->\n    <el-dialog v-model=\"filterDialogVisible\" title=\"筛选条件\" width=\"70%\">\n      <div class=\"platform-selector\">\n        <el-radio-group v-model=\"filterPlatform\">\n          <el-radio-button label=\"leetcode\">LeetCode</el-radio-button>\n          <el-radio-button label=\"luogu\">洛谷</el-radio-button>\n        </el-radio-group>\n      </div>\n\n      <!-- LeetCode筛选条件 -->\n      <div v-if=\"filterPlatform === 'leetcode'\" class=\"filter-section\">\n        <h3>难度</h3>\n        <div class=\"tag-group\">\n          <el-checkbox \n            v-for=\"diff in LeetcodeDifficulties\" \n            :key=\"diff\" \n            :label=\"diff\"\n            v-model=\"tempDifficulties\"\n            :value=\"diff\"\n          />\n        </div>\n\n        <h3>算法标签</h3>\n        <div class=\"tag-group\">\n          <el-checkbox \n            v-for=\"tag in LeetcodeTags\" \n            :key=\"tag\" \n            :label=\"tag\"\n            v-model=\"tempTags\"\n            :value=\"tag\"\n          />\n        </div>\n      </div>\n\n      <!-- 洛谷筛选条件 -->\n      <div v-if=\"filterPlatform === 'luogu'\" class=\"filter-section\">\n        <el-tabs type=\"border-card\">\n          <el-tab-pane label=\"难度\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"diff in LuoguDifficulties\" \n                :key=\"diff\" \n                :label=\"diff\"\n                v-model=\"tempDifficulties\"\n                :value=\"diff\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"算法标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Algorithm\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Algorithm_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"来源标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Source\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Source_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"时间标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Time\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Time_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"地区标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Region\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Region_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"其他标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Other\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Other_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n        </el-tabs>\n      </div>\n\n      <template #footer>\n        <el-button @click=\"filterDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"applyFilters\">确定</el-button>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { getAllTags } from '@/api/question'\nimport { getQuestionTrashList, searchQuestionTrash } from '@/api/question'\nimport { Filter } from '@element-plus/icons-vue'\nimport { \n  LeetcodeTags, \n  LuoguDifficulties, \n  LeetcodeDifficulties \n} from '@/constants/tags'\nimport { Search } from '@element-plus/icons-vue'\n\nconst router = useRouter()\n\n// 在setup()中添加以下响应式变量\nconst searchQuery = ref('')\nconst searchType = ref('name') // 默认按名称搜索\nconst isSearching = ref(false)\n\n// 数据状态\nconst loading = ref(false)\nconst problems = ref([])\nconst currentPage = ref(1)\nconst pageSize = 20\nconst totalCount = ref(0)\nconst tagDisplayMode = ref('algorithm')\nconst filterDialogVisible = ref(false)\n\n// 筛选相关状态（仅用于UI展示）\nconst selectedPlatform = ref('')\nconst selectedDifficulties = ref([])\nconst selectedTags = ref([])\n\n// 临时筛选状态（弹窗中使用）\nconst filterPlatform = ref('leetcode')\nconst tempDifficulties = ref([])\nconst tempTags = ref([])\nconst filterMode = ref('intersection') // 默认交集\n// 洛谷标签\nconst luoguTags = ref({\n  Algorithm: [],\n  Source: [],\n  Time: [],\n  Region: [],\n  Other: []\n})\n\n// 计算属性\nconst hasLuoguProblems = computed(() => {\n  return problems.value.some(p => p.oj_platform === 'luogu')\n})\n\nconst hasSelectedFilters = computed(() => {\n  return selectedPlatform.value || selectedDifficulties.value.length > 0 || selectedTags.value.length > 0\n})\n\n// 加载洛谷标签\nconst loadLuoguTags = async () => {\n  try {\n    const res = await getAllTags()\n    if (res.data.code === 200) {\n      luoguTags.value = res.data.data\n    }\n  } catch (error) {\n    console.error('加载洛谷标签失败:', error)\n  }\n}\n\n// 显示筛选弹窗\nconst showFilterDialog = () => {\n  // 初始化弹窗中的筛选条件\n  filterPlatform.value = selectedPlatform.value || 'leetcode'\n  tempDifficulties.value = [...selectedDifficulties.value]\n  tempTags.value = [...selectedTags.value]\n  filterDialogVisible.value = true\n}\n\n// 修改applyFilters函数，添加重新加载数据的逻辑\nconst applyFilters = () => {\n  selectedPlatform.value = filterPlatform.value\n  selectedDifficulties.value = [...tempDifficulties.value]\n  selectedTags.value = [...tempTags.value]\n  filterDialogVisible.value = false\n  \n  // 重置分页并重新加载数据\n  currentPage.value = 1\n  fetchProblems()\n}\n\n// 修改removeFilter函数，添加重新加载数据的逻辑\nconst removeFilter = (type, value = null) => {\n  switch(type) {\n    case 'platform':\n      selectedPlatform.value = ''\n      break\n    case 'difficulty':\n      selectedDifficulties.value = selectedDifficulties.value.filter(d => d !== value)\n      break\n    case 'tag':\n      selectedTags.value = selectedTags.value.filter(t => t !== value)\n      break\n  }\n  \n  // 重置分页并重新加载数据\n  currentPage.value = 1\n  fetchProblems()\n}\n\n// 平台映射\nconst PLATFORM_MAP = {\n  luogu: '洛谷',\n  leetcode: 'LeetCode'\n}\n\n// 获取平台名称\nconst getPlatformName = (platform) => {\n  return PLATFORM_MAP[platform] || platform\n}\n\n// 平台标签样式\nconst getPlatformTagType = (platform) => {\n  return {\n    luogu: 'success',\n    leetcode: 'warning'\n  }[platform] || 'info'\n}\n\n// 难度标签样式\nconst getDifficultyTagType = (row) => {\n  if (row.oj_platform === 'luogu') {\n    const levelMap = {\n      '入门': 'info',\n      '普及-': 'success',\n      '普及/提高-': 'success',\n      '普及+/提高': 'warning',\n      '提高+/省选-': 'danger',\n      '省选/NOI-': 'danger',\n      'NOI/NOI+': 'danger',\n      'CTSC': 'danger'\n    }\n    return levelMap[row.difficulty] || 'info'\n  }\n  return {\n    '简单': 'success',\n    '中等': 'warning',\n    '困难': 'danger'\n  }[row.difficulty] || 'info'\n}\n\n// 生成OJ题目链接\nconst generateOjLink = (row) => {\n  const baseUrls = {\n    luogu: `https://www.luogu.com.cn/problem/${row.ext_question_id}`,\n    leetcode: `https://leetcode.cn/problems/${row.ext_question_id}/`\n  }\n  return baseUrls[row.oj_platform] || '#'\n}\n\n// 标签分类过滤\nconst getFilteredTags = (tags, platform) => {\n  if (!tags) return []\n  \n  // LeetCode题目只显示算法标签\n  if (platform === 'leetcode') {\n    return tags.filter(tag => LeetcodeTags.includes(tag))\n  }\n  \n  // 洛谷题目根据当前模式过滤\n  return tags.filter(tag => {\n    if (tagDisplayMode.value === 'all') return true\n    \n    const prefix = tag.split('_')[0]\n    switch(tagDisplayMode.value) {\n      case 'algorithm': return prefix === 'Algorithm'\n      case 'source': return prefix === 'Source'\n      case 'time': return prefix === 'Time'\n      case 'region': return prefix === 'Region'\n      case 'other': return !['Algorithm', 'Source', 'Time', 'Region'].includes(prefix)\n      default: return true\n    }\n  })\n}\n\n// 获取标签名称（去掉前缀）\nconst getTagName = (tag) => {\n  // LeetCode标签已经是纯名称\n  if (LeetcodeTags.includes(tag)) return tag\n  \n  // 洛谷标签去掉前缀\n  return tag.split('_').slice(1).join('_') || tag\n}\n\n// 标签样式分类\nconst getTagType = (tag, platform) => {\n  // LeetCode标签统一为蓝色\n  if (platform === 'leetcode') return 'primary'\n  \n  // 洛谷标签根据前缀分类\n  const prefix = tag.split('_')[0]\n  return {\n    'Algorithm': 'primary',  // 算法 - 蓝色\n    'Source': 'success',     // 来源 - 绿色\n    'Time': 'warning',       // 时间 - 黄色\n    'Region': 'danger',      // 地区 - 红色\n    'Other': 'info'          // 其他 - 灰色\n  }[prefix] || 'info'\n}\n\nconst fetchProblems = async () => {\n  try {\n    loading.value = true\n    \n    if (searchQuery.value.trim()) {\n      const params = {\n        page: currentPage.value,\n        page_size: pageSize,\n        [searchType.value]: searchQuery.value.trim()\n      }\n      const res = await searchQuestionTrash(params) // 使用回收站搜索接口\n      problems.value = res.data.results\n      totalCount.value = res.data.count\n      return\n    }\n    \n    const params = {\n      page: currentPage.value,\n      page_size: pageSize,\n      filter_mode: filterMode.value\n    }\n    \n    if (selectedPlatform.value) {\n      params.platforms = selectedPlatform.value\n    }\n    if (selectedDifficulties.value.length > 0) {\n      params.difficulties = selectedDifficulties.value.join(',')\n    }\n    if (selectedTags.value.length > 0) {\n      params.algorithm_tags = selectedTags.value.join(',')\n    }\n    \n    const res = await getQuestionTrashList(params) // 使用回收站列表接口\n    problems.value = res.data.results\n    totalCount.value = res.data.count\n    \n  } catch (error) {\n    console.error('加载回收站题目失败:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\n\n// 初始化加载\nonMounted(() => {\n  fetchProblems()\n  loadLuoguTags()\n})\n\n// 跳转到题目详情\nconst handleRowClick = (row) => {\n  router.push(`/problems/${row.id}`)\n}\n\n\n// 修改 handleSearch 方法\nconst handleSearch = async () => {\n  if (!searchQuery.value.trim()) return\n  \n  try {\n    isSearching.value = true\n    loading.value = true\n    \n    const params = {\n      page: currentPage.value,\n      page_size: pageSize,\n      [searchType.value]: searchQuery.value.trim()\n    }\n    \n    const res = await searchQuestionTrash(params) // 使用回收站搜索接口\n    problems.value = res.data.results\n    totalCount.value = res.data.count\n    \n    selectedPlatform.value = ''\n    selectedDifficulties.value = []\n    selectedTags.value = []\n    \n  } catch (error) {\n    console.error('回收站搜索失败:', error)\n  } finally {\n    loading.value = false\n    isSearching.value = false\n  }\n}\n\n// 清空搜索\nconst handleSearchClear = () => {\n  if (searchQuery.value === '') {\n    // 如果已经清空，则恢复原始列表\n    fetchProblems()\n  }\n}\n\n\n</script>\n\n<style scoped>\n.main-container {\n  padding-top: 60px;\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);\n}\n\n.filter-card {\n  width: 90%;\n  max-width: 1200px;\n  margin: 0 auto 30px;\n  padding: 25px;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(0, 0, 0, 0.03);\n}\n\n.content-wrapper {\n  width: 90%;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 25px;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n}\n\n.search-container {\n  margin-bottom: 20px;\n}\n\n.search-input {\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.filter-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.selected-filters {\n  padding: 12px 0;\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.filter-label {\n  font-size: 14px;\n  color: #606266;\n  margin-right: 12px;\n}\n\n.filter-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.tag-mode-switch {\n  margin: 0 0 20px auto;\n  padding: 8px 12px;\n  background: rgba(0, 0, 0, 0.02);\n  border-radius: 6px;\n}\n\n.table-container {\n  margin: 20px 0;\n}\n\n.pagination-wrapper {\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.problem-title {\n  font-weight: 500;\n  color: var(--el-color-primary);\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.problem-title:hover {\n  color: #409EFF;\n  text-decoration: underline;\n}\n\n.external-id {\n  color: #606266;\n  transition: all 0.3s;\n}\n\n.external-id:hover {\n  color: var(--el-color-primary);\n}\n\n.tag-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n}\n\n.tag-item {\n  transition: all 0.3s;\n}\n\n.tag-item:hover {\n  transform: translateY(-2px);\n}\n\n/* 弹窗样式优化 */\n:deep(.el-dialog) {\n  border-radius: 12px;\n  background: rgba(255, 255, 255, 0.95);\n}\n\n:deep(.el-dialog__header) {\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.platform-selector {\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.filter-section {\n  padding: 0 10px;\n}\n\n.tag-group {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n}\n\n/* 表格优化 */\n:deep(.el-table) {\n  --el-table-border-color: rgba(0, 0, 0, 0.05);\n  --el-table-header-bg-color: rgba(0, 0, 0, 0.02);\n}\n\n:deep(.el-table__row) {\n  transition: all 0.3s;\n}\n\n:deep(.el-table__row:hover) {\n  background-color: #f8fafc !important;\n  transform: translateY(-1px);\n}\n\n:deep(.el-table th.el-table__cell) {\n  font-weight: 600;\n}\n\n/* 响应式调整 */\n@media (max-width: 768px) {\n  .filter-card,\n  .content-wrapper {\n    width: 95%;\n    padding: 20px 15px;\n  }\n\n  .filter-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 12px;\n  }\n\n  .search-container :deep(.el-input-group__prepend) {\n    width: 100px;\n  }\n\n  .tag-mode-switch {\n    margin: 0 auto 20px;\n    width: 100%;\n  }\n\n  :deep(.el-table) {\n    font-size: 14px;\n  }\n}\n</style>","import script from \"./ProblemTrashView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ProblemTrashView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ProblemTrashView.vue?vue&type=style&index=0&id=4293124a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4293124a\"]])\n\nexport default __exports__","// LeetCode相关标签\nexport const LeetcodeTags = [\n    \"Shell\",\n    \"二分查找\",\n    \"二叉搜索树\",\n    \"二叉树\",\n    \"交互\",\n    \"位运算\",\n    \"分治\",\n    \"前缀和\",\n    \"单向链表\",\n    \"单调栈\",\n    \"单调队列\",\n    \"双向链表\",\n    \"双指针\",\n    \"双连通分量\",\n    \"后缀数组\",\n    \"哈希函数\",\n    \"哈希表\",\n    \"图\",\n    \"基数排序\",\n    \"堆（优先队列）\",\n    \"字典树\",\n    \"字符串\",\n    \"字符串匹配\",\n    \"归并排序\",\n    \"快速选择\",\n    \"扫描线\",\n    \"拒绝采样\",\n    \"拓扑排序\",\n    \"排序\",\n    \"数论\",\n    \"数学\",\n    \"数据库\",\n    \"数据流\",\n    \"数组\",\n    \"最小生成树\",\n    \"最短路\",\n    \"有序集合\",\n    \"栈\",\n    \"树\",\n    \"树状数组\",\n    \"欧拉回路\",\n    \"概率与统计\",\n    \"模拟\",\n    \"滑动窗口\",\n    \"滚动哈希\",\n    \"深度优先搜索\",\n    \"状态压缩\",\n    \"矩阵\",\n    \"线段树\",\n    \"组合数学\",\n    \"脑筋急转弯\",\n    \"计数\",\n    \"计数排序\",\n    \"设计\",\n    \"贪心\",\n    \"迭代器\",\n    \"递归\",\n    \"链表\",\n    \"队列\",\n    \"随机化\",\n    \"集合\",\n    \"几何\",\n    \"动态规划\",\n    \"博弈\",\n    \"并查集\",\n    \"广度优先搜索\",\n    \"强连通分量\",\n    \"桶排序\",\n    \"水塘抽样\",\n    \"记忆化搜索\",\n    \"回溯\",\n    \"多线程\",\n    \"枚举\"\n]\n\n\n// 洛谷难度等级\nexport const LuoguDifficulties = [\n    '入门', '普及-', '普及/提高-', '普及+/提高',\n    '提高+/省选-', '省选/NOI-', 'NOI/NOI+', 'CTSC'\n]\n\n// LeetCode难度等级\nexport const LeetcodeDifficulties = ['简单', '中等', '困难']\n\n// 处理洛谷API返回的标签数据\nexport const processLuoguTags = (apiResponse) => {\n    const tagsList = [];\n    \n    // 主要处理 Algorithm 类型的标签，因为这些是算法相关标签\n    if (apiResponse.data && apiResponse.data.Algorithm) {\n        apiResponse.data.Algorithm.forEach(tag => {\n            tagsList.push(tag.name);\n        });\n    }\n    \n    return tagsList;\n}\n\n// 洛谷标签将通过API动态获取\nexport let LuoguTags = [];\n\n// 可以提供一个更新标签的方法\nexport const updateLuoguTags = (apiResponse) => {\n    LuoguTags = processLuoguTags(apiResponse);\n}\n","import request from './request'\n\nexport function getQuestionList(data = {}, page = 1) {\n  // 确保即使是空对象也会发送请求体\n  return request({\n    url: '/api/questions/',\n    method: 'post',\n    params: { page }, // 页码作为URL参数\n    data: data, // 其他筛选条件作为请求体\n    headers: {\n      'Content-Type': 'application/json' // 确保设置正确的内容类型\n    }\n  })\n}\n\nexport function getQuestionDetail(id) {\n  return request({\n    url: `/questions/${id}/`,\n    method: 'get'\n  })\n}\n\n\nexport const searchQuestions = (params) => {\n  return request({\n    url: '/api/questions/search/',\n    method: 'get',\n    params\n  })\n}\n\nexport function createQuestion(data) {\n  return request({\n    url: '/api/questions/create/',\n    method: 'post',\n    data\n  })\n}\n\nexport function deleteQuestion(data) {\n  return request({\n    url: '/api/questions/delete/',\n    method: 'post',\n    data\n  })\n}\n\nexport function updateQuestion(id, data) {\n  return request({\n    url: `/questions/${id}/update/`,\n    method: 'put',\n    data\n  })\n}\n\nexport function extractQuestion(data) {\n  return request({\n    url: '/api/questions/extract/',\n    method: 'post',\n    data\n  })\n}\n\nexport function getQuestionCount() {\n  return request({\n    url: '/api/questions/count/',\n    method: 'get'\n  })\n}\n\nexport const getAllTags = () => {\n  return request({\n    url: '/api/tags/',\n    method: 'get'\n  })\n}\n\nexport const getTagDetail = (tag_id) => {\n  return request({\n    url: '/api/tag/',\n    method: 'get',\n    params: { tag_id }\n  })\n}\n\n// 回收站接口\nexport const getQuestionTrashList = (params) => {\n  return request({\n    url: '/api/questions/trash/',\n    method: 'get',\n    params\n  })\n}\n\nexport const searchQuestionTrash = (params) => {\n  return request({\n    url: '/api/questions/trash/search/',\n    method: 'get',\n    params\n  })\n}\n\nexport function restoreQuestion(data) {\n  return request({\n    url: '/api/questions/restore/',\n    method: 'post',\n    data\n  })\n}"],"names":["pageSize","router","useRouter","searchQuery","ref","searchType","isSearching","loading","problems","currentPage","totalCount","tagDisplayMode","filterDialogVisible","selectedPlatform","selectedDifficulties","selectedTags","filterPlatform","tempDifficulties","tempTags","filterMode","luoguTags","Algorithm","Source","Time","Region","Other","hasLuoguProblems","computed","value","some","p","oj_platform","hasSelectedFilters","length","loadLuoguTags","async","res","getAllTags","data","code","error","console","showFilterDialog","applyFilters","fetchProblems","removeFilter","type","filter","d","t","PLATFORM_MAP","luogu","leetcode","getPlatformName","platform","getPlatformTagType","getDifficultyTagType","row","levelMap","difficulty","generateOjLink","baseUrls","ext_question_id","getFilteredTags","tags","tag","LeetcodeTags","includes","prefix","split","getTagName","slice","join","getTagType","trim","params","page","page_size","searchQuestionTrash","results","count","filter_mode","platforms","difficulties","algorithm_tags","getQuestionTrashList","onMounted","handleRowClick","push","id","handleSearch","handleSearchClear","__exports__","LuoguDifficulties","LeetcodeDifficulties","getQuestionList","request","url","method","headers","getQuestionDetail","searchQuestions","createQuestion","deleteQuestion","updateQuestion","extractQuestion","restoreQuestion"],"sourceRoot":""}