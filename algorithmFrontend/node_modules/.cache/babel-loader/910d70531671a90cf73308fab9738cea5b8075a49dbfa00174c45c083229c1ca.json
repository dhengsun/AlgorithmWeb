{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"main-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppHeader = _resolveComponent(\"AppHeader\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!_ctx.$route.meta.hideHeader ? (_openBlock(), _createBlock(_component_AppHeader, {\n    key: 0\n  })) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"content-container\", {\n      'no-header': _ctx.$route.meta.hideHeader\n    }])\n  }, [_createVNode(_component_router_view)], 2)]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_ctx","$route","meta","hideHeader","_createBlock","_component_AppHeader","key","_createCommentVNode","_createElementVNode","class","_normalizeClass","_createVNode","_component_router_view"],"sources":["/Users/hsd/File/Code/Project/AlgorithmWeb/algorithmFrontend/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"main-container\">\n    <!-- 根据路由meta判断是否显示AppHeader -->\n    <AppHeader v-if=\"!$route.meta.hideHeader\" />\n    <div class=\"content-container\" :class=\"{ 'no-header': $route.meta.hideHeader }\">\n      <router-view></router-view>\n    </div>\n  </div>\n</template>\n\n<script>\nimport AppHeader from './components/AppHeader.vue'\nimport { ref, provide } from 'vue'\n\nexport default {\n  name: 'App',\n  components: {\n    AppHeader\n  },\n  setup() {\n    const isCollapsed = ref(false)\n    provide('isCollapsed', isCollapsed)\n    \n    return {\n      isCollapsed\n    }\n  },\n  mounted() {\n    console.log('App组件已挂载')\n    \n    // 检查登录状态，确保用户已登录\n    this.checkAuth()\n  },\n  methods: {\n    // 验证登录状态\n    checkAuth() {\n      const token = localStorage.getItem('access_token')\n      if (!token && this.$route.meta.requiresAuth) {\n        this.$router.push('/login')\n      }\n    }\n  },\n  errorCaptured(err, vm, info) {\n    console.error('App捕获到错误:', err)\n    console.error('错误信息:', info)\n    return false\n  }\n}\n</script>\n\n<style>\n/* 重置所有元素的边距和内边距 */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  width: 100%;\n  /* 移除 overflow: hidden; 允许页面滚动 */\n}\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  height: 100%;\n  width: 100%;\n  position: relative;\n  /* 移除 overflow: hidden; 允许内容滚动 */\n}\n\n#main-container {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  /* 移除 overflow: hidden; 允许内容滚动 */\n}\n\n.content-container {\n  margin-left: 60px; /* 与导航栏宽度一致 */\n  margin-top: 0; /* 确保顶部没有间隙 */\n  padding: 16px; /* 内容区域内边距 */\n  min-height: 100%; /* 修改为100%而不是100vh */\n  width: calc(100% - 60px); /* 减去导航栏宽度 */\n  background-color: #f5f5f5; /* 设置背景色以便于区分 */\n  position: relative;\n  /* 允许内容区域滚动，但不设置overflow-y: auto */\n  \n  /* 过渡效果 */\n  transition: margin-left 0.3s, width 0.3s;\n}\n\n/* 当没有导航栏时的样式 */\n.content-container.no-header {\n  margin-left: 0;\n  width: 100%;\n}\n\n/* 移除所有可能的默认边距 */\nh1, h2, h3, h4, h5, h6, p, ol, ul, figure, blockquote {\n  margin: 0;\n  padding: 0;\n}\n</style>"],"mappings":";;EACOA,EAAE,EAAC;AAAgB;;;;uBAAxBC,mBAAA,CAMM,OANNC,UAMM,G,CAJcC,IAAA,CAAAC,MAAM,CAACC,IAAI,CAACC,UAAU,I,cAAxCC,YAAA,CAA4CC,oBAAA;IAHhDC,GAAA;EAAA,MAAAC,mBAAA,YAIIC,mBAAA,CAEM;IAFDC,KAAK,EAJdC,eAAA,EAIe,mBAAmB;MAAA,aAAwBV,IAAA,CAAAC,MAAM,CAACC,IAAI,CAACC;IAAU;MAC1EQ,YAAA,CAA2BC,sBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}