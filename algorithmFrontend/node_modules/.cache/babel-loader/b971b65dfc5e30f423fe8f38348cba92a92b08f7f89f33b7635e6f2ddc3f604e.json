{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport AppHeader from '@/components/AppHeader.vue';\nimport { getQuestionDetail, getAllTags } from '@/api/question';\nimport MarkdownIt from 'markdown-it';\nimport DOMPurify from 'dompurify';\nimport { ElMessage } from 'element-plus';\n\n// 导入更新题目的API和标签常量\nimport { updateQuestion } from '@/api/question';\nimport { LeetcodeTags } from '@/constants/tags';\nexport default {\n  name: 'QuestionUpdate',\n  components: {\n    AppHeader\n  },\n  data() {\n    return {\n      // 查询表单\n      queryForm: {\n        id: ''\n      },\n      queryRules: {\n        id: [{\n          required: true,\n          message: '请输入题目ID',\n          trigger: 'blur'\n        },\n        // 修改验证规则，允许字母和数字的组合\n        {\n          pattern: /^[a-zA-Z0-9]+$/,\n          message: '题目ID只能包含字母和数字',\n          trigger: 'blur'\n        }]\n      },\n      // 题目状态\n      question: null,\n      loading: false,\n      error: null,\n      // 题目表单\n      questionForm: {\n        id: '',\n        name: '',\n        ext_question_id: '',\n        oj_platform: '',\n        difficulty: '',\n        algorithm_tags: [],\n        content: ''\n      },\n      // 表单验证规则\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入题目名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 100,\n          message: '长度在1到100个字符',\n          trigger: 'blur'\n        }],\n        ext_question_id: [{\n          required: true,\n          message: '请输入外部ID',\n          trigger: 'blur'\n        }],\n        oj_platform: [{\n          required: true,\n          message: '请选择平台',\n          trigger: 'change'\n        }],\n        difficulty: [{\n          required: true,\n          message: '请选择难度',\n          trigger: 'change'\n        }]\n      },\n      // 标签相关数据\n      tagInputVisible: false,\n      tagInputValue: '',\n      tagSearchValue: '',\n      tagSearchLoading: false,\n      tagCategoryTitle: '',\n      // 标签数据\n      allTags: {\n        leetcode: LeetcodeTags.map(tag => ({\n          label: tag,\n          value: tag\n        })),\n        luogu: {\n          Algorithm: [],\n          Source: [],\n          Time: [],\n          Region: [],\n          Other: []\n        }\n      },\n      filteredTags: [],\n      // 筛选后的标签\n\n      // 内容预览标签页\n      contentTabActive: 'edit',\n      // Markdown渲染\n      mdi: new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true\n      })\n    };\n  },\n  computed: {\n    // Markdown预览\n    previewMarkdown() {\n      if (!this.questionForm.content) return '';\n      try {\n        const content = String(this.questionForm.content || '');\n        const html = this.mdi.render(content);\n        return DOMPurify.sanitize(html);\n      } catch (e) {\n        console.error('Markdown处理错误:', e);\n        return '内容解析出错';\n      }\n    },\n    // HTML预览\n    previewHtml() {\n      if (!this.questionForm.content) return '';\n      try {\n        let content = String(this.questionForm.content || '');\n\n        // 简单处理HTML内容\n        return DOMPurify.sanitize(content, {\n          USE_PROFILES: {\n            html: true\n          },\n          ALLOWED_TAGS: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'br', 'hr', 'ol', 'ul', 'li', 'pre', 'code', 'blockquote', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'strong', 'em', 'b', 'i', 'u', 'strike', 's', 'a', 'img', 'span', 'div', 'section', 'article']\n        });\n      } catch (e) {\n        console.error('HTML处理错误:', e);\n        return '内容解析出错';\n      }\n    }\n  },\n  mounted() {\n    // 加载所有平台的标签\n    this.loadAllTags();\n\n    // 如果URL中带有id参数，则自动填充并查询\n    const urlId = this.$route.params.id;\n    if (urlId) {\n      this.queryForm.id = urlId;\n      this.fetchQuestion();\n    }\n  },\n  methods: {\n    // 加载所有标签\n    async loadAllTags() {\n      try {\n        // LeetCode标签已从常量导入\n\n        // 加载洛谷标签\n        const res = await getAllTags();\n        if (res.data && res.data.code === 200) {\n          this.allTags.luogu = res.data.data;\n        }\n      } catch (error) {\n        console.error('加载标签失败:', error);\n        ElMessage.error('加载标签数据失败');\n      }\n    },\n    // 平台变更时重置标签搜索\n    handlePlatformChange() {\n      this.tagSearchValue = '';\n      this.filteredTags = [];\n\n      // 如果切换了平台，清空已选标签\n      if (confirm('切换平台将清空已选标签，是否继续？')) {\n        this.questionForm.algorithm_tags = [];\n      } else {\n        // 恢复原平台\n        this.questionForm.oj_platform = this.question.oj_platform;\n      }\n    },\n    // 标签搜索功能\n    searchTags(query) {\n      this.tagSearchLoading = true;\n      this.tagCategoryTitle = '';\n      if (query.trim() === '') {\n        this.filteredTags = [];\n        this.tagSearchLoading = false;\n        return;\n      }\n      setTimeout(() => {\n        if (this.questionForm.oj_platform === 'leetcode') {\n          // 搜索LeetCode标签\n          this.filteredTags = this.allTags.leetcode.filter(tag => tag.label.toLowerCase().includes(query.toLowerCase()));\n        } else if (this.questionForm.oj_platform === 'luogu') {\n          // 搜索洛谷标签，合并所有类别\n          let allLuoguTags = [];\n\n          // 遍历所有类别\n          for (const category in this.allTags.luogu) {\n            // 过滤符合条件的标签并格式化\n            const matchedTags = this.allTags.luogu[category].filter(tag => tag.name.toLowerCase().includes(query.toLowerCase())).map(tag => ({\n              label: tag.name,\n              value: `${category}_${tag.name}`,\n              category\n            }));\n            if (matchedTags.length) {\n              this.tagCategoryTitle = this.getCategoryName(category);\n              allLuoguTags = [...allLuoguTags, ...matchedTags];\n            }\n          }\n          this.filteredTags = allLuoguTags;\n        }\n        this.tagSearchLoading = false;\n      }, 200);\n    },\n    // 获取分类中文名称\n    getCategoryName(category) {\n      const categoryMap = {\n        'Algorithm': '算法标签',\n        'Source': '来源标签',\n        'Time': '时间标签',\n        'Region': '地区标签',\n        'Other': '其他标签'\n      };\n      return categoryMap[category] || category;\n    },\n    // 标签选择处理\n    handleTagSelect(value) {\n      if (!value) return;\n\n      // 检查是否已选择该标签\n      if (this.questionForm.algorithm_tags.includes(value)) {\n        ElMessage.warning('该标签已添加');\n      } else {\n        this.questionForm.algorithm_tags.push(value);\n        ElMessage.success('标签添加成功');\n      }\n\n      // 清空选择框\n      this.tagSearchValue = '';\n    },\n    // 查询题目\n    async fetchQuestion() {\n      // 表单验证\n      try {\n        await this.$refs.queryFormRef.validate();\n      } catch (error) {\n        return false;\n      }\n      this.loading = true;\n      this.error = null;\n      try {\n        const response = await getQuestionDetail(this.queryForm.id);\n        this.question = response.data;\n\n        // 填充表单\n        this.fillFormWithQuestion(this.question);\n        this.loading = false;\n      } catch (error) {\n        console.error('获取题目详情失败:', error);\n        this.error = '获取题目详情失败: ' + (error.message || '未知错误');\n        this.loading = false;\n      }\n    },\n    // 填充表单\n    fillFormWithQuestion(question) {\n      this.questionForm.id = question.id;\n      this.questionForm.name = question.name;\n      this.questionForm.ext_question_id = question.ext_question_id;\n      this.questionForm.oj_platform = question.oj_platform;\n      this.questionForm.difficulty = question.difficulty;\n      this.questionForm.content = question.content;\n\n      // 处理标签\n      if (typeof question.algorithm_tags === 'string') {\n        this.questionForm.algorithm_tags = question.algorithm_tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n      } else if (Array.isArray(question.algorithm_tags)) {\n        this.questionForm.algorithm_tags = [...question.algorithm_tags];\n      } else {\n        this.questionForm.algorithm_tags = [];\n      }\n    },\n    // 重置查询\n    resetQuery() {\n      this.question = null;\n      this.error = null;\n      this.queryForm.id = '';\n      if (this.$refs.queryFormRef) {\n        this.$refs.queryFormRef.resetFields();\n      }\n    },\n    // 重置表单\n    resetForm() {\n      if (this.$refs.formRef) {\n        this.$refs.formRef.resetFields();\n      }\n\n      // 重新填充原始数据\n      if (this.question) {\n        this.fillFormWithQuestion(this.question);\n      }\n    },\n    // 提交表单\n    async submitForm() {\n      // 表单验证\n      try {\n        await this.$refs.formRef.validate();\n      } catch (error) {\n        return false;\n      }\n      this.loading = true;\n      try {\n        // 创建适合后端API的请求数据\n        const formData = {\n          id: this.questionForm.id,\n          name: this.questionForm.name,\n          ext_question_id: this.questionForm.ext_question_id,\n          oj_platform: this.questionForm.oj_platform,\n          difficulty: this.questionForm.difficulty,\n          content: this.questionForm.content,\n          // 确保算法标签是数组形式，与Postman测试保持一致\n          algorithm_tags: Array.isArray(this.questionForm.algorithm_tags) ? [...this.questionForm.algorithm_tags] : []\n        };\n\n        // 可以添加url字段，如果后端需要\n        if (this.questionForm.oj_platform === 'leetcode') {\n          formData.url = `https://leetcode.cn/problems/${this.questionForm.ext_question_id}/`;\n        } else if (this.questionForm.oj_platform === 'luogu') {\n          formData.url = `https://www.luogu.com.cn/problem/${this.questionForm.ext_question_id}`;\n        }\n        console.log('发送更新请求数据:', formData);\n\n        // 调用更新API\n        await updateQuestion(formData.id, formData);\n\n        // 显示成功消息\n        ElMessage({\n          message: '题目更新成功',\n          type: 'success'\n        });\n\n        // 重新获取最新数据\n        this.fetchQuestion();\n      } catch (error) {\n        console.error('更新题目失败:', error);\n        ElMessage({\n          message: '更新题目失败: ' + (error.message || '未知错误'),\n          type: 'error'\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 删除已选标签\n    handleTagClose(tag) {\n      this.questionForm.algorithm_tags = this.questionForm.algorithm_tags.filter(t => t !== tag);\n    },\n    // 获取标签名称（去掉前缀）\n    getTagName(tag) {\n      // LeetCode标签已经是纯名称\n      if (this.allTags.leetcode.some(t => t.value === tag)) {\n        return tag;\n      }\n\n      // 洛谷标签去掉前缀\n      const parts = tag.split('_');\n      if (parts.length > 1) {\n        return parts.slice(1).join('_');\n      }\n      return tag;\n    },\n    // 标签样式\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary';\n\n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0];\n      return {\n        'Algorithm': 'primary',\n        // 算法 - 蓝色\n        'Source': 'success',\n        // 来源 - 绿色\n        'Time': 'warning',\n        // 时间 - 黄色\n        'Region': 'danger',\n        // 地区 - 红色\n        'Other': 'info' // 其他 - 灰色\n      }[prefix] || 'info';\n    }\n  }\n};","map":{"version":3,"names":["AppHeader","getQuestionDetail","getAllTags","MarkdownIt","DOMPurify","ElMessage","updateQuestion","LeetcodeTags","name","components","data","queryForm","id","queryRules","required","message","trigger","pattern","question","loading","error","questionForm","ext_question_id","oj_platform","difficulty","algorithm_tags","content","rules","min","max","tagInputVisible","tagInputValue","tagSearchValue","tagSearchLoading","tagCategoryTitle","allTags","leetcode","map","tag","label","value","luogu","Algorithm","Source","Time","Region","Other","filteredTags","contentTabActive","mdi","html","linkify","typographer","computed","previewMarkdown","String","render","sanitize","e","console","previewHtml","USE_PROFILES","ALLOWED_TAGS","mounted","loadAllTags","urlId","$route","params","fetchQuestion","methods","res","code","handlePlatformChange","confirm","searchTags","query","trim","setTimeout","filter","toLowerCase","includes","allLuoguTags","category","matchedTags","length","getCategoryName","categoryMap","handleTagSelect","warning","push","success","$refs","queryFormRef","validate","response","fillFormWithQuestion","split","Array","isArray","resetQuery","resetFields","resetForm","formRef","submitForm","formData","url","log","type","handleTagClose","t","getTagName","some","parts","slice","join","getTagType","platform","prefix"],"sources":["/Users/hsd/File/Code/Project/AlgorithmWeb/algorithmFrontend/src/views/QuestionUpdate.vue"],"sourcesContent":["<template>\n  <div class=\"question-update-view\">\n    <AppHeader />\n    <main class=\"page-container\">\n      <el-card class=\"update-card\">\n        <template #header>\n          <div class=\"card-header\">\n            <h2>更新题目</h2>\n          </div>\n        </template>\n\n        <!-- 题目ID查询部分 -->\n        <div v-if=\"!question\" class=\"id-query-section\">\n          <el-form :model=\"queryForm\" :rules=\"queryRules\" ref=\"queryFormRef\" label-width=\"80px\">\n            <el-form-item label=\"题目ID\" prop=\"id\">\n              <el-input v-model=\"queryForm.id\" placeholder=\"请输入题目ID（如E1、E2等）\"></el-input>\n            </el-form-item>\n\n            <el-form-item>\n              <el-button type=\"primary\" @click=\"fetchQuestion\">查询题目</el-button>\n            </el-form-item>\n          </el-form>\n        </div>\n\n        <!-- 加载中状态 -->\n        <div v-else-if=\"loading\" class=\"loading-container\">\n          <el-skeleton :rows=\"10\" animated />\n        </div>\n\n        <!-- 错误提示 -->\n        <div v-else-if=\"error\" class=\"error-container\">\n          <el-alert\n            :title=\"error\"\n            type=\"error\"\n            :closable=\"false\"\n            @close=\"resetQuery\"\n          />\n          <el-button class=\"mt-3\" @click=\"resetQuery\">返回</el-button>\n        </div>\n\n        <!-- 题目编辑表单 -->\n        <div v-else class=\"question-form-container\">\n          <el-form \n            :model=\"questionForm\" \n            :rules=\"rules\" \n            ref=\"formRef\" \n            label-width=\"100px\"\n            label-position=\"top\"\n          >\n            <!-- 基本信息部分 -->\n            <el-divider content-position=\"left\">基本信息</el-divider>\n            \n            <el-row :gutter=\"20\">\n              <el-col :span=\"12\">\n                <el-form-item label=\"题目名称\" prop=\"name\">\n                  <el-input v-model=\"questionForm.name\" placeholder=\"请输入题目名称\"></el-input>\n                </el-form-item>\n              </el-col>\n              <el-col :span=\"12\">\n                <el-form-item label=\"外部ID\" prop=\"ext_question_id\">\n                  <el-input v-model=\"questionForm.ext_question_id\" placeholder=\"请输入外部ID\"></el-input>\n                </el-form-item>\n              </el-col>\n            </el-row>\n\n            <el-row :gutter=\"20\">\n              <el-col :span=\"12\">\n                <el-form-item label=\"平台\" prop=\"oj_platform\">\n                  <el-select \n                    v-model=\"questionForm.oj_platform\" \n                    placeholder=\"请选择平台\" \n                    style=\"width: 100%\"\n                    @change=\"handlePlatformChange\"\n                  >\n                    <el-option label=\"LeetCode\" value=\"leetcode\"></el-option>\n                    <el-option label=\"洛谷\" value=\"luogu\"></el-option>\n                    <!-- 可以添加更多平台 -->\n                  </el-select>\n                </el-form-item>\n              </el-col>\n              <el-col :span=\"12\">\n                <el-form-item label=\"难度\" prop=\"difficulty\">\n                  <el-select \n                    v-model=\"questionForm.difficulty\" \n                    placeholder=\"请选择难度\" \n                    style=\"width: 100%\"\n                  >\n                    <!-- LeetCode 难度 -->\n                    <template v-if=\"questionForm.oj_platform === 'leetcode'\">\n                      <el-option label=\"简单\" value=\"简单\"></el-option>\n                      <el-option label=\"中等\" value=\"中等\"></el-option>\n                      <el-option label=\"困难\" value=\"困难\"></el-option>\n                    </template>\n                    \n                    <!-- 洛谷难度 -->\n                    <template v-else-if=\"questionForm.oj_platform === 'luogu'\">\n                      <el-option label=\"入门\" value=\"入门\"></el-option>\n                      <el-option label=\"普及-\" value=\"普及-\"></el-option>\n                      <el-option label=\"普及/提高-\" value=\"普及/提高-\"></el-option>\n                      <el-option label=\"普及+/提高\" value=\"普及+/提高\"></el-option>\n                      <el-option label=\"提高+/省选-\" value=\"提高+/省选-\"></el-option>\n                      <el-option label=\"省选/NOI-\" value=\"省选/NOI-\"></el-option>\n                      <el-option label=\"NOI/NOI+\" value=\"NOI/NOI+\"></el-option>\n                      <el-option label=\"CTSC\" value=\"CTSC\"></el-option>\n                    </template>\n                    \n                    <!-- 默认选项 -->\n                    <template v-else>\n                      <el-option label=\"简单\" value=\"简单\"></el-option>\n                      <el-option label=\"中等\" value=\"中等\"></el-option>\n                      <el-option label=\"困难\" value=\"困难\"></el-option>\n                    </template>\n                  </el-select>\n                </el-form-item>\n              </el-col>\n            </el-row>\n\n            <!-- 算法标签部分 -->\n            <el-divider content-position=\"left\">算法标签</el-divider>\n            <el-form-item label=\"已选标签\" prop=\"algorithm_tags\">\n              <div class=\"tags-container\">\n                <el-tag\n                  v-for=\"tag in questionForm.algorithm_tags\"\n                  :key=\"tag\"\n                  closable\n                  :type=\"getTagType(tag, questionForm.oj_platform)\"\n                  @close=\"handleTagClose(tag)\"\n                  class=\"algorithm-tag\"\n                >\n                  {{ getTagName(tag) }}\n                </el-tag>\n              </div>\n            </el-form-item>\n            \n            <!-- 新增的模糊搜索标签选择 -->\n            <el-form-item label=\"添加标签\">\n              <el-select\n                v-model=\"tagSearchValue\"\n                filterable\n                remote\n                reserve-keyword\n                placeholder=\"输入关键词搜索标签\"\n                :remote-method=\"searchTags\"\n                :loading=\"tagSearchLoading\"\n                @change=\"handleTagSelect\"\n                class=\"tag-select\"\n                clearable\n              >\n                <!-- 显示分类标题 (仅洛谷) -->\n                <template v-if=\"questionForm.oj_platform === 'luogu' && tagCategoryTitle\">\n                  <el-option-group :label=\"tagCategoryTitle\">\n                    <el-option\n                      v-for=\"tag in filteredTags\"\n                      :key=\"tag.value\"\n                      :label=\"tag.label\"\n                      :value=\"tag.value\"\n                    />\n                  </el-option-group>\n                </template>\n                \n                <!-- 无分类标题的选项 -->\n                <template v-else>\n                  <el-option\n                    v-for=\"tag in filteredTags\"\n                    :key=\"tag.value\"\n                    :label=\"tag.label\"\n                    :value=\"tag.value\"\n                  />\n                </template>\n              </el-select>\n            </el-form-item>\n\n            <!-- 题目内容部分 -->\n            <el-divider content-position=\"left\">题目内容</el-divider>\n            <el-form-item \n              label=\"题目内容\" \n              prop=\"content\"\n              :rules=\"[{ required: true, message: '题目内容不能为空', trigger: 'blur' }]\"\n            >\n              <el-tabs v-model=\"contentTabActive\">\n                <el-tab-pane label=\"编辑\" name=\"edit\">\n                  <el-input\n                    v-model=\"questionForm.content\"\n                    type=\"textarea\"\n                    :rows=\"15\"\n                    placeholder=\"请输入题目内容\"\n                  ></el-input>\n                </el-tab-pane>\n                <el-tab-pane label=\"预览\" name=\"preview\">\n                  <div v-if=\"questionForm.oj_platform === 'leetcode'\" \n                       class=\"preview-container html-content\" \n                       v-html=\"previewHtml\">\n                  </div>\n                  <div v-else \n                       class=\"preview-container markdown-content\" \n                       v-html=\"previewMarkdown\">\n                  </div>\n                </el-tab-pane>\n              </el-tabs>\n            </el-form-item>\n\n            <!-- 操作按钮 -->\n            <el-form-item>\n              <el-button type=\"primary\" @click=\"submitForm\">更新题目</el-button>\n              <el-button @click=\"resetForm\">重置表单</el-button>\n              <el-button type=\"info\" @click=\"resetQuery\">返回查询</el-button>\n            </el-form-item>\n          </el-form>\n        </div>\n      </el-card>\n    </main>\n  </div>\n</template>\n\n<script>\nimport AppHeader from '@/components/AppHeader.vue'\nimport { getQuestionDetail, getAllTags } from '@/api/question'\nimport MarkdownIt from 'markdown-it'\nimport DOMPurify from 'dompurify'\nimport { ElMessage } from 'element-plus'\n\n// 导入更新题目的API和标签常量\nimport { updateQuestion } from '@/api/question'\nimport { LeetcodeTags } from '@/constants/tags'\n\nexport default {\n  name: 'QuestionUpdate',\n  components: {\n    AppHeader\n  },\n  data() {\n    return {\n      // 查询表单\n      queryForm: {\n        id: ''\n      },\n      queryRules: {\n        id: [\n          { required: true, message: '请输入题目ID', trigger: 'blur' },\n          // 修改验证规则，允许字母和数字的组合\n          { pattern: /^[a-zA-Z0-9]+$/, message: '题目ID只能包含字母和数字', trigger: 'blur' }\n        ]\n      },\n      \n      // 题目状态\n      question: null,\n      loading: false,\n      error: null,\n      \n      // 题目表单\n      questionForm: {\n        id: '',\n        name: '',\n        ext_question_id: '',\n        oj_platform: '',\n        difficulty: '',\n        algorithm_tags: [],\n        content: ''\n      },\n      \n      // 表单验证规则\n      rules: {\n        name: [\n          { required: true, message: '请输入题目名称', trigger: 'blur' },\n          { min: 1, max: 100, message: '长度在1到100个字符', trigger: 'blur' }\n        ],\n        ext_question_id: [\n          { required: true, message: '请输入外部ID', trigger: 'blur' }\n        ],\n        oj_platform: [\n          { required: true, message: '请选择平台', trigger: 'change' }\n        ],\n        difficulty: [\n          { required: true, message: '请选择难度', trigger: 'change' }\n        ]\n      },\n      \n      // 标签相关数据\n      tagInputVisible: false,\n      tagInputValue: '',\n      tagSearchValue: '',\n      tagSearchLoading: false,\n      tagCategoryTitle: '',\n      \n      // 标签数据\n      allTags: {\n        leetcode: LeetcodeTags.map(tag => ({ label: tag, value: tag })),\n        luogu: {\n          Algorithm: [],\n          Source: [],\n          Time: [],\n          Region: [],\n          Other: []\n        }\n      },\n      filteredTags: [], // 筛选后的标签\n      \n      // 内容预览标签页\n      contentTabActive: 'edit',\n      \n      // Markdown渲染\n      mdi: new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true\n      }),\n    }\n  },\n  computed: {\n    // Markdown预览\n    previewMarkdown() {\n      if (!this.questionForm.content) return ''\n      \n      try {\n        const content = String(this.questionForm.content || '')\n        const html = this.mdi.render(content)\n        return DOMPurify.sanitize(html)\n      } catch (e) {\n        console.error('Markdown处理错误:', e)\n        return '内容解析出错'\n      }\n    },\n    \n    // HTML预览\n    previewHtml() {\n      if (!this.questionForm.content) return ''\n      \n      try {\n        let content = String(this.questionForm.content || '')\n        \n        // 简单处理HTML内容\n        return DOMPurify.sanitize(content, {\n          USE_PROFILES: { html: true },\n          ALLOWED_TAGS: [\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'br', 'hr',\n            'ol', 'ul', 'li', 'pre', 'code', 'blockquote',\n            'table', 'thead', 'tbody', 'tr', 'th', 'td',\n            'strong', 'em', 'b', 'i', 'u', 'strike', 's',\n            'a', 'img', 'span', 'div', 'section', 'article'\n          ]\n        })\n      } catch (e) {\n        console.error('HTML处理错误:', e)\n        return '内容解析出错'\n      }\n    }\n  },\n  mounted() {\n    // 加载所有平台的标签\n    this.loadAllTags()\n    \n    // 如果URL中带有id参数，则自动填充并查询\n    const urlId = this.$route.params.id\n    if (urlId) {\n      this.queryForm.id = urlId\n      this.fetchQuestion()\n    }\n  },\n  methods: {\n    // 加载所有标签\n    async loadAllTags() {\n      try {\n        // LeetCode标签已从常量导入\n        \n        // 加载洛谷标签\n        const res = await getAllTags()\n        if (res.data && res.data.code === 200) {\n          this.allTags.luogu = res.data.data\n        }\n      } catch (error) {\n        console.error('加载标签失败:', error)\n        ElMessage.error('加载标签数据失败')\n      }\n    },\n    \n    // 平台变更时重置标签搜索\n    handlePlatformChange() {\n      this.tagSearchValue = ''\n      this.filteredTags = []\n      \n      // 如果切换了平台，清空已选标签\n      if (confirm('切换平台将清空已选标签，是否继续？')) {\n        this.questionForm.algorithm_tags = []\n      } else {\n        // 恢复原平台\n        this.questionForm.oj_platform = this.question.oj_platform\n      }\n    },\n    \n    // 标签搜索功能\n    searchTags(query) {\n      this.tagSearchLoading = true\n      this.tagCategoryTitle = ''\n      \n      if (query.trim() === '') {\n        this.filteredTags = []\n        this.tagSearchLoading = false\n        return\n      }\n      \n      setTimeout(() => {\n        if (this.questionForm.oj_platform === 'leetcode') {\n          // 搜索LeetCode标签\n          this.filteredTags = this.allTags.leetcode\n            .filter(tag => tag.label.toLowerCase().includes(query.toLowerCase()))\n        } else if (this.questionForm.oj_platform === 'luogu') {\n          // 搜索洛谷标签，合并所有类别\n          let allLuoguTags = [];\n          \n          // 遍历所有类别\n          for (const category in this.allTags.luogu) {\n            // 过滤符合条件的标签并格式化\n            const matchedTags = this.allTags.luogu[category]\n              .filter(tag => tag.name.toLowerCase().includes(query.toLowerCase()))\n              .map(tag => ({\n                label: tag.name,\n                value: `${category}_${tag.name}`,\n                category\n              }))\n            \n            if (matchedTags.length) {\n              this.tagCategoryTitle = this.getCategoryName(category)\n              allLuoguTags = [...allLuoguTags, ...matchedTags]\n            }\n          }\n          \n          this.filteredTags = allLuoguTags\n        }\n        \n        this.tagSearchLoading = false\n      }, 200)\n    },\n    \n    // 获取分类中文名称\n    getCategoryName(category) {\n      const categoryMap = {\n        'Algorithm': '算法标签',\n        'Source': '来源标签',\n        'Time': '时间标签',\n        'Region': '地区标签',\n        'Other': '其他标签'\n      }\n      return categoryMap[category] || category\n    },\n    \n    // 标签选择处理\n    handleTagSelect(value) {\n      if (!value) return\n      \n      // 检查是否已选择该标签\n      if (this.questionForm.algorithm_tags.includes(value)) {\n        ElMessage.warning('该标签已添加')\n      } else {\n        this.questionForm.algorithm_tags.push(value)\n        ElMessage.success('标签添加成功')\n      }\n      \n      // 清空选择框\n      this.tagSearchValue = ''\n    },\n    \n    // 查询题目\n    async fetchQuestion() {\n      // 表单验证\n      try {\n        await this.$refs.queryFormRef.validate()\n      } catch (error) {\n        return false\n      }\n      \n      this.loading = true\n      this.error = null\n      \n      try {\n        const response = await getQuestionDetail(this.queryForm.id)\n        this.question = response.data\n        \n        // 填充表单\n        this.fillFormWithQuestion(this.question)\n        \n        this.loading = false\n      } catch (error) {\n        console.error('获取题目详情失败:', error)\n        this.error = '获取题目详情失败: ' + (error.message || '未知错误')\n        this.loading = false\n      }\n    },\n    \n    // 填充表单\n    fillFormWithQuestion(question) {\n      this.questionForm.id = question.id\n      this.questionForm.name = question.name\n      this.questionForm.ext_question_id = question.ext_question_id\n      this.questionForm.oj_platform = question.oj_platform\n      this.questionForm.difficulty = question.difficulty\n      this.questionForm.content = question.content\n      \n      // 处理标签\n      if (typeof question.algorithm_tags === 'string') {\n        this.questionForm.algorithm_tags = question.algorithm_tags\n          .split(',')\n          .map(tag => tag.trim())\n          .filter(tag => tag.length > 0)\n      } else if (Array.isArray(question.algorithm_tags)) {\n        this.questionForm.algorithm_tags = [...question.algorithm_tags]\n      } else {\n        this.questionForm.algorithm_tags = []\n      }\n    },\n    \n    // 重置查询\n    resetQuery() {\n      this.question = null\n      this.error = null\n      this.queryForm.id = ''\n      \n      if (this.$refs.queryFormRef) {\n        this.$refs.queryFormRef.resetFields()\n      }\n    },\n    \n    // 重置表单\n    resetForm() {\n      if (this.$refs.formRef) {\n        this.$refs.formRef.resetFields()\n      }\n      \n      // 重新填充原始数据\n      if (this.question) {\n        this.fillFormWithQuestion(this.question)\n      }\n    },\n    \n    // 提交表单\n    async submitForm() {\n      // 表单验证\n      try {\n        await this.$refs.formRef.validate()\n      } catch (error) {\n        return false\n      }\n      \n      this.loading = true\n      \n      try {\n        // 创建适合后端API的请求数据\n        const formData = {\n          id: this.questionForm.id,\n          name: this.questionForm.name,\n          ext_question_id: this.questionForm.ext_question_id,\n          oj_platform: this.questionForm.oj_platform,\n          difficulty: this.questionForm.difficulty,\n          content: this.questionForm.content,\n          // 确保算法标签是数组形式，与Postman测试保持一致\n          algorithm_tags: Array.isArray(this.questionForm.algorithm_tags) \n            ? [...this.questionForm.algorithm_tags] \n            : []\n        }\n        \n        // 可以添加url字段，如果后端需要\n        if (this.questionForm.oj_platform === 'leetcode') {\n          formData.url = `https://leetcode.cn/problems/${this.questionForm.ext_question_id}/`\n        } else if (this.questionForm.oj_platform === 'luogu') {\n          formData.url = `https://www.luogu.com.cn/problem/${this.questionForm.ext_question_id}`\n        }\n        \n        console.log('发送更新请求数据:', formData)\n        \n        // 调用更新API\n        await updateQuestion(formData.id, formData)\n        \n        // 显示成功消息\n        ElMessage({\n          message: '题目更新成功',\n          type: 'success'\n        })\n        \n        // 重新获取最新数据\n        this.fetchQuestion()\n      } catch (error) {\n        console.error('更新题目失败:', error)\n        ElMessage({\n          message: '更新题目失败: ' + (error.message || '未知错误'),\n          type: 'error'\n        })\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    // 删除已选标签\n    handleTagClose(tag) {\n      this.questionForm.algorithm_tags = this.questionForm.algorithm_tags.filter(t => t !== tag)\n    },\n    \n    // 获取标签名称（去掉前缀）\n    getTagName(tag) {\n      // LeetCode标签已经是纯名称\n      if (this.allTags.leetcode.some(t => t.value === tag)) {\n        return tag\n      }\n      \n      // 洛谷标签去掉前缀\n      const parts = tag.split('_')\n      if (parts.length > 1) {\n        return parts.slice(1).join('_')\n      }\n      return tag\n    },\n    \n    // 标签样式\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary'\n      \n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0]\n      return {\n        'Algorithm': 'primary',  // 算法 - 蓝色\n        'Source': 'success',     // 来源 - 绿色\n        'Time': 'warning',       // 时间 - 黄色\n        'Region': 'danger',      // 地区 - 红色\n        'Other': 'info'          // 其他 - 灰色\n      }[prefix] || 'info'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.question-update-view {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);\n  padding-top: 60px;\n}\n\n.page-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 30px;\n}\n\n.update-card {\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  border: none;\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(5px);\n}\n\n.card-header {\n  padding: 20px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.card-header h2 {\n  font-size: 1.5rem;\n  color: #2c3e50;\n  font-weight: 600;\n  margin: 0;\n}\n\n.id-query-section,\n.question-form-container {\n  padding: 25px;\n}\n\n.loading-container,\n.error-container {\n  padding: 40px;\n  text-align: center;\n}\n\n/* 表单样式优化 */\n.el-form {\n  max-width: 900px;\n  margin: 0 auto;\n}\n\n.el-form-item {\n  margin-bottom: 22px;\n}\n\n.el-form-item:last-child {\n  margin-bottom: 0;\n}\n\n.el-input,\n.el-select,\n.el-textarea {\n  border-radius: 8px;\n}\n\n.el-textarea__inner {\n  min-height: 300px;\n  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;\n  line-height: 1.6;\n}\n\n/* 分割线样式 */\n.el-divider__text {\n  font-size: 1rem;\n  color: #606266;\n  font-weight: 500;\n}\n\n/* 标签容器 */\n.tags-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 12px;\n  background: rgba(0, 0, 0, 0.02);\n  border-radius: 8px;\n  min-height: 48px;\n}\n\n.algorithm-tag {\n  transition: all 0.3s;\n  margin: 0;\n}\n\n.algorithm-tag:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 标签选择器 */\n.tag-select {\n  width: 100%;\n}\n\n/* 预览区域 */\n.preview-container {\n  padding: 20px;\n  border-radius: 8px;\n  background: #fff;\n  min-height: 300px;\n  max-height: 500px;\n  overflow-y: auto;\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n/* Markdown/HTML内容样式 */\n.markdown-content,\n.html-content {\n  line-height: 1.8;\n}\n\n.markdown-content :deep(h1),\n.markdown-content :deep(h2),\n.markdown-content :deep(h3),\n.html-content :deep(h1),\n.html-content :deep(h2),\n.html-content :deep(h3) {\n  margin-top: 1.5em;\n  margin-bottom: 0.8em;\n  color: #2c3e50;\n  font-weight: 600;\n}\n\n.markdown-content :deep(pre),\n.html-content :deep(pre) {\n  background-color: #f8f9fa;\n  padding: 16px;\n  border-radius: 8px;\n  overflow: auto;\n  border-left: 4px solid #409eff;\n}\n\n.markdown-content :deep(code),\n.html-content :deep(code) {\n  background-color: rgba(175, 184, 193, 0.2);\n  padding: 0.2em 0.4em;\n  border-radius: 4px;\n  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;\n  color: #476582;\n}\n\n.markdown-content :deep(blockquote),\n.html-content :deep(blockquote) {\n  border-left: 4px solid #dfe2e5;\n  color: #6a737d;\n  padding: 0 1em;\n  margin: 1em 0;\n  background: rgba(0, 0, 0, 0.02);\n  border-radius: 0 4px 4px 0;\n}\n\n.markdown-content :deep(table),\n.html-content :deep(table) {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 1.5em 0;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.markdown-content :deep(th),\n.html-content :deep(th) {\n  background-color: #f8f9fa;\n  font-weight: 600;\n}\n\n.markdown-content :deep(th),\n.markdown-content :deep(td),\n.html-content :deep(th),\n.html-content :deep(td) {\n  border: 1px solid #dfe2e5;\n  padding: 12px 16px;\n  text-align: left;\n}\n\n/* 按钮组样式 */\n.el-form-item:last-child {\n  margin-top: 30px;\n  text-align: center;\n}\n\n.el-form-item:last-child .el-button {\n  min-width: 120px;\n  height: 40px;\n  margin: 0 8px;\n}\n\n/* 响应式调整 */\n@media (max-width: 768px) {\n  .page-container {\n    padding: 15px;\n  }\n\n  .id-query-section,\n  .question-form-container {\n    padding: 15px;\n  }\n\n  .el-form-item:last-child .el-button {\n    width: 100%;\n    margin: 8px 0;\n  }\n\n  .el-col {\n    margin-bottom: 16px;\n  }\n}\n\n/* 动画效果 */\n.el-tag,\n.el-button {\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.1);\n}\n\n.el-tag:hover {\n  transform: translateY(-2px);\n}\n\n.el-button:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 标签页样式优化 */\n:deep(.el-tabs__nav-wrap) {\n  padding: 0 20px;\n  background: #f8f9fa;\n  border-radius: 8px 8px 0 0;\n}\n\n:deep(.el-tabs__item) {\n  padding: 0 24px;\n  height: 48px;\n  line-height: 48px;\n  font-weight: 500;\n}\n\n:deep(.el-tabs__content) {\n  padding: 0;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}