{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport AppHeader from '@/components/AppHeader.vue';\nimport { getQuestionDetail, deleteQuestion, restoreQuestion } from '@/api/question';\nimport MarkdownIt from 'markdown-it';\nimport DOMPurify from 'dompurify';\nimport { EditPen, Delete, Plus, RefreshRight } from '@element-plus/icons-vue';\nimport { ElMessage } from 'element-plus';\n\n/* global MathJax */\n\nexport default {\n  name: 'QuestionDetailView',\n  components: {\n    AppHeader,\n    EditPen,\n    Delete,\n    Plus,\n    RefreshRight\n  },\n  data() {\n    return {\n      questionId: this.$route.params.id,\n      question: null,\n      loading: true,\n      error: null,\n      mdi: new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true\n      }),\n      mathJaxLoaded: false,\n      // 删除和恢复相关状态\n      deleteDialogVisible: false,\n      restoreDialogVisible: false,\n      processing: false\n    };\n  },\n  computed: {\n    // 用于洛谷等平台 - Markdown 渲染\n    compiledMarkdown() {\n      if (!this.question || !this.question.content) return '';\n      try {\n        const content = String(this.question.content || '');\n        const html = this.mdi.render(content);\n        return DOMPurify.sanitize(html);\n      } catch (e) {\n        console.error('Markdown处理错误:', e);\n        return '内容解析出错';\n      }\n    },\n    // 用于LeetCode平台 - HTML直接渲染\n    compiledHtml() {\n      if (!this.question || !this.question.content) return '';\n      try {\n        let content = String(this.question.content || '');\n\n        // 检查是否需要HTML包装\n        if (!content.trim().startsWith('<')) {\n          // 如果内容不是以HTML标签开始，则添加基本HTML包装\n          content = `<div>${content}</div>`;\n        }\n\n        // 处理LeetCode特有的代码块格式\n        content = this.processLeetcodeHtml(content);\n\n        // 添加示例块样式处理\n        content = this.wrapExamples(content);\n\n        // 清洗HTML以确保安全\n        return DOMPurify.sanitize(content, {\n          USE_PROFILES: {\n            html: true\n          },\n          ALLOWED_TAGS: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'br', 'hr', 'ol', 'ul', 'li', 'pre', 'code', 'blockquote', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'strong', 'em', 'b', 'i', 'u', 'strike', 's', 'a', 'img', 'span', 'div', 'section', 'article', 'meta'],\n          ALLOWED_ATTR: ['href', 'name', 'target', 'src', 'alt', 'class', 'id', 'width', 'height', 'style', 'charset', 'content']\n        });\n      } catch (e) {\n        console.error('HTML处理错误:', e);\n        return '内容解析出错';\n      }\n    }\n  },\n  watch: {\n    // 当内容变化时更新MathJax渲染\n    question: {\n      handler() {\n        this.$nextTick(() => this.renderMathJax());\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.fetchQuestionDetail();\n    this.initMathJax();\n  },\n  methods: {\n    // 编辑按钮处理\n    handleEdit() {\n      if (!this.question || this.question.is_deleted) return;\n      // 跳转到更新题目页面\n      this.$router.push(`/questions/update/${this.question.id}`);\n    },\n    // 删除按钮处理\n    handleDelete() {\n      if (!this.question || this.question.is_deleted) return;\n      this.deleteDialogVisible = true;\n    },\n    // 恢复按钮处理\n    handleRestore() {\n      if (!this.question || !this.question.is_deleted) return;\n      this.restoreDialogVisible = true;\n    },\n    // 确认删除\n    async confirmDelete() {\n      if (!this.question) return;\n      this.processing = true;\n      try {\n        await deleteQuestion({\n          id: this.question.id\n        });\n        ElMessage({\n          type: 'success',\n          message: '题目删除成功'\n        });\n\n        // 关闭对话框\n        this.deleteDialogVisible = false;\n\n        // 刷新数据\n        this.fetchQuestionDetail();\n      } catch (error) {\n        console.error('删除题目失败:', error);\n        ElMessage({\n          type: 'error',\n          message: '删除题目失败: ' + (error.message || '未知错误')\n        });\n      } finally {\n        this.processing = false;\n      }\n    },\n    // 确认恢复\n    async confirmRestore() {\n      if (!this.question) return;\n      this.processing = true;\n      try {\n        await restoreQuestion({\n          id: this.question.id\n        });\n        ElMessage({\n          type: 'success',\n          message: '题目恢复成功'\n        });\n\n        // 关闭对话框\n        this.restoreDialogVisible = false;\n\n        // 刷新数据\n        this.fetchQuestionDetail();\n      } catch (error) {\n        console.error('恢复题目失败:', error);\n        ElMessage({\n          type: 'error',\n          message: '恢复题目失败: ' + (error.message || '未知错误')\n        });\n      } finally {\n        this.processing = false;\n      }\n    },\n    // 创建题解按钮处理\n    handleCreateSolution() {\n      if (!this.question || this.question.is_deleted) return;\n      // 跳转到创建题解页面，传递题目ID\n      this.$router.push(`/create/solution?question_id=${this.question.id}`);\n    },\n    // 处理LeetCode HTML内容\n    processLeetcodeHtml(content) {\n      try {\n        // 检查内容类型\n        if (content.includes('\\\\n') || content.includes('&lt;') || content.includes('&gt;')) {\n          // 这是LeetCode转义后的文本，需要先转换\n          content = this.convertLeetcodeEscapedContent(content);\n        }\n\n        // 创建临时DOM元素来处理HTML\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = content;\n\n        // 确保所有代码块都有正确的样式\n        const preTags = tempDiv.querySelectorAll('pre');\n        preTags.forEach(preTag => {\n          // 添加类名以确保正确样式\n          preTag.classList.add('leetcode-code-block');\n\n          // 处理内部的code标签\n          const codeTag = preTag.querySelector('code');\n          if (codeTag) {\n            // 如果没有语言类，添加一个默认类\n            if (!codeTag.className.includes('language-')) {\n              codeTag.classList.add('language-plain');\n            }\n          }\n        });\n\n        // 确保在表格外添加包装以提高可滚动性\n        const tables = tempDiv.querySelectorAll('table');\n        tables.forEach(table => {\n          const wrapper = document.createElement('div');\n          wrapper.className = 'table-responsive';\n          table.parentNode.insertBefore(wrapper, table);\n          wrapper.appendChild(table);\n        });\n\n        // 处理示例中的加粗内容\n        const boldPatterns = tempDiv.querySelectorAll('*:not(strong):not(b)');\n        boldPatterns.forEach(el => {\n          const text = el.innerHTML;\n          if (text && typeof text === 'string') {\n            // 查找并替换 **文本** 格式为 <strong>文本</strong>\n            if (text.includes('**')) {\n              el.innerHTML = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n            }\n          }\n        });\n\n        // 为LeetCode内容添加meta标签，指示渲染模式\n        const metaTag = document.createElement('meta');\n        metaTag.setAttribute('name', 'rendering-mode');\n        metaTag.setAttribute('content', 'leetcode-html');\n        tempDiv.insertBefore(metaTag, tempDiv.firstChild);\n        return tempDiv.innerHTML;\n      } catch (error) {\n        console.error('处理LeetCode HTML时出错:', error);\n        return content; // 出错时返回原始内容\n      }\n    },\n    // 转换LeetCode转义的内容为格式化HTML\n    convertLeetcodeEscapedContent(content) {\n      // 处理转义字符\n      content = content.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&nbsp;/g, ' ').replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\");\n\n      // 处理换行符 \\n 转为实际的HTML换行\n      content = content.replace(/\\\\n/g, '<br>');\n\n      // 处理制表符\n      content = content.replace(/\\\\t/g, '&emsp;&emsp;');\n\n      // 如果有空行，添加段落标签以保持间距\n      content = content.replace(/(<br>){2,}/g, '</p><p>') // 多个连续换行符转为段落\n      .replace(/<br>/g, '<br>\\n'); // 单个换行符后添加实际换行符以改善源码可读性\n\n      // 处理示例部分的格式\n      content = content.replace(/示例 (\\d+):/g, '<h3>示例 $1</h3>').replace(/输入: /g, '<strong>输入</strong>: ').replace(/输出: /g, '<strong>输出</strong>: ').replace(/解释: /g, '<strong>解释</strong>: ');\n\n      // 处理提示/注意部分\n      content = content.replace(/提示:|注意:/g, '<h3>$&</h3>');\n\n      // 确保内容被包裹在段落标签中\n      if (!content.startsWith('<') || !['<p', '<div', '<h'].includes(content.substring(0, 2))) {\n        content = '<p>' + content + '</p>';\n      }\n      return content;\n    },\n    // 包装示例部分为特殊的样式块\n    wrapExamples(content) {\n      try {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = content;\n\n        // 查找所有示例标题\n        const exampleHeadings = tempDiv.querySelectorAll('h3');\n        exampleHeadings.forEach(heading => {\n          if (heading.textContent.includes('示例')) {\n            // 找到包含此示例的所有内容\n            let exampleContent = [];\n            let currentNode = heading.nextElementSibling;\n\n            // 收集直到下一个标题或某个终止条件的所有内容\n            while (currentNode && currentNode.tagName !== 'H3' && !currentNode.textContent.includes('提示') && !currentNode.textContent.includes('注意')) {\n              exampleContent.push(currentNode.cloneNode(true));\n              currentNode = currentNode.nextElementSibling;\n            }\n\n            // 创建示例块容器\n            const exampleBlock = document.createElement('div');\n            exampleBlock.className = 'example-block';\n\n            // 添加标题和内容\n            exampleBlock.appendChild(heading.cloneNode(true));\n            exampleContent.forEach(node => {\n              exampleBlock.appendChild(node);\n            });\n\n            // 替换原始内容\n            heading.parentNode.insertBefore(exampleBlock, heading);\n\n            // 移除原始元素\n            heading.remove();\n            exampleContent.forEach(node => {\n              const originalNode = tempDiv.querySelector(`*:nth-child(${Array.from(tempDiv.children).indexOf(node) + 1})`);\n              if (originalNode) {\n                originalNode.remove();\n              }\n            });\n          }\n        });\n        return tempDiv.innerHTML;\n      } catch (error) {\n        console.error('包装示例部分时出错:', error);\n        return content; // 出错时返回原始内容\n      }\n    },\n    renderMathJax() {\n      if (typeof MathJax !== 'undefined' && MathJax.typesetPromise && this.mathJaxLoaded) {\n        MathJax.typesetPromise();\n      }\n    },\n    initMathJax() {\n      if (this.mathJaxLoaded || typeof MathJax !== 'undefined') {\n        this.mathJaxLoaded = true;\n        return;\n      }\n\n      // 配置MathJax\n      window.MathJax = {\n        tex: {\n          inlineMath: [['$', '$'], ['\\\\(', '\\\\)']],\n          displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],\n          processEscapes: true\n        },\n        options: {\n          skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']\n        },\n        startup: {\n          ready: () => {\n            MathJax.startup.defaultReady();\n            this.mathJaxLoaded = true;\n            this.$nextTick(() => this.renderMathJax());\n          }\n        }\n      };\n\n      // 加载MathJax脚本\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js';\n      script.async = true;\n      script.onload = () => {\n        this.mathJaxLoaded = true;\n      };\n      document.head.appendChild(script);\n    },\n    async fetchQuestionDetail() {\n      this.loading = true;\n      this.error = null;\n      try {\n        const response = await getQuestionDetail(this.questionId);\n        this.question = response.data;\n\n        // 确保算法标签是数组\n        if (typeof this.question.algorithm_tags === 'string') {\n          this.question.algorithm_tags = this.question.algorithm_tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n        }\n      } catch (error) {\n        console.error('获取题目详情失败:', error);\n        this.error = '获取题目详情失败: ' + (error.message || '未知错误');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 平台相关方法\n    getPlatformName(platform) {\n      const platforms = {\n        'luogu': '洛谷',\n        'leetcode': 'LeetCode'\n        // 可以添加更多平台\n      };\n      return platforms[platform] || platform;\n    },\n    // 平台标签样式\n    getPlatformTagType(platform) {\n      return {\n        luogu: 'success',\n        leetcode: 'warning'\n      }[platform] || 'info';\n    },\n    // 日期格式化\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    // 难度标签样式\n    getDifficultyTagType(row) {\n      if (row.oj_platform === 'luogu') {\n        const levelMap = {\n          '入门': 'info',\n          '普及-': 'success',\n          '普及/提高-': 'success',\n          '普及+/提高': 'warning',\n          '提高+/省选-': 'danger',\n          '省选/NOI-': 'danger',\n          'NOI/NOI+': 'danger',\n          'CTSC': 'danger'\n        };\n        return levelMap[row.difficulty] || 'info';\n      }\n\n      // LeetCode难度\n      return {\n        '简单': 'success',\n        '中等': 'warning',\n        '困难': 'danger'\n      }[row.difficulty] || 'info';\n    },\n    // 标签样式\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary';\n\n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0];\n      return {\n        'Algorithm': 'primary',\n        // 算法 - 蓝色\n        'Source': 'success',\n        // 来源 - 绿色\n        'Time': 'warning',\n        // 时间 - 黄色\n        'Region': 'danger',\n        // 地区 - 红色\n        'Other': 'info' // 其他 - 灰色\n      }[prefix] || 'info';\n    },\n    // 获取标签名称\n    getTagName(tag) {\n      // 洛谷标签去掉前缀\n      const parts = tag.split('_');\n      if (parts.length > 1) {\n        return parts.slice(1).join('_');\n      }\n      return tag;\n    },\n    // 生成题目链接\n    generateOjLink(row) {\n      const baseUrls = {\n        luogu: `https://www.luogu.com.cn/problem/${row.ext_question_id}`,\n        leetcode: `https://leetcode.cn/problems/${row.ext_question_id}/`\n      };\n      return baseUrls[row.oj_platform] || '#';\n    }\n  }\n};","map":{"version":3,"names":["AppHeader","getQuestionDetail","deleteQuestion","restoreQuestion","MarkdownIt","DOMPurify","EditPen","Delete","Plus","RefreshRight","ElMessage","name","components","data","questionId","$route","params","id","question","loading","error","mdi","html","linkify","typographer","mathJaxLoaded","deleteDialogVisible","restoreDialogVisible","processing","computed","compiledMarkdown","content","String","render","sanitize","e","console","compiledHtml","trim","startsWith","processLeetcodeHtml","wrapExamples","USE_PROFILES","ALLOWED_TAGS","ALLOWED_ATTR","watch","handler","$nextTick","renderMathJax","deep","mounted","fetchQuestionDetail","initMathJax","methods","handleEdit","is_deleted","$router","push","handleDelete","handleRestore","confirmDelete","type","message","confirmRestore","handleCreateSolution","includes","convertLeetcodeEscapedContent","tempDiv","document","createElement","innerHTML","preTags","querySelectorAll","forEach","preTag","classList","add","codeTag","querySelector","className","tables","table","wrapper","parentNode","insertBefore","appendChild","boldPatterns","el","text","replace","metaTag","setAttribute","firstChild","substring","exampleHeadings","heading","textContent","exampleContent","currentNode","nextElementSibling","tagName","cloneNode","exampleBlock","node","remove","originalNode","Array","from","children","indexOf","MathJax","typesetPromise","window","tex","inlineMath","displayMath","processEscapes","options","skipHtmlTags","startup","ready","defaultReady","script","src","async","onload","head","response","algorithm_tags","split","map","tag","filter","length","getPlatformName","platform","platforms","getPlatformTagType","luogu","leetcode","formatDate","dateString","date","Date","toLocaleString","year","month","day","hour","minute","getDifficultyTagType","row","oj_platform","levelMap","difficulty","getTagType","prefix","getTagName","parts","slice","join","generateOjLink","baseUrls","ext_question_id"],"sources":["/var/www/AlgorithmWeb/algorithmFrontend/src/views/QuestionDetailView.vue"],"sourcesContent":["<template>\n  <div class=\"question-detail-view\">\n    <AppHeader />\n    <main class=\"page-container\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      \n      <div v-else-if=\"error\" class=\"error-container\">\n        <el-alert\n          :title=\"error\"\n          type=\"error\"\n          :closable=\"false\"\n        />\n      </div>\n      \n      <div v-else class=\"question-content\">\n        <div class=\"left-section\">\n          <el-card class=\"question-description-card\">\n            <!-- 根据平台选择不同的渲染方式 -->\n            <div v-if=\"question.oj_platform === 'leetcode'\" v-html=\"compiledHtml\" class=\"html-content\"></div>\n            <div v-else v-html=\"compiledMarkdown\" class=\"markdown-content\"></div>\n          </el-card>\n        </div>\n        \n        <div class=\"right-section\">\n          <el-card class=\"question-info-card\">\n            <h2>{{ question.name }}</h2>\n            <div class=\"info-meta\">\n              <div>题目ID: {{ question.id }}</div>\n              <div>外部ID: {{ question.ext_question_id }}</div>\n              <div>\n                平台: \n                <el-tag :type=\"getPlatformTagType(question.oj_platform)\" size=\"small\">\n                  {{ getPlatformName(question.oj_platform) }}\n                </el-tag>\n              </div>\n              <div>创建时间: {{ formatDate(question.created_at) }}</div>\n              <div v-if=\"question.is_deleted\" class=\"deleted-status\">\n                <el-tag type=\"danger\" effect=\"dark\">已删除</el-tag>\n              </div>\n            </div>\n            \n            <div class=\"action-buttons\">\n              <el-button type=\"primary\" size=\"small\" @click=\"handleEdit\" :disabled=\"question.is_deleted\">\n                <el-icon><EditPen /></el-icon>\n                编辑\n              </el-button>\n              \n              <!-- 根据is_deleted显示不同的按钮 -->\n              <el-button \n                v-if=\"!question.is_deleted\" \n                type=\"danger\" \n                size=\"small\" \n                @click=\"handleDelete\"\n              >\n                <el-icon><Delete /></el-icon>\n                删除\n              </el-button>\n              \n              <el-button \n                v-else \n                type=\"success\" \n                size=\"small\" \n                @click=\"handleRestore\"\n              >\n                <el-icon><RefreshRight /></el-icon>\n                恢复\n              </el-button>\n              \n              <el-button \n                type=\"success\" \n                size=\"small\" \n                @click=\"handleCreateSolution\" \n                :disabled=\"question.is_deleted\"\n              >\n                <el-icon><Plus /></el-icon>\n                创建题解\n              </el-button>\n            </div>\n          </el-card>\n          \n          <el-card class=\"question-tags-card\">\n            <div class=\"difficulty-section\">\n              <h3>难度级别</h3>\n              <el-tag \n                :type=\"getDifficultyTagType(question)\"\n                effect=\"dark\"\n              >\n                {{ question.difficulty }}\n              </el-tag>\n            </div>\n            \n            <div class=\"tags-section\">\n              <h3>算法标签</h3>\n              <div class=\"tags-container\">\n                <el-tag \n                  v-for=\"tag in question.algorithm_tags\" \n                  :key=\"tag\"\n                  :type=\"getTagType(tag, question.oj_platform)\"\n                  class=\"algorithm-tag\"\n                >\n                  {{ getTagName(tag) }}\n                </el-tag>\n              </div>\n            </div>\n          </el-card>\n          \n          <!-- 可以添加更多卡片，如相关题目等 -->\n          <el-card class=\"related-questions-card\" v-if=\"false\">\n            <h3>相关题目</h3>\n            <div class=\"related-questions-list\">\n              <!-- 相关题目列表，暂不实现 -->\n            </div>\n          </el-card>\n        </div>\n      </div>\n    </main>\n\n    <!-- 删除确认对话框 -->\n    <el-dialog\n      v-model=\"deleteDialogVisible\"\n      title=\"确认删除\"\n      width=\"30%\"\n    >\n      <span>确定要删除题目 \"{{ question ? question.name : '' }}\" 吗？此操作不可逆。</span>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\n          <el-button type=\"danger\" @click=\"confirmDelete\" :loading=\"processing\">确认删除</el-button>\n        </span>\n      </template>\n    </el-dialog>\n    \n    <!-- 恢复确认对话框 -->\n    <el-dialog\n      v-model=\"restoreDialogVisible\"\n      title=\"确认恢复\"\n      width=\"30%\"\n    >\n      <span>确定要恢复题目 \"{{ question ? question.name : '' }}\" 吗？</span>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"restoreDialogVisible = false\">取消</el-button>\n          <el-button type=\"success\" @click=\"confirmRestore\" :loading=\"processing\">确认恢复</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport AppHeader from '@/components/AppHeader.vue'\nimport { getQuestionDetail, deleteQuestion, restoreQuestion } from '@/api/question'\nimport MarkdownIt from 'markdown-it'\nimport DOMPurify from 'dompurify'\nimport { EditPen, Delete, Plus, RefreshRight } from '@element-plus/icons-vue'\nimport { ElMessage } from 'element-plus'\n\n/* global MathJax */\n\nexport default {\n  name: 'QuestionDetailView',\n  components: {\n    AppHeader,\n    EditPen,\n    Delete,\n    Plus,\n    RefreshRight\n  },\n  data() {\n    return {\n      questionId: this.$route.params.id,\n      question: null,\n      loading: true,\n      error: null,\n      mdi: new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true\n      }),\n      mathJaxLoaded: false,\n      \n      // 删除和恢复相关状态\n      deleteDialogVisible: false,\n      restoreDialogVisible: false,\n      processing: false\n    }\n  },\n  computed: {\n    // 用于洛谷等平台 - Markdown 渲染\n    compiledMarkdown() {\n      if (!this.question || !this.question.content) return ''\n      \n      try {\n        const content = String(this.question.content || '')\n        const html = this.mdi.render(content)\n        return DOMPurify.sanitize(html)\n      } catch (e) {\n        console.error('Markdown处理错误:', e)\n        return '内容解析出错'\n      }\n    },\n    \n    // 用于LeetCode平台 - HTML直接渲染\n    compiledHtml() {\n      if (!this.question || !this.question.content) return ''\n      \n      try {\n        let content = String(this.question.content || '')\n        \n        // 检查是否需要HTML包装\n        if (!content.trim().startsWith('<')) {\n          // 如果内容不是以HTML标签开始，则添加基本HTML包装\n          content = `<div>${content}</div>`\n        }\n        \n        // 处理LeetCode特有的代码块格式\n        content = this.processLeetcodeHtml(content)\n        \n        // 添加示例块样式处理\n        content = this.wrapExamples(content)\n        \n        // 清洗HTML以确保安全\n        return DOMPurify.sanitize(content, {\n          USE_PROFILES: { html: true },\n          ALLOWED_TAGS: [\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'br', 'hr',\n            'ol', 'ul', 'li', 'pre', 'code', 'blockquote',\n            'table', 'thead', 'tbody', 'tr', 'th', 'td',\n            'strong', 'em', 'b', 'i', 'u', 'strike', 's',\n            'a', 'img', 'span', 'div', 'section', 'article',\n            'meta'\n          ],\n          ALLOWED_ATTR: [\n            'href', 'name', 'target', 'src', 'alt', 'class', 'id',\n            'width', 'height', 'style', 'charset', 'content'\n          ]\n        })\n      } catch (e) {\n        console.error('HTML处理错误:', e)\n        return '内容解析出错'\n      }\n    }\n  },\n  watch: {\n    // 当内容变化时更新MathJax渲染\n    question: {\n      handler() {\n        this.$nextTick(() => this.renderMathJax())\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.fetchQuestionDetail()\n    this.initMathJax()\n  },\n  methods: {\n    // 编辑按钮处理\n    handleEdit() {\n      if (!this.question || this.question.is_deleted) return\n      // 跳转到更新题目页面\n      this.$router.push(`/questions/update/${this.question.id}`)\n    },\n    \n    // 删除按钮处理\n    handleDelete() {\n      if (!this.question || this.question.is_deleted) return\n      this.deleteDialogVisible = true\n    },\n    \n    // 恢复按钮处理\n    handleRestore() {\n      if (!this.question || !this.question.is_deleted) return\n      this.restoreDialogVisible = true\n    },\n    \n    // 确认删除\n    async confirmDelete() {\n      if (!this.question) return\n      \n      this.processing = true\n      try {\n        await deleteQuestion({ id: this.question.id })\n        \n        ElMessage({\n          type: 'success',\n          message: '题目删除成功'\n        })\n        \n        // 关闭对话框\n        this.deleteDialogVisible = false\n        \n        // 刷新数据\n        this.fetchQuestionDetail()\n      } catch (error) {\n        console.error('删除题目失败:', error)\n        ElMessage({\n          type: 'error',\n          message: '删除题目失败: ' + (error.message || '未知错误')\n        })\n      } finally {\n        this.processing = false\n      }\n    },\n    \n    // 确认恢复\n    async confirmRestore() {\n      if (!this.question) return\n      \n      this.processing = true\n      try {\n        await restoreQuestion({ id: this.question.id })\n        \n        ElMessage({\n          type: 'success',\n          message: '题目恢复成功'\n        })\n        \n        // 关闭对话框\n        this.restoreDialogVisible = false\n        \n        // 刷新数据\n        this.fetchQuestionDetail()\n      } catch (error) {\n        console.error('恢复题目失败:', error)\n        ElMessage({\n          type: 'error',\n          message: '恢复题目失败: ' + (error.message || '未知错误')\n        })\n      } finally {\n        this.processing = false\n      }\n    },\n    \n    // 创建题解按钮处理\n    handleCreateSolution() {\n      if (!this.question || this.question.is_deleted) return\n      // 跳转到创建题解页面，传递题目ID\n      this.$router.push(`/create/solution?question_id=${this.question.id}`)\n    },\n    \n    // 处理LeetCode HTML内容\n    processLeetcodeHtml(content) {\n      try {\n        // 检查内容类型\n        if (content.includes('\\\\n') || content.includes('&lt;') || content.includes('&gt;')) {\n          // 这是LeetCode转义后的文本，需要先转换\n          content = this.convertLeetcodeEscapedContent(content)\n        }\n        \n        // 创建临时DOM元素来处理HTML\n        const tempDiv = document.createElement('div')\n        tempDiv.innerHTML = content\n        \n        // 确保所有代码块都有正确的样式\n        const preTags = tempDiv.querySelectorAll('pre')\n        preTags.forEach(preTag => {\n          // 添加类名以确保正确样式\n          preTag.classList.add('leetcode-code-block')\n          \n          // 处理内部的code标签\n          const codeTag = preTag.querySelector('code')\n          if (codeTag) {\n            // 如果没有语言类，添加一个默认类\n            if (!codeTag.className.includes('language-')) {\n              codeTag.classList.add('language-plain')\n            }\n          }\n        })\n        \n        // 确保在表格外添加包装以提高可滚动性\n        const tables = tempDiv.querySelectorAll('table')\n        tables.forEach(table => {\n          const wrapper = document.createElement('div')\n          wrapper.className = 'table-responsive'\n          table.parentNode.insertBefore(wrapper, table)\n          wrapper.appendChild(table)\n        })\n        \n        // 处理示例中的加粗内容\n        const boldPatterns = tempDiv.querySelectorAll('*:not(strong):not(b)')\n        boldPatterns.forEach(el => {\n          const text = el.innerHTML\n          if (text && typeof text === 'string') {\n            // 查找并替换 **文本** 格式为 <strong>文本</strong>\n            if (text.includes('**')) {\n              el.innerHTML = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            }\n          }\n        })\n        \n        // 为LeetCode内容添加meta标签，指示渲染模式\n        const metaTag = document.createElement('meta')\n        metaTag.setAttribute('name', 'rendering-mode')\n        metaTag.setAttribute('content', 'leetcode-html')\n        tempDiv.insertBefore(metaTag, tempDiv.firstChild)\n        \n        return tempDiv.innerHTML\n      } catch (error) {\n        console.error('处理LeetCode HTML时出错:', error)\n        return content // 出错时返回原始内容\n      }\n    },\n    \n    // 转换LeetCode转义的内容为格式化HTML\n    convertLeetcodeEscapedContent(content) {\n      // 处理转义字符\n      content = content\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/&nbsp;/g, ' ')\n        .replace(/&amp;/g, '&')\n        .replace(/&quot;/g, '\"')\n        .replace(/&#39;/g, \"'\")\n      \n      // 处理换行符 \\n 转为实际的HTML换行\n      content = content.replace(/\\\\n/g, '<br>')\n      \n      // 处理制表符\n      content = content.replace(/\\\\t/g, '&emsp;&emsp;')\n      \n      // 如果有空行，添加段落标签以保持间距\n      content = content\n        .replace(/(<br>){2,}/g, '</p><p>')  // 多个连续换行符转为段落\n        .replace(/<br>/g, '<br>\\n')  // 单个换行符后添加实际换行符以改善源码可读性\n      \n      // 处理示例部分的格式\n      content = content\n        .replace(/示例 (\\d+):/g, '<h3>示例 $1</h3>')\n        .replace(/输入: /g, '<strong>输入</strong>: ')\n        .replace(/输出: /g, '<strong>输出</strong>: ')\n        .replace(/解释: /g, '<strong>解释</strong>: ')\n      \n      // 处理提示/注意部分\n      content = content.replace(/提示:|注意:/g, '<h3>$&</h3>')\n      \n      // 确保内容被包裹在段落标签中\n      if (!content.startsWith('<') || !['<p', '<div', '<h'].includes(content.substring(0, 2))) {\n        content = '<p>' + content + '</p>'\n      }\n      \n      return content\n    },\n    \n    // 包装示例部分为特殊的样式块\n    wrapExamples(content) {\n      try {\n        const tempDiv = document.createElement('div')\n        tempDiv.innerHTML = content\n        \n        // 查找所有示例标题\n        const exampleHeadings = tempDiv.querySelectorAll('h3')\n        exampleHeadings.forEach(heading => {\n          if (heading.textContent.includes('示例')) {\n            // 找到包含此示例的所有内容\n            let exampleContent = []\n            let currentNode = heading.nextElementSibling\n            \n            // 收集直到下一个标题或某个终止条件的所有内容\n            while (currentNode && \n                  (currentNode.tagName !== 'H3' && \n                   !currentNode.textContent.includes('提示') && \n                   !currentNode.textContent.includes('注意'))) {\n              exampleContent.push(currentNode.cloneNode(true))\n              currentNode = currentNode.nextElementSibling\n            }\n            \n            // 创建示例块容器\n            const exampleBlock = document.createElement('div')\n            exampleBlock.className = 'example-block'\n            \n            // 添加标题和内容\n            exampleBlock.appendChild(heading.cloneNode(true))\n            exampleContent.forEach(node => {\n              exampleBlock.appendChild(node)\n            })\n            \n            // 替换原始内容\n            heading.parentNode.insertBefore(exampleBlock, heading)\n            \n            // 移除原始元素\n            heading.remove()\n            exampleContent.forEach(node => {\n              const originalNode = tempDiv.querySelector(`*:nth-child(${Array.from(tempDiv.children).indexOf(node) + 1})`)\n              if (originalNode) {\n                originalNode.remove()\n              }\n            })\n          }\n        })\n        \n        return tempDiv.innerHTML\n      } catch (error) {\n        console.error('包装示例部分时出错:', error)\n        return content // 出错时返回原始内容\n      }\n    },\n    \n    renderMathJax() {\n      if (typeof MathJax !== 'undefined' && MathJax.typesetPromise && this.mathJaxLoaded) {\n        MathJax.typesetPromise()\n      }\n    },\n    \n    initMathJax() {\n      if (this.mathJaxLoaded || typeof MathJax !== 'undefined') {\n        this.mathJaxLoaded = true\n        return\n      }\n\n      // 配置MathJax\n      window.MathJax = {\n        tex: {\n          inlineMath: [['$', '$'], ['\\\\(', '\\\\)']],\n          displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],\n          processEscapes: true\n        },\n        options: {\n          skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']\n        },\n        startup: {\n          ready: () => {\n            MathJax.startup.defaultReady()\n            this.mathJaxLoaded = true\n            this.$nextTick(() => this.renderMathJax())\n          }\n        }\n      }\n\n      // 加载MathJax脚本\n      const script = document.createElement('script')\n      script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js'\n      script.async = true\n      script.onload = () => {\n        this.mathJaxLoaded = true\n      }\n      document.head.appendChild(script)\n    },\n    \n    async fetchQuestionDetail() {\n      this.loading = true\n      this.error = null\n      \n      try {\n        const response = await getQuestionDetail(this.questionId)\n        this.question = response.data\n        \n        // 确保算法标签是数组\n        if (typeof this.question.algorithm_tags === 'string') {\n          this.question.algorithm_tags = this.question.algorithm_tags\n            .split(',')\n            .map(tag => tag.trim())\n            .filter(tag => tag.length > 0)\n        }\n      } catch (error) {\n        console.error('获取题目详情失败:', error)\n        this.error = '获取题目详情失败: ' + (error.message || '未知错误')\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    // 平台相关方法\n    getPlatformName(platform) {\n      const platforms = {\n        'luogu': '洛谷',\n        'leetcode': 'LeetCode',\n        // 可以添加更多平台\n      }\n      return platforms[platform] || platform\n    },\n    \n    // 平台标签样式\n    getPlatformTagType(platform) {\n      return {\n        luogu: 'success',\n        leetcode: 'warning'\n      }[platform] || 'info'\n    },\n    \n    // 日期格式化\n    formatDate(dateString) {\n      if (!dateString) return ''\n      \n      const date = new Date(dateString)\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    },\n    \n    // 难度标签样式\n    getDifficultyTagType(row) {\n      if (row.oj_platform === 'luogu') {\n        const levelMap = {\n          '入门': 'info',\n          '普及-': 'success',\n          '普及/提高-': 'success',\n          '普及+/提高': 'warning',\n          '提高+/省选-': 'danger',\n          '省选/NOI-': 'danger',\n          'NOI/NOI+': 'danger',\n          'CTSC': 'danger'\n        }\n        return levelMap[row.difficulty] || 'info'\n      }\n      \n      // LeetCode难度\n      return {\n        '简单': 'success',\n        '中等': 'warning',\n        '困难': 'danger'\n      }[row.difficulty] || 'info'\n    },\n    \n    // 标签样式\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary'\n      \n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0]\n      return {\n        'Algorithm': 'primary',  // 算法 - 蓝色\n        'Source': 'success',     // 来源 - 绿色\n        'Time': 'warning',       // 时间 - 黄色\n        'Region': 'danger',      // 地区 - 红色\n        'Other': 'info'          // 其他 - 灰色\n      }[prefix] || 'info'\n    },\n    \n    // 获取标签名称\n    getTagName(tag) {\n      // 洛谷标签去掉前缀\n      const parts = tag.split('_')\n      if (parts.length > 1) {\n        return parts.slice(1).join('_')\n      }\n      return tag\n    },\n    \n    // 生成题目链接\n    generateOjLink(row) {\n      const baseUrls = {\n        luogu: `https://www.luogu.com.cn/problem/${row.ext_question_id}`,\n        leetcode: `https://leetcode.cn/problems/${row.ext_question_id}/`\n      }\n      return baseUrls[row.oj_platform] || '#'\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 基础布局优化 */\n.question-detail-view {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n}\n\n.page-container {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n/* 加载状态优化 */\n.loading-container {\n  padding: 3rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n}\n\n/* 错误状态优化 */\n.error-container {\n  padding: 2rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n}\n\n/* 主内容区网格布局 */\n.question-content {\n  display: grid;\n  grid-template-columns: minmax(0, 1fr) 340px;\n  gap: 2rem;\n  align-items: start;\n}\n\n/* 左侧题目内容区 */\n.left-section {\n  position: sticky;\n  top: 1rem;\n}\n\n/* 右侧信息卡片区 */\n.right-section {\n  display: grid;\n  gap: 1.5rem;\n  position: sticky;\n  top: 1rem;\n  align-self: start;\n}\n\n/* 卡片通用样式 */\n.el-card {\n  border-radius: 12px;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  transition: all 0.3s ease;\n  margin-bottom: 1.5rem;\n}\n\n.el-card:hover {\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);\n  transform: translateY(-2px);\n}\n\n/* 题目描述卡片 */\n.question-description-card {\n  padding: 2rem;\n  background: white;\n}\n\n/* 题目信息卡片 */\n.question-info-card {\n  padding: 1.5rem;\n}\n\n.question-info-card h2 {\n  font-size: 1.4rem;\n  color: #2d3748;\n  margin-bottom: 1rem;\n  font-weight: 600;\n  line-height: 1.3;\n}\n\n.info-meta {\n  display: grid;\n  gap: 0.8rem;\n  color: #4a5568;\n  font-size: 0.95rem;\n  margin: 1.5rem 0;\n}\n\n.info-meta div {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n/* 标签卡片 */\n.question-tags-card {\n  padding: 1.5rem;\n}\n\n.difficulty-section,\n.tags-section {\n  margin-bottom: 1.5rem;\n}\n\n.difficulty-section h3,\n.tags-section h3 {\n  font-size: 1.1rem;\n  color: #2d3748;\n  margin-bottom: 0.8rem;\n  font-weight: 500;\n}\n\n/* 操作按钮组 */\n.action-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.8rem;\n  margin-top: 1.5rem;\n}\n\n.action-buttons .el-button {\n  flex: 1 0 auto;\n  min-width: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.3s ease;\n}\n\n/* 标签容器 */\n.tags-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.6rem;\n}\n\n.algorithm-tag {\n  transition: all 0.3s ease;\n  margin: 0;\n}\n\n.algorithm-tag:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 内容渲染样式优化 */\n.markdown-content,\n.html-content {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  color: #2d3748;\n  line-height: 1.7;\n  font-size: 1rem;\n}\n\n/* 标题样式 */\n.markdown-content :deep(h1),\n.markdown-content :deep(h2),\n.markdown-content :deep(h3),\n.html-content :deep(h1),\n.html-content :deep(h2),\n.html-content :deep(h3) {\n  color: #1a202c;\n  font-weight: 600;\n  margin: 1.8rem 0 1rem;\n  scroll-margin-top: 80px; /* 为锚点跳转留出空间 */\n}\n\n.markdown-content :deep(h1),\n.html-content :deep(h1) {\n  font-size: 1.8rem;\n  border-bottom: 1px solid #e2e8f0;\n  padding-bottom: 0.5rem;\n}\n\n.markdown-content :deep(h2),\n.html-content :deep(h2) {\n  font-size: 1.5rem;\n}\n\n.markdown-content :deep(h3),\n.html-content :deep(h3) {\n  font-size: 1.2rem;\n}\n\n/* 段落样式 */\n.markdown-content :deep(p),\n.html-content :deep(p) {\n  margin: 1.2rem 0;\n  color: #4a5568;\n}\n\n/* 代码块样式 */\n.markdown-content :deep(pre),\n.html-content :deep(pre) {\n  background: #1e293b;\n  border-radius: 8px;\n  padding: 1.2rem;\n  margin: 1.5rem 0;\n  overflow-x: auto;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.markdown-content :deep(code),\n.html-content :deep(code) {\n  font-family: 'Fira Code', 'SFMono-Regular', Consolas, monospace;\n  background: transparent;\n  color: #f8fafc;\n  padding: 0;\n  font-size: 0.9em;\n}\n\n/* 行内代码 */\n.markdown-content :deep(p > code),\n.html-content :deep(p > code) {\n  background: #edf2f7;\n  color: #c53030;\n  padding: 0.2em 0.4em;\n  border-radius: 4px;\n  font-size: 0.9em;\n}\n\n/* 引用块 */\n.markdown-content :deep(blockquote),\n.html-content :deep(blockquote) {\n  border-left: 4px solid #4299e1;\n  background: #ebf8ff;\n  color: #2b6cb0;\n  padding: 1rem 1.5rem;\n  margin: 1.5rem 0;\n  border-radius: 0 4px 4px 0;\n}\n\n/* 表格样式 */\n.markdown-content :deep(table),\n.html-content :deep(table) {\n  width: 100%;\n  margin: 1.5rem 0;\n  border-collapse: collapse;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.markdown-content :deep(th),\n.markdown-content :deep(td),\n.html-content :deep(th),\n.html-content :deep(td) {\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1rem;\n  text-align: left;\n}\n\n.markdown-content :deep(th),\n.html-content :deep(th) {\n  background: #f7fafc;\n  font-weight: 600;\n  color: #2d3748;\n}\n\n/* 列表样式 */\n.markdown-content :deep(ul),\n.markdown-content :deep(ol),\n.html-content :deep(ul),\n.html-content :deep(ol) {\n  margin: 1.5rem 0;\n  padding-left: 2rem;\n}\n\n.markdown-content :deep(li),\n.html-content :deep(li) {\n  margin: 0.5rem 0;\n  color: #4a5568;\n}\n\n/* 链接样式 */\n.markdown-content :deep(a),\n.html-content :deep(a) {\n  color: #4299e1;\n  text-decoration: none;\n  font-weight: 500;\n  transition: all 0.2s;\n}\n\n.markdown-content :deep(a:hover),\n.html-content :deep(a:hover) {\n  color: #2b6cb0;\n  text-decoration: underline;\n}\n\n/* 图片样式 */\n.markdown-content :deep(img),\n.html-content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  border-radius: 6px;\n  margin: 1.5rem auto;\n  display: block;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* LeetCode 特定样式 */\n.html-content :deep(.example-block) {\n  background: #f0f9ff;\n  border-left: 3px solid #63b3ed;\n  padding: 1.2rem;\n  margin: 1.8rem 0;\n  border-radius: 0 6px 6px 0;\n}\n\n.html-content :deep(.example-block h3) {\n  margin-top: 0;\n  color: #2c5282;\n}\n\n.html-content :deep(.table-responsive) {\n  overflow-x: auto;\n  margin: 1.8rem 0;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n/* 对话框样式优化 */\n.el-dialog {\n  border-radius: 12px;\n  max-width: 500px;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.8rem;\n  margin-top: 1.5rem;\n}\n\n/* 响应式设计 */\n@media (max-width: 1024px) {\n  .question-content {\n    grid-template-columns: 1fr;\n  }\n  \n  .right-section {\n    position: static;\n  }\n}\n\n@media (max-width: 768px) {\n  .page-container {\n    padding: 1rem;\n  }\n  \n  .action-buttons {\n    /* 保持水平排列 */\n    display: flex;\n    flex-wrap: wrap;\n  }\n  \n  .question-description-card,\n  .question-info-card,\n  .question-tags-card {\n    padding: 1.2rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .action-buttons {\n    flex-direction: column;\n  }\n  \n  .action-buttons .el-button {\n    width: 100%;\n  }\n}\n\n/* 动画效果 */\n.el-card,\n.el-button,\n.el-tag {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f5f9;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #cbd5e0;\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #a0aec0;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}