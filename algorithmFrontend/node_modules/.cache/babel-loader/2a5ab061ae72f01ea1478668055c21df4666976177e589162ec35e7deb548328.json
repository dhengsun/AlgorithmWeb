{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from '@/router'; // 引入路由实例\nimport { ElMessage } from 'element-plus';\nconst request = axios.create({\n  baseURL: 'http://123.60.139.196',\n  timeout: 5000\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem('access_token');\n  if (accessToken) {\n    config.headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  if (error.response) {\n    const {\n      status\n    } = error.response;\n    if (status === 401) {\n      // token 过期或无效\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (refreshToken) {\n        try {\n          // 尝试使用 refresh token 获取新的 access token\n          const response = await axios.post('http://localhost:8000/api/token/refresh/', {\n            refresh: refreshToken\n          });\n\n          // 更新 localStorage 中的 token\n          localStorage.setItem('access_token', response.data.access);\n\n          // 重试原来的请求\n          error.config.headers['Authorization'] = `Bearer ${response.data.access}`;\n          return request(error.config);\n        } catch (refreshError) {\n          // refresh token 也过期了，清除所有 token 并跳转到登录页\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          localStorage.removeItem('user_info');\n          router.push('/login');\n          ElMessage.error('登录已过期，请重新登录');\n        }\n      } else {\n        router.push('/login');\n        ElMessage.error('请先登录');\n      }\n    } else if (status === 403) {\n      ElMessage.error('没有权限进行此操作');\n    } else if (status === 404) {\n      ElMessage.error('请求的资源不存在');\n    } else if (status === 500) {\n      ElMessage.error('服务器错误，请稍后重试');\n    } else {\n      ElMessage.error(error.response.data.message || '请求失败');\n    }\n  } else if (error.request) {\n    ElMessage.error('网络错误，请检查你的网络连接');\n  } else {\n    ElMessage.error('请求配置错误');\n  }\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","ElMessage","request","create","baseURL","timeout","interceptors","use","config","accessToken","localStorage","getItem","headers","error","Promise","reject","response","status","refreshToken","post","refresh","setItem","data","access","refreshError","removeItem","push","message"],"sources":["/var/www/AlgorithmWeb/algorithmFrontend/src/api/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '@/router'  // 引入路由实例\nimport { ElMessage } from 'element-plus'\n\nconst request = axios.create({\n  baseURL: 'http://123.60.139.196',\n  timeout: 5000\n})\n\n// 请求拦截器\nrequest.interceptors.request.use(\n  config => {\n    const accessToken = localStorage.getItem('access_token')\n    if (accessToken) {\n      config.headers['Authorization'] = `Bearer ${accessToken}`\n    }\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nrequest.interceptors.response.use(\n  response => {\n    return response\n  },\n  async error => {\n    if (error.response) {\n      const { status } = error.response\n      \n      if (status === 401) {\n        // token 过期或无效\n        const refreshToken = localStorage.getItem('refresh_token')\n        \n        if (refreshToken) {\n          try {\n            // 尝试使用 refresh token 获取新的 access token\n            const response = await axios.post('http://localhost:8000/api/token/refresh/', {\n              refresh: refreshToken\n            })\n            \n            // 更新 localStorage 中的 token\n            localStorage.setItem('access_token', response.data.access)\n            \n            // 重试原来的请求\n            error.config.headers['Authorization'] = `Bearer ${response.data.access}`\n            return request(error.config)\n          } catch (refreshError) {\n            // refresh token 也过期了，清除所有 token 并跳转到登录页\n            localStorage.removeItem('access_token')\n            localStorage.removeItem('refresh_token')\n            localStorage.removeItem('user_info')\n            router.push('/login')\n            ElMessage.error('登录已过期，请重新登录')\n          }\n        } else {\n          router.push('/login')\n          ElMessage.error('请先登录')\n        }\n      } else if (status === 403) {\n        ElMessage.error('没有权限进行此操作')\n      } else if (status === 404) {\n        ElMessage.error('请求的资源不存在')\n      } else if (status === 500) {\n        ElMessage.error('服务器错误，请稍后重试')\n      } else {\n        ElMessage.error(error.response.data.message || '请求失败')\n      }\n    } else if (error.request) {\n      ElMessage.error('网络错误，请检查你的网络连接')\n    } else {\n      ElMessage.error('请求配置错误')\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default request\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}