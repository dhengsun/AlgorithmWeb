{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from '@/router';\nimport { ElMessage } from 'element-plus';\n\n// // 多环境配置\n// const baseURL = process.env.NODE_ENV === 'development' \n//   ? 'http://localhost:8000/back' \n//   : '/back'\n\nconst request = axios.create({\n  baseURL: '',\n  timeout: 15000,\n  withCredentials: true // 如果需要 Cookie\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem('access_token');\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => response, async error => {\n  if (!error.response) {\n    ElMessage.error('网络异常，请检查连接');\n    return Promise.reject(error);\n  }\n  const {\n    status,\n    data\n  } = error.response;\n  const originalRequest = error.config;\n  switch (status) {\n    case 400:\n      ElMessage.error(data.detail || '请求参数错误');\n      break;\n    case 401:\n      await handle401Error(originalRequest);\n      break;\n    case 403:\n      ElMessage.error('权限不足');\n      router.push('/no-permission');\n      break;\n    case 404:\n      ElMessage.error('资源不存在');\n      break;\n    case 413:\n      ElMessage.error('文件大小超过限制');\n      break;\n    case 500:\n      ElMessage.error(`服务器错误: ${data.detail}`);\n      break;\n    default:\n      ElMessage.error(`请求失败 (${status})`);\n  }\n  return Promise.reject(error);\n});\n\n// 401 处理逻辑\nasync function handle401Error(originalRequest) {\n  const refreshToken = localStorage.getItem('refresh_token');\n  if (!refreshToken) {\n    redirectToLogin();\n    return;\n  }\n  try {\n    // 使用同一实例刷新 Token\n    const {\n      data\n    } = await request.post('/auth/token/refresh/', {\n      refresh: refreshToken\n    });\n    localStorage.setItem('access_token', data.access);\n    originalRequest.headers.Authorization = `Bearer ${data.access}`;\n    return request(originalRequest);\n  } catch (error) {\n    redirectToLogin();\n  }\n}\nfunction redirectToLogin() {\n  localStorage.clear();\n  router.push('/login');\n  ElMessage.warning('会话已过期，请重新登录');\n}\nexport default request;","map":{"version":3,"names":["axios","router","ElMessage","request","create","baseURL","timeout","withCredentials","interceptors","use","config","accessToken","localStorage","getItem","headers","Authorization","response","error","Promise","reject","status","data","originalRequest","detail","handle401Error","push","refreshToken","redirectToLogin","post","refresh","setItem","access","clear","warning"],"sources":["/Users/hsd/File/Code/Project/AlgorithmWeb/algorithmFrontend/src/api/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from '@/router'\nimport { ElMessage } from 'element-plus'\n\n// // 多环境配置\n// const baseURL = process.env.NODE_ENV === 'development' \n//   ? 'http://localhost:8000/back' \n//   : '/back'\n\nconst request = axios.create({\n  baseURL: '',\n  timeout: 15000,\n  withCredentials: true  // 如果需要 Cookie\n})\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem('access_token')\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`\n  }\n  return config\n})\n\n// 响应拦截器\nrequest.interceptors.response.use(\n  response => response,\n  async error => {\n    if (!error.response) {\n      ElMessage.error('网络异常，请检查连接')\n      return Promise.reject(error)\n    }\n\n    const { status, data } = error.response\n    const originalRequest = error.config\n\n    switch (status) {\n      case 400:\n        ElMessage.error(data.detail || '请求参数错误')\n        break\n      case 401:\n        await handle401Error(originalRequest)\n        break\n      case 403:\n        ElMessage.error('权限不足')\n        router.push('/no-permission')\n        break\n      case 404:\n        ElMessage.error('资源不存在')\n        break\n      case 413:\n        ElMessage.error('文件大小超过限制')\n        break\n      case 500:\n        ElMessage.error(`服务器错误: ${data.detail}`)\n        break\n      default:\n        ElMessage.error(`请求失败 (${status})`)\n    }\n\n    return Promise.reject(error)\n  }\n)\n\n// 401 处理逻辑\nasync function handle401Error(originalRequest) {\n  const refreshToken = localStorage.getItem('refresh_token')\n  \n  if (!refreshToken) {\n    redirectToLogin()\n    return\n  }\n\n  try {\n    // 使用同一实例刷新 Token\n    const { data } = await request.post('/auth/token/refresh/', { refresh: refreshToken })\n    \n    localStorage.setItem('access_token', data.access)\n    originalRequest.headers.Authorization = `Bearer ${data.access}`\n    return request(originalRequest)\n  } catch (error) {\n    redirectToLogin()\n  }\n}\n\nfunction redirectToLogin() {\n  localStorage.clear()\n  router.push('/login')\n  ElMessage.warning('会话已过期，请重新登录')\n}\n\nexport default request"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}