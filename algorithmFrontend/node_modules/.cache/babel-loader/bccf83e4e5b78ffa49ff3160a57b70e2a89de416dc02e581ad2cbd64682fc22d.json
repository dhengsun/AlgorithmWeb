{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createBlock as _createBlock, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"question-detail-view\"\n};\nconst _hoisted_2 = {\n  class: \"page-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"loading-container\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"error-container\"\n};\nconst _hoisted_5 = {\n  key: 2,\n  class: \"question-content\"\n};\nconst _hoisted_6 = {\n  class: \"left-section\"\n};\nconst _hoisted_7 = [\"innerHTML\"];\nconst _hoisted_8 = [\"innerHTML\"];\nconst _hoisted_9 = {\n  class: \"right-section\"\n};\nconst _hoisted_10 = {\n  class: \"info-meta\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"deleted-status\"\n};\nconst _hoisted_12 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_13 = {\n  class: \"difficulty-section\"\n};\nconst _hoisted_14 = {\n  class: \"tags-section\"\n};\nconst _hoisted_15 = {\n  class: \"tags-container\"\n};\nconst _hoisted_16 = {\n  class: \"dialog-footer\"\n};\nconst _hoisted_17 = {\n  class: \"dialog-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppHeader = _resolveComponent(\"AppHeader\");\n  const _component_el_skeleton = _resolveComponent(\"el-skeleton\");\n  const _component_el_alert = _resolveComponent(\"el-alert\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_EditPen = _resolveComponent(\"EditPen\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_Delete = _resolveComponent(\"Delete\");\n  const _component_RefreshRight = _resolveComponent(\"RefreshRight\");\n  const _component_Plus = _resolveComponent(\"Plus\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_AppHeader), _createElementVNode(\"main\", _hoisted_2, [$data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_el_skeleton, {\n    rows: 10,\n    animated: \"\"\n  })])) : $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode(_component_el_alert, {\n    title: $data.error,\n    type: \"error\",\n    closable: false\n  }, null, 8, [\"title\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_el_card, {\n    class: \"question-description-card\"\n  }, {\n    default: _withCtx(() => [$data.question.oj_platform === 'leetcode' ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      innerHTML: $options.compiledHtml,\n      class: \"html-content\"\n    }, null, 8, _hoisted_7)) : (_openBlock(), _createElementBlock(\"div\", {\n      key: 1,\n      innerHTML: $options.compiledMarkdown,\n      class: \"markdown-content\"\n    }, null, 8, _hoisted_8))]),\n    _: 1\n  })]), _createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_el_card, {\n    class: \"question-info-card\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"h2\", null, _toDisplayString($data.question.name), 1), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", null, \"题目ID: \" + _toDisplayString($data.question.id), 1), _createElementVNode(\"div\", null, \"外部ID: \" + _toDisplayString($data.question.ext_question_id), 1), _createElementVNode(\"div\", null, [_cache[4] || (_cache[4] = _createTextVNode(\" 平台: \")), _createVNode(_component_el_tag, {\n      type: $options.getPlatformTagType($data.question.oj_platform),\n      size: \"small\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($options.getPlatformName($data.question.oj_platform)), 1)]),\n      _: 1\n    }, 8, [\"type\"])]), _createElementVNode(\"div\", null, \"创建时间: \" + _toDisplayString($options.formatDate($data.question.created_at)), 1), $data.question.is_deleted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createVNode(_component_el_tag, {\n      type: \"danger\",\n      effect: \"dark\"\n    }, {\n      default: _withCtx(() => _cache[5] || (_cache[5] = [_createTextVNode(\"已删除\")])),\n      _: 1\n    })])) : _createCommentVNode(\"\", true)]), _createElementVNode(\"div\", _hoisted_12, [_createVNode(_component_el_button, {\n      type: \"primary\",\n      size: \"small\",\n      onClick: $options.handleEdit,\n      disabled: $data.question.is_deleted\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_icon, null, {\n        default: _withCtx(() => [_createVNode(_component_EditPen)]),\n        _: 1\n      }), _cache[6] || (_cache[6] = _createTextVNode(\" 编辑 \"))]),\n      _: 1\n    }, 8, [\"onClick\", \"disabled\"]), !$data.question.is_deleted ? (_openBlock(), _createBlock(_component_el_button, {\n      key: 0,\n      type: \"danger\",\n      size: \"small\",\n      onClick: $options.handleDelete\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_icon, null, {\n        default: _withCtx(() => [_createVNode(_component_Delete)]),\n        _: 1\n      }), _cache[7] || (_cache[7] = _createTextVNode(\" 删除 \"))]),\n      _: 1\n    }, 8, [\"onClick\"])) : (_openBlock(), _createBlock(_component_el_button, {\n      key: 1,\n      type: \"success\",\n      size: \"small\",\n      onClick: $options.handleRestore\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_icon, null, {\n        default: _withCtx(() => [_createVNode(_component_RefreshRight)]),\n        _: 1\n      }), _cache[8] || (_cache[8] = _createTextVNode(\" 恢复 \"))]),\n      _: 1\n    }, 8, [\"onClick\"])), _createVNode(_component_el_button, {\n      type: \"success\",\n      size: \"small\",\n      onClick: $options.handleCreateSolution,\n      disabled: $data.question.is_deleted\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_icon, null, {\n        default: _withCtx(() => [_createVNode(_component_Plus)]),\n        _: 1\n      }), _cache[9] || (_cache[9] = _createTextVNode(\" 创建题解 \"))]),\n      _: 1\n    }, 8, [\"onClick\", \"disabled\"])])]),\n    _: 1\n  }), _createVNode(_component_el_card, {\n    class: \"question-tags-card\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_13, [_cache[10] || (_cache[10] = _createElementVNode(\"h3\", null, \"难度级别\", -1)), _createVNode(_component_el_tag, {\n      type: $options.getDifficultyTagType($data.question),\n      effect: \"dark\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.question.difficulty), 1)]),\n      _: 1\n    }, 8, [\"type\"])]), _createElementVNode(\"div\", _hoisted_14, [_cache[11] || (_cache[11] = _createElementVNode(\"h3\", null, \"算法标签\", -1)), _createElementVNode(\"div\", _hoisted_15, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.question.algorithm_tags, tag => {\n      return _openBlock(), _createBlock(_component_el_tag, {\n        key: tag,\n        type: $options.getTagType(tag, $data.question.oj_platform),\n        class: \"algorithm-tag\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($options.getTagName(tag)), 1)]),\n        _: 2\n      }, 1032, [\"type\"]);\n    }), 128))])])]),\n    _: 1\n  }), false ? (_openBlock(), _createBlock(_component_el_card, {\n    key: 0,\n    class: \"related-questions-card\"\n  }, {\n    default: _withCtx(() => _cache[12] || (_cache[12] = [_createElementVNode(\"h3\", null, \"相关题目\", -1), _createElementVNode(\"div\", {\n      class: \"related-questions-list\"\n    }, null, -1)])),\n    _: 1\n  })) : _createCommentVNode(\"\", true)])]))]), _createVNode(_component_el_dialog, {\n    modelValue: $data.deleteDialogVisible,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.deleteDialogVisible = $event),\n    title: \"确认删除\",\n    width: \"30%\"\n  }, {\n    footer: _withCtx(() => [_createElementVNode(\"span\", _hoisted_16, [_createVNode(_component_el_button, {\n      onClick: _cache[0] || (_cache[0] = $event => $data.deleteDialogVisible = false)\n    }, {\n      default: _withCtx(() => _cache[13] || (_cache[13] = [_createTextVNode(\"取消\")])),\n      _: 1\n    }), _createVNode(_component_el_button, {\n      type: \"danger\",\n      onClick: $options.confirmDelete,\n      loading: $data.processing\n    }, {\n      default: _withCtx(() => _cache[14] || (_cache[14] = [_createTextVNode(\"确认删除\")])),\n      _: 1\n    }, 8, [\"onClick\", \"loading\"])])]),\n    default: _withCtx(() => [_createElementVNode(\"span\", null, \"确定要删除题目 \\\"\" + _toDisplayString($data.question ? $data.question.name : '') + \"\\\" 吗？此操作不可逆。\", 1)]),\n    _: 1\n  }, 8, [\"modelValue\"]), _createVNode(_component_el_dialog, {\n    modelValue: $data.restoreDialogVisible,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.restoreDialogVisible = $event),\n    title: \"确认恢复\",\n    width: \"30%\"\n  }, {\n    footer: _withCtx(() => [_createElementVNode(\"span\", _hoisted_17, [_createVNode(_component_el_button, {\n      onClick: _cache[2] || (_cache[2] = $event => $data.restoreDialogVisible = false)\n    }, {\n      default: _withCtx(() => _cache[15] || (_cache[15] = [_createTextVNode(\"取消\")])),\n      _: 1\n    }), _createVNode(_component_el_button, {\n      type: \"success\",\n      onClick: $options.confirmRestore,\n      loading: $data.processing\n    }, {\n      default: _withCtx(() => _cache[16] || (_cache[16] = [_createTextVNode(\"确认恢复\")])),\n      _: 1\n    }, 8, [\"onClick\", \"loading\"])])]),\n    default: _withCtx(() => [_createElementVNode(\"span\", null, \"确定要恢复题目 \\\"\" + _toDisplayString($data.question ? $data.question.name : '') + \"\\\" 吗？\", 1)]),\n    _: 1\n  }, 8, [\"modelValue\"])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_AppHeader","_createElementVNode","_hoisted_2","$data","loading","_hoisted_3","_component_el_skeleton","rows","animated","error","_hoisted_4","_component_el_alert","title","type","closable","_hoisted_5","_hoisted_6","_component_el_card","default","_withCtx","question","oj_platform","innerHTML","$options","compiledHtml","_hoisted_7","compiledMarkdown","_hoisted_8","_","_hoisted_9","_toDisplayString","name","_hoisted_10","id","ext_question_id","_createTextVNode","_component_el_tag","getPlatformTagType","size","getPlatformName","formatDate","created_at","is_deleted","_hoisted_11","effect","_cache","_createCommentVNode","_hoisted_12","_component_el_button","onClick","handleEdit","disabled","_component_el_icon","_component_EditPen","_createBlock","handleDelete","_component_Delete","handleRestore","_component_RefreshRight","handleCreateSolution","_component_Plus","_hoisted_13","getDifficultyTagType","difficulty","_hoisted_14","_hoisted_15","_Fragment","_renderList","algorithm_tags","tag","getTagType","getTagName","_component_el_dialog","modelValue","deleteDialogVisible","$event","width","footer","_hoisted_16","confirmDelete","processing","restoreDialogVisible","_hoisted_17","confirmRestore"],"sources":["/Users/hsd/File/Code/Project/AlgorithmWeb/algorithmFrontend/src/views/QuestionDetailView.vue"],"sourcesContent":["<template>\n  <div class=\"question-detail-view\">\n    <AppHeader />\n    <main class=\"page-container\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      \n      <div v-else-if=\"error\" class=\"error-container\">\n        <el-alert\n          :title=\"error\"\n          type=\"error\"\n          :closable=\"false\"\n        />\n      </div>\n      \n      <div v-else class=\"question-content\">\n        <div class=\"left-section\">\n          <el-card class=\"question-description-card\">\n            <!-- 根据平台选择不同的渲染方式 -->\n            <div v-if=\"question.oj_platform === 'leetcode'\" v-html=\"compiledHtml\" class=\"html-content\"></div>\n            <div v-else v-html=\"compiledMarkdown\" class=\"markdown-content\"></div>\n          </el-card>\n        </div>\n        \n        <div class=\"right-section\">\n          <el-card class=\"question-info-card\">\n            <h2>{{ question.name }}</h2>\n            <div class=\"info-meta\">\n              <div>题目ID: {{ question.id }}</div>\n              <div>外部ID: {{ question.ext_question_id }}</div>\n              <div>\n                平台: \n                <el-tag :type=\"getPlatformTagType(question.oj_platform)\" size=\"small\">\n                  {{ getPlatformName(question.oj_platform) }}\n                </el-tag>\n              </div>\n              <div>创建时间: {{ formatDate(question.created_at) }}</div>\n              <div v-if=\"question.is_deleted\" class=\"deleted-status\">\n                <el-tag type=\"danger\" effect=\"dark\">已删除</el-tag>\n              </div>\n            </div>\n            \n            <div class=\"action-buttons\">\n              <el-button type=\"primary\" size=\"small\" @click=\"handleEdit\" :disabled=\"question.is_deleted\">\n                <el-icon><EditPen /></el-icon>\n                编辑\n              </el-button>\n              \n              <!-- 根据is_deleted显示不同的按钮 -->\n              <el-button \n                v-if=\"!question.is_deleted\" \n                type=\"danger\" \n                size=\"small\" \n                @click=\"handleDelete\"\n              >\n                <el-icon><Delete /></el-icon>\n                删除\n              </el-button>\n              \n              <el-button \n                v-else \n                type=\"success\" \n                size=\"small\" \n                @click=\"handleRestore\"\n              >\n                <el-icon><RefreshRight /></el-icon>\n                恢复\n              </el-button>\n              \n              <el-button \n                type=\"success\" \n                size=\"small\" \n                @click=\"handleCreateSolution\" \n                :disabled=\"question.is_deleted\"\n              >\n                <el-icon><Plus /></el-icon>\n                创建题解\n              </el-button>\n            </div>\n          </el-card>\n          \n          <el-card class=\"question-tags-card\">\n            <div class=\"difficulty-section\">\n              <h3>难度级别</h3>\n              <el-tag \n                :type=\"getDifficultyTagType(question)\"\n                effect=\"dark\"\n              >\n                {{ question.difficulty }}\n              </el-tag>\n            </div>\n            \n            <div class=\"tags-section\">\n              <h3>算法标签</h3>\n              <div class=\"tags-container\">\n                <el-tag \n                  v-for=\"tag in question.algorithm_tags\" \n                  :key=\"tag\"\n                  :type=\"getTagType(tag, question.oj_platform)\"\n                  class=\"algorithm-tag\"\n                >\n                  {{ getTagName(tag) }}\n                </el-tag>\n              </div>\n            </div>\n          </el-card>\n          \n          <!-- 可以添加更多卡片，如相关题目等 -->\n          <el-card class=\"related-questions-card\" v-if=\"false\">\n            <h3>相关题目</h3>\n            <div class=\"related-questions-list\">\n              <!-- 相关题目列表，暂不实现 -->\n            </div>\n          </el-card>\n        </div>\n      </div>\n    </main>\n\n    <!-- 删除确认对话框 -->\n    <el-dialog\n      v-model=\"deleteDialogVisible\"\n      title=\"确认删除\"\n      width=\"30%\"\n    >\n      <span>确定要删除题目 \"{{ question ? question.name : '' }}\" 吗？此操作不可逆。</span>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\n          <el-button type=\"danger\" @click=\"confirmDelete\" :loading=\"processing\">确认删除</el-button>\n        </span>\n      </template>\n    </el-dialog>\n    \n    <!-- 恢复确认对话框 -->\n    <el-dialog\n      v-model=\"restoreDialogVisible\"\n      title=\"确认恢复\"\n      width=\"30%\"\n    >\n      <span>确定要恢复题目 \"{{ question ? question.name : '' }}\" 吗？</span>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"restoreDialogVisible = false\">取消</el-button>\n          <el-button type=\"success\" @click=\"confirmRestore\" :loading=\"processing\">确认恢复</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport AppHeader from '@/components/AppHeader.vue'\nimport { getQuestionDetail, deleteQuestion, restoreQuestion } from '@/api/question'\nimport MarkdownIt from 'markdown-it'\nimport DOMPurify from 'dompurify'\nimport { EditPen, Delete, Plus, RefreshRight } from '@element-plus/icons-vue'\nimport { ElMessage } from 'element-plus'\n\n/* global MathJax */\n\nexport default {\n  name: 'QuestionDetailView',\n  components: {\n    AppHeader,\n    EditPen,\n    Delete,\n    Plus,\n    RefreshRight\n  },\n  data() {\n    return {\n      questionId: this.$route.params.id,\n      question: null,\n      loading: true,\n      error: null,\n      mdi: new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true\n      }),\n      mathJaxLoaded: false,\n      \n      // 删除和恢复相关状态\n      deleteDialogVisible: false,\n      restoreDialogVisible: false,\n      processing: false\n    }\n  },\n  computed: {\n    // 用于洛谷等平台 - Markdown 渲染\n    compiledMarkdown() {\n      if (!this.question || !this.question.content) return ''\n      \n      try {\n        const content = String(this.question.content || '')\n        const html = this.mdi.render(content)\n        return DOMPurify.sanitize(html)\n      } catch (e) {\n        console.error('Markdown处理错误:', e)\n        return '内容解析出错'\n      }\n    },\n    \n    // 用于LeetCode平台 - HTML直接渲染\n    compiledHtml() {\n      if (!this.question || !this.question.content) return ''\n      \n      try {\n        let content = String(this.question.content || '')\n        \n        // 检查是否需要HTML包装\n        if (!content.trim().startsWith('<')) {\n          // 如果内容不是以HTML标签开始，则添加基本HTML包装\n          content = `<div>${content}</div>`\n        }\n        \n        // 处理LeetCode特有的代码块格式\n        content = this.processLeetcodeHtml(content)\n        \n        // 添加示例块样式处理\n        content = this.wrapExamples(content)\n        \n        // 清洗HTML以确保安全\n        return DOMPurify.sanitize(content, {\n          USE_PROFILES: { html: true },\n          ALLOWED_TAGS: [\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'br', 'hr',\n            'ol', 'ul', 'li', 'pre', 'code', 'blockquote',\n            'table', 'thead', 'tbody', 'tr', 'th', 'td',\n            'strong', 'em', 'b', 'i', 'u', 'strike', 's',\n            'a', 'img', 'span', 'div', 'section', 'article',\n            'meta'\n          ],\n          ALLOWED_ATTR: [\n            'href', 'name', 'target', 'src', 'alt', 'class', 'id',\n            'width', 'height', 'style', 'charset', 'content'\n          ]\n        })\n      } catch (e) {\n        console.error('HTML处理错误:', e)\n        return '内容解析出错'\n      }\n    }\n  },\n  watch: {\n    // 当内容变化时更新MathJax渲染\n    question: {\n      handler() {\n        this.$nextTick(() => this.renderMathJax())\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.fetchQuestionDetail()\n    this.initMathJax()\n  },\n  methods: {\n    // 编辑按钮处理\n    handleEdit() {\n      if (!this.question || this.question.is_deleted) return\n      // 跳转到更新题目页面\n      this.$router.push(`/questions/update/${this.question.id}`)\n    },\n    \n    // 删除按钮处理\n    handleDelete() {\n      if (!this.question || this.question.is_deleted) return\n      this.deleteDialogVisible = true\n    },\n    \n    // 恢复按钮处理\n    handleRestore() {\n      if (!this.question || !this.question.is_deleted) return\n      this.restoreDialogVisible = true\n    },\n    \n    // 确认删除\n    async confirmDelete() {\n      if (!this.question) return\n      \n      this.processing = true\n      try {\n        await deleteQuestion({ id: this.question.id })\n        \n        ElMessage({\n          type: 'success',\n          message: '题目删除成功'\n        })\n        \n        // 关闭对话框\n        this.deleteDialogVisible = false\n        \n        // 刷新数据\n        this.fetchQuestionDetail()\n      } catch (error) {\n        console.error('删除题目失败:', error)\n        ElMessage({\n          type: 'error',\n          message: '删除题目失败: ' + (error.message || '未知错误')\n        })\n      } finally {\n        this.processing = false\n      }\n    },\n    \n    // 确认恢复\n    async confirmRestore() {\n      if (!this.question) return\n      \n      this.processing = true\n      try {\n        await restoreQuestion({ id: this.question.id })\n        \n        ElMessage({\n          type: 'success',\n          message: '题目恢复成功'\n        })\n        \n        // 关闭对话框\n        this.restoreDialogVisible = false\n        \n        // 刷新数据\n        this.fetchQuestionDetail()\n      } catch (error) {\n        console.error('恢复题目失败:', error)\n        ElMessage({\n          type: 'error',\n          message: '恢复题目失败: ' + (error.message || '未知错误')\n        })\n      } finally {\n        this.processing = false\n      }\n    },\n    \n    // 创建题解按钮处理\n    handleCreateSolution() {\n      if (!this.question || this.question.is_deleted) return\n      // 跳转到创建题解页面，传递题目ID\n      this.$router.push(`/create/solution?question_id=${this.question.id}`)\n    },\n    \n    // 处理LeetCode HTML内容\n    processLeetcodeHtml(content) {\n      try {\n        // 检查内容类型\n        if (content.includes('\\\\n') || content.includes('&lt;') || content.includes('&gt;')) {\n          // 这是LeetCode转义后的文本，需要先转换\n          content = this.convertLeetcodeEscapedContent(content)\n        }\n        \n        // 创建临时DOM元素来处理HTML\n        const tempDiv = document.createElement('div')\n        tempDiv.innerHTML = content\n        \n        // 确保所有代码块都有正确的样式\n        const preTags = tempDiv.querySelectorAll('pre')\n        preTags.forEach(preTag => {\n          // 添加类名以确保正确样式\n          preTag.classList.add('leetcode-code-block')\n          \n          // 处理内部的code标签\n          const codeTag = preTag.querySelector('code')\n          if (codeTag) {\n            // 如果没有语言类，添加一个默认类\n            if (!codeTag.className.includes('language-')) {\n              codeTag.classList.add('language-plain')\n            }\n          }\n        })\n        \n        // 确保在表格外添加包装以提高可滚动性\n        const tables = tempDiv.querySelectorAll('table')\n        tables.forEach(table => {\n          const wrapper = document.createElement('div')\n          wrapper.className = 'table-responsive'\n          table.parentNode.insertBefore(wrapper, table)\n          wrapper.appendChild(table)\n        })\n        \n        // 处理示例中的加粗内容\n        const boldPatterns = tempDiv.querySelectorAll('*:not(strong):not(b)')\n        boldPatterns.forEach(el => {\n          const text = el.innerHTML\n          if (text && typeof text === 'string') {\n            // 查找并替换 **文本** 格式为 <strong>文本</strong>\n            if (text.includes('**')) {\n              el.innerHTML = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            }\n          }\n        })\n        \n        // 为LeetCode内容添加meta标签，指示渲染模式\n        const metaTag = document.createElement('meta')\n        metaTag.setAttribute('name', 'rendering-mode')\n        metaTag.setAttribute('content', 'leetcode-html')\n        tempDiv.insertBefore(metaTag, tempDiv.firstChild)\n        \n        return tempDiv.innerHTML\n      } catch (error) {\n        console.error('处理LeetCode HTML时出错:', error)\n        return content // 出错时返回原始内容\n      }\n    },\n    \n    // 转换LeetCode转义的内容为格式化HTML\n    convertLeetcodeEscapedContent(content) {\n      // 处理转义字符\n      content = content\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/&nbsp;/g, ' ')\n        .replace(/&amp;/g, '&')\n        .replace(/&quot;/g, '\"')\n        .replace(/&#39;/g, \"'\")\n      \n      // 处理换行符 \\n 转为实际的HTML换行\n      content = content.replace(/\\\\n/g, '<br>')\n      \n      // 处理制表符\n      content = content.replace(/\\\\t/g, '&emsp;&emsp;')\n      \n      // 如果有空行，添加段落标签以保持间距\n      content = content\n        .replace(/(<br>){2,}/g, '</p><p>')  // 多个连续换行符转为段落\n        .replace(/<br>/g, '<br>\\n')  // 单个换行符后添加实际换行符以改善源码可读性\n      \n      // 处理示例部分的格式\n      content = content\n        .replace(/示例 (\\d+):/g, '<h3>示例 $1</h3>')\n        .replace(/输入: /g, '<strong>输入</strong>: ')\n        .replace(/输出: /g, '<strong>输出</strong>: ')\n        .replace(/解释: /g, '<strong>解释</strong>: ')\n      \n      // 处理提示/注意部分\n      content = content.replace(/提示:|注意:/g, '<h3>$&</h3>')\n      \n      // 确保内容被包裹在段落标签中\n      if (!content.startsWith('<') || !['<p', '<div', '<h'].includes(content.substring(0, 2))) {\n        content = '<p>' + content + '</p>'\n      }\n      \n      return content\n    },\n    \n    // 包装示例部分为特殊的样式块\n    wrapExamples(content) {\n      try {\n        const tempDiv = document.createElement('div')\n        tempDiv.innerHTML = content\n        \n        // 查找所有示例标题\n        const exampleHeadings = tempDiv.querySelectorAll('h3')\n        exampleHeadings.forEach(heading => {\n          if (heading.textContent.includes('示例')) {\n            // 找到包含此示例的所有内容\n            let exampleContent = []\n            let currentNode = heading.nextElementSibling\n            \n            // 收集直到下一个标题或某个终止条件的所有内容\n            while (currentNode && \n                  (currentNode.tagName !== 'H3' && \n                   !currentNode.textContent.includes('提示') && \n                   !currentNode.textContent.includes('注意'))) {\n              exampleContent.push(currentNode.cloneNode(true))\n              currentNode = currentNode.nextElementSibling\n            }\n            \n            // 创建示例块容器\n            const exampleBlock = document.createElement('div')\n            exampleBlock.className = 'example-block'\n            \n            // 添加标题和内容\n            exampleBlock.appendChild(heading.cloneNode(true))\n            exampleContent.forEach(node => {\n              exampleBlock.appendChild(node)\n            })\n            \n            // 替换原始内容\n            heading.parentNode.insertBefore(exampleBlock, heading)\n            \n            // 移除原始元素\n            heading.remove()\n            exampleContent.forEach(node => {\n              const originalNode = tempDiv.querySelector(`*:nth-child(${Array.from(tempDiv.children).indexOf(node) + 1})`)\n              if (originalNode) {\n                originalNode.remove()\n              }\n            })\n          }\n        })\n        \n        return tempDiv.innerHTML\n      } catch (error) {\n        console.error('包装示例部分时出错:', error)\n        return content // 出错时返回原始内容\n      }\n    },\n    \n    renderMathJax() {\n      if (typeof MathJax !== 'undefined' && MathJax.typesetPromise && this.mathJaxLoaded) {\n        MathJax.typesetPromise()\n      }\n    },\n    \n    initMathJax() {\n      if (this.mathJaxLoaded || typeof MathJax !== 'undefined') {\n        this.mathJaxLoaded = true\n        return\n      }\n\n      // 配置MathJax\n      window.MathJax = {\n        tex: {\n          inlineMath: [['$', '$'], ['\\\\(', '\\\\)']],\n          displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],\n          processEscapes: true\n        },\n        options: {\n          skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']\n        },\n        startup: {\n          ready: () => {\n            MathJax.startup.defaultReady()\n            this.mathJaxLoaded = true\n            this.$nextTick(() => this.renderMathJax())\n          }\n        }\n      }\n\n      // 加载MathJax脚本\n      const script = document.createElement('script')\n      script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js'\n      script.async = true\n      script.onload = () => {\n        this.mathJaxLoaded = true\n      }\n      document.head.appendChild(script)\n    },\n    \n    async fetchQuestionDetail() {\n      this.loading = true\n      this.error = null\n      \n      try {\n        const response = await getQuestionDetail(this.questionId)\n        this.question = response.data\n        \n        // 确保算法标签是数组\n        if (typeof this.question.algorithm_tags === 'string') {\n          this.question.algorithm_tags = this.question.algorithm_tags\n            .split(',')\n            .map(tag => tag.trim())\n            .filter(tag => tag.length > 0)\n        }\n      } catch (error) {\n        console.error('获取题目详情失败:', error)\n        this.error = '获取题目详情失败: ' + (error.message || '未知错误')\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    // 平台相关方法\n    getPlatformName(platform) {\n      const platforms = {\n        'luogu': '洛谷',\n        'leetcode': 'LeetCode',\n        // 可以添加更多平台\n      }\n      return platforms[platform] || platform\n    },\n    \n    // 平台标签样式\n    getPlatformTagType(platform) {\n      return {\n        luogu: 'success',\n        leetcode: 'warning'\n      }[platform] || 'info'\n    },\n    \n    // 日期格式化\n    formatDate(dateString) {\n      if (!dateString) return ''\n      \n      const date = new Date(dateString)\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    },\n    \n    // 难度标签样式\n    getDifficultyTagType(row) {\n      if (row.oj_platform === 'luogu') {\n        const levelMap = {\n          '入门': 'info',\n          '普及-': 'success',\n          '普及/提高-': 'success',\n          '普及+/提高': 'warning',\n          '提高+/省选-': 'danger',\n          '省选/NOI-': 'danger',\n          'NOI/NOI+': 'danger',\n          'CTSC': 'danger'\n        }\n        return levelMap[row.difficulty] || 'info'\n      }\n      \n      // LeetCode难度\n      return {\n        '简单': 'success',\n        '中等': 'warning',\n        '困难': 'danger'\n      }[row.difficulty] || 'info'\n    },\n    \n    // 标签样式\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary'\n      \n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0]\n      return {\n        'Algorithm': 'primary',  // 算法 - 蓝色\n        'Source': 'success',     // 来源 - 绿色\n        'Time': 'warning',       // 时间 - 黄色\n        'Region': 'danger',      // 地区 - 红色\n        'Other': 'info'          // 其他 - 灰色\n      }[prefix] || 'info'\n    },\n    \n    // 获取标签名称\n    getTagName(tag) {\n      // 洛谷标签去掉前缀\n      const parts = tag.split('_')\n      if (parts.length > 1) {\n        return parts.slice(1).join('_')\n      }\n      return tag\n    },\n    \n    // 生成题目链接\n    generateOjLink(row) {\n      const baseUrls = {\n        luogu: `https://www.luogu.com.cn/problem/${row.ext_question_id}`,\n        leetcode: `https://leetcode.cn/problems/${row.ext_question_id}/`\n      }\n      return baseUrls[row.oj_platform] || '#'\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 基础布局优化 */\n.question-detail-view {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n}\n\n.page-container {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n/* 加载状态优化 */\n.loading-container {\n  padding: 3rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n}\n\n/* 错误状态优化 */\n.error-container {\n  padding: 2rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n}\n\n/* 主内容区网格布局 */\n.question-content {\n  display: grid;\n  grid-template-columns: minmax(0, 1fr) 340px;\n  gap: 2rem;\n  align-items: start;\n}\n\n/* 左侧题目内容区 */\n.left-section {\n  position: sticky;\n  top: 1rem;\n}\n\n/* 右侧信息卡片区 */\n.right-section {\n  display: grid;\n  gap: 1.5rem;\n  position: sticky;\n  top: 1rem;\n  align-self: start;\n}\n\n/* 卡片通用样式 */\n.el-card {\n  border-radius: 12px;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  transition: all 0.3s ease;\n  margin-bottom: 1.5rem;\n}\n\n.el-card:hover {\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);\n  transform: translateY(-2px);\n}\n\n/* 题目描述卡片 */\n.question-description-card {\n  padding: 2rem;\n  background: white;\n}\n\n/* 题目信息卡片 */\n.question-info-card {\n  padding: 1.5rem;\n}\n\n.question-info-card h2 {\n  font-size: 1.4rem;\n  color: #2d3748;\n  margin-bottom: 1rem;\n  font-weight: 600;\n  line-height: 1.3;\n}\n\n.info-meta {\n  display: grid;\n  gap: 0.8rem;\n  color: #4a5568;\n  font-size: 0.95rem;\n  margin: 1.5rem 0;\n}\n\n.info-meta div {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n/* 标签卡片 */\n.question-tags-card {\n  padding: 1.5rem;\n}\n\n.difficulty-section,\n.tags-section {\n  margin-bottom: 1.5rem;\n}\n\n.difficulty-section h3,\n.tags-section h3 {\n  font-size: 1.1rem;\n  color: #2d3748;\n  margin-bottom: 0.8rem;\n  font-weight: 500;\n}\n\n/* 操作按钮组 */\n.action-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.8rem;\n  margin-top: 1.5rem;\n}\n\n.action-buttons .el-button {\n  flex: 1 0 auto;\n  min-width: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.3s ease;\n}\n\n/* 标签容器 */\n.tags-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.6rem;\n}\n\n.algorithm-tag {\n  transition: all 0.3s ease;\n  margin: 0;\n}\n\n.algorithm-tag:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 内容渲染样式优化 */\n.markdown-content,\n.html-content {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  color: #2d3748;\n  line-height: 1.7;\n  font-size: 1rem;\n}\n\n/* 标题样式 */\n.markdown-content :deep(h1),\n.markdown-content :deep(h2),\n.markdown-content :deep(h3),\n.html-content :deep(h1),\n.html-content :deep(h2),\n.html-content :deep(h3) {\n  color: #1a202c;\n  font-weight: 600;\n  margin: 1.8rem 0 1rem;\n  scroll-margin-top: 80px; /* 为锚点跳转留出空间 */\n}\n\n.markdown-content :deep(h1),\n.html-content :deep(h1) {\n  font-size: 1.8rem;\n  border-bottom: 1px solid #e2e8f0;\n  padding-bottom: 0.5rem;\n}\n\n.markdown-content :deep(h2),\n.html-content :deep(h2) {\n  font-size: 1.5rem;\n}\n\n.markdown-content :deep(h3),\n.html-content :deep(h3) {\n  font-size: 1.2rem;\n}\n\n/* 段落样式 */\n.markdown-content :deep(p),\n.html-content :deep(p) {\n  margin: 1.2rem 0;\n  color: #4a5568;\n}\n\n/* 代码块样式 */\n.markdown-content :deep(pre),\n.html-content :deep(pre) {\n  background: #1e293b;\n  border-radius: 8px;\n  padding: 1.2rem;\n  margin: 1.5rem 0;\n  overflow-x: auto;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.markdown-content :deep(code),\n.html-content :deep(code) {\n  font-family: 'Fira Code', 'SFMono-Regular', Consolas, monospace;\n  background: transparent;\n  color: #f8fafc;\n  padding: 0;\n  font-size: 0.9em;\n}\n\n/* 行内代码 */\n.markdown-content :deep(p > code),\n.html-content :deep(p > code) {\n  background: #edf2f7;\n  color: #c53030;\n  padding: 0.2em 0.4em;\n  border-radius: 4px;\n  font-size: 0.9em;\n}\n\n/* 引用块 */\n.markdown-content :deep(blockquote),\n.html-content :deep(blockquote) {\n  border-left: 4px solid #4299e1;\n  background: #ebf8ff;\n  color: #2b6cb0;\n  padding: 1rem 1.5rem;\n  margin: 1.5rem 0;\n  border-radius: 0 4px 4px 0;\n}\n\n/* 表格样式 */\n.markdown-content :deep(table),\n.html-content :deep(table) {\n  width: 100%;\n  margin: 1.5rem 0;\n  border-collapse: collapse;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.markdown-content :deep(th),\n.markdown-content :deep(td),\n.html-content :deep(th),\n.html-content :deep(td) {\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1rem;\n  text-align: left;\n}\n\n.markdown-content :deep(th),\n.html-content :deep(th) {\n  background: #f7fafc;\n  font-weight: 600;\n  color: #2d3748;\n}\n\n/* 列表样式 */\n.markdown-content :deep(ul),\n.markdown-content :deep(ol),\n.html-content :deep(ul),\n.html-content :deep(ol) {\n  margin: 1.5rem 0;\n  padding-left: 2rem;\n}\n\n.markdown-content :deep(li),\n.html-content :deep(li) {\n  margin: 0.5rem 0;\n  color: #4a5568;\n}\n\n/* 链接样式 */\n.markdown-content :deep(a),\n.html-content :deep(a) {\n  color: #4299e1;\n  text-decoration: none;\n  font-weight: 500;\n  transition: all 0.2s;\n}\n\n.markdown-content :deep(a:hover),\n.html-content :deep(a:hover) {\n  color: #2b6cb0;\n  text-decoration: underline;\n}\n\n/* 图片样式 */\n.markdown-content :deep(img),\n.html-content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  border-radius: 6px;\n  margin: 1.5rem auto;\n  display: block;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* LeetCode 特定样式 */\n.html-content :deep(.example-block) {\n  background: #f0f9ff;\n  border-left: 3px solid #63b3ed;\n  padding: 1.2rem;\n  margin: 1.8rem 0;\n  border-radius: 0 6px 6px 0;\n}\n\n.html-content :deep(.example-block h3) {\n  margin-top: 0;\n  color: #2c5282;\n}\n\n.html-content :deep(.table-responsive) {\n  overflow-x: auto;\n  margin: 1.8rem 0;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n/* 对话框样式优化 */\n.el-dialog {\n  border-radius: 12px;\n  max-width: 500px;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.8rem;\n  margin-top: 1.5rem;\n}\n\n/* 响应式设计 */\n@media (max-width: 1024px) {\n  .question-content {\n    grid-template-columns: 1fr;\n  }\n  \n  .right-section {\n    position: static;\n  }\n}\n\n@media (max-width: 768px) {\n  .page-container {\n    padding: 1rem;\n  }\n  \n  .action-buttons {\n    /* 保持水平排列 */\n    display: flex;\n    flex-wrap: wrap;\n  }\n  \n  .question-description-card,\n  .question-info-card,\n  .question-tags-card {\n    padding: 1.2rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .action-buttons {\n    flex-direction: column;\n  }\n  \n  .action-buttons .el-button {\n    width: 100%;\n  }\n}\n\n/* 动画效果 */\n.el-card,\n.el-button,\n.el-tag {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f5f9;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #cbd5e0;\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #a0aec0;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}