{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport AppHeader from '@/components/AppHeader.vue';\nimport { getDraftList } from '@/api/solution';\nimport { getQuestionDetail } from '@/api/question';\nimport { LeetcodeTags } from '@/constants/tags';\nexport default {\n  name: 'DraftView',\n  components: {\n    AppHeader\n  },\n  data() {\n    return {\n      solutions: [],\n      loading: true,\n      total: 0,\n      currentPage: 1,\n      pageSize: 12,\n      // 每页显示的题解数量\n      searchQuery: '',\n      selectedLanguage: '',\n      questionDetails: {},\n      // 存储题目详细信息\n      detailsLoading: {},\n      // 跟踪各题目详情的加载状态\n\n      // 预设语言选项\n      languageOptions: [{\n        value: 'Python',\n        label: 'Python'\n      }, {\n        value: 'Java',\n        label: 'Java'\n      }, {\n        value: 'C++',\n        label: 'C++'\n      }, {\n        value: 'JavaScript',\n        label: 'JavaScript'\n      }, {\n        value: 'Go',\n        label: 'Go'\n      }, {\n        value: 'Rust',\n        label: 'Rust'\n      }, {\n        value: 'C#',\n        label: 'C#'\n      }, {\n        value: 'Ruby',\n        label: 'Ruby'\n      }, {\n        value: 'Swift',\n        label: 'Swift'\n      }, {\n        value: 'Kotlin',\n        label: 'Kotlin'\n      }],\n      // 语言名称到API参数的映射\n      languageParamMap: {\n        'c++': 'cpp',\n        'c#': 'csharp'\n      },\n      // 语言API参数到显示名称的映射\n      languageDisplayMap: {\n        'cpp': 'C++',\n        'csharp': 'C#'\n      },\n      // 平台映射\n      platformMap: {\n        luogu: '洛谷',\n        leetcode: 'LeetCode'\n      },\n      // LeetCode标签列表\n      leetcodeTags: LeetcodeTags\n    };\n  },\n  created() {\n    this.fetchSolutions();\n  },\n  methods: {\n    // 获取题解列表\n    async fetchSolutions() {\n      this.loading = true;\n      try {\n        // 构建查询参数\n        const params = {\n          page: this.currentPage\n        };\n\n        // 仅当有值时才添加可选参数\n        if (this.searchQuery.trim()) {\n          params.question_id = this.searchQuery.trim();\n        }\n\n        // 处理语言参数，转换为小写并应用映射\n        if (this.selectedLanguage) {\n          const languageParam = this.selectedLanguage.toLowerCase();\n          // 检查是否需要特殊映射（如 c++ -> cpp）\n          params.language = this.languageParamMap[languageParam] || languageParam;\n        }\n\n        // 调用API\n        const response = await getDraftList(params);\n\n        // 检查响应格式\n        if (response.data) {\n          // 直接使用response.data作为数据源，适应不同的API响应格式\n          if (Array.isArray(response.data)) {\n            // 如果是数组，表示直接返回了项目列表\n            this.solutions = response.data;\n            this.total = response.data.length;\n          } else if (response.data.code === 200 && response.data.data) {\n            // 如果是带有code的标准格式\n            if (Array.isArray(response.data.data)) {\n              this.solutions = response.data.data;\n              this.total = response.data.data.length;\n            } else if (response.data.data.items) {\n              this.solutions = response.data.data.items || [];\n              this.total = response.data.data.total || this.solutions.length;\n            } else {\n              this.solutions = [];\n              this.total = 0;\n            }\n          } else {\n            // 其他情况，尝试解析各种可能的格式\n            this.solutions = response.data.items || response.data.results || response.data.data || [];\n            this.total = response.data.total || response.data.count || this.solutions.length || 0;\n          }\n        } else {\n          this.solutions = [];\n          this.total = 0;\n        }\n\n        // 获取题目详情\n        this.fetchQuestionDetails();\n      } catch (error) {\n        this.$message.error('获取草稿列表失败: ' + (error.message || '未知错误'));\n\n        // 在开发环境下使用模拟数据\n        if (process.env.NODE_ENV === 'development') {\n          this.useMockData();\n        } else {\n          this.solutions = [];\n          this.total = 0;\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 获取题目详情\n    async fetchQuestionDetails() {\n      // 获取唯一题目ID列表\n      const questionIds = [...new Set(this.solutions.map(solution => solution.question_id))];\n\n      // 为每个题目ID获取详情\n      for (const id of questionIds) {\n        // 避免重复请求\n        if (this.questionDetails[id] || this.detailsLoading[id]) {\n          continue;\n        }\n\n        // 标记为加载中\n        this.detailsLoading[id] = true;\n        try {\n          const response = await getQuestionDetail(id);\n          if (response.data && response.data.code === 200) {\n            // 如果返回标准格式\n            this.questionDetails[id] = response.data.data;\n          } else if (response.data) {\n            // 处理其他可能的响应格式\n            this.questionDetails[id] = response.data;\n          }\n        } catch (error) {\n          // 在开发模式下使用模拟数据\n          if (process.env.NODE_ENV === 'development') {\n            this.questionDetails[id] = {\n              id: id,\n              name: `模拟题目 #${id}`,\n              oj_platform: ['leetcode', 'luogu'][Math.floor(Math.random() * 2)],\n              algorithm_tags: ['数组', '动态规划', 'Algorithm_贪心', 'Source_CSP']\n            };\n          }\n        } finally {\n          this.detailsLoading[id] = false;\n        }\n      }\n    },\n    // 开发阶段使用模拟数据\n    useMockData() {\n      this.solutions = [{\n        id: 1,\n        question_id: '101',\n        content: '# 解题思路\\n\\n这道题可以使用动态规划来解决...',\n        content_text: '解题思路\\n\\n这道题可以使用动态规划来解决，我们定义dp[i]表示到达第i个台阶的方法数，则dp[i] = dp[i-1] + dp[i-2]。边界条件是dp[1]=1, dp[2]=2...',\n        language: 'Python',\n        created_at: '2025-05-01T10:30:00Z',\n        updated_at: '2025-05-01T10:30:00Z'\n      }, {\n        id: 2,\n        question_id: '102',\n        content: '# 双指针解法\\n\\n使用双指针技巧，可以在O(n)时间内解决...',\n        content_text: '双指针解法\\n\\n使用双指针技巧，可以在O(n)时间内解决这个问题。首先初始化左指针left=0和右指针right=n-1，然后向中间移动...',\n        language: 'Java',\n        created_at: '2025-04-28T15:20:00Z',\n        updated_at: '2025-04-29T09:15:00Z'\n      }, {\n        id: 3,\n        question_id: '103',\n        content: '# 二分查找\\n\\n对于有序数组，二分查找是最优选择...',\n        content_text: '二分查找\\n\\n对于有序数组，二分查找是最优选择。时间复杂度为O(log n)，远优于线性搜索...',\n        language: 'C++',\n        created_at: '2025-04-25T20:10:00Z',\n        updated_at: '2025-04-25T20:10:00Z'\n      }];\n      this.total = this.solutions.length;\n\n      // 在开发环境中添加模拟的题目详情\n      this.questionDetails = {\n        '101': {\n          id: '101',\n          name: '爬楼梯',\n          difficulty: '简单',\n          oj_platform: 'leetcode',\n          algorithm_tags: ['动态规划', '数学', '记忆化']\n        },\n        '102': {\n          id: '102',\n          name: '两数之和',\n          difficulty: '简单',\n          oj_platform: 'leetcode',\n          algorithm_tags: ['数组', '哈希表']\n        },\n        '103': {\n          id: '103',\n          name: '二分查找',\n          difficulty: '普及-',\n          oj_platform: 'luogu',\n          algorithm_tags: ['Algorithm_二分查找', 'Source_CSP', 'Region_中国']\n        }\n      };\n    },\n    // 获取规范化后的语言名称（用于CSS类名）\n    getNormalizedLanguage(language) {\n      if (!language) return '';\n\n      // 转为小写\n      const lowercased = language.toLowerCase();\n\n      // 特殊处理，比如将 'cpp' 转为 'c++'\n      const reverseMap = {\n        'cpp': 'c++',\n        'csharp': 'c#'\n      };\n      return reverseMap[lowercased] || lowercased;\n    },\n    // 获取显示用的语言名称\n    getDisplayLanguage(language) {\n      if (!language) return '';\n\n      // 转为小写\n      const lowercased = language.toLowerCase();\n\n      // 从特殊映射中获取显示名称\n      if (this.languageDisplayMap[lowercased]) {\n        return this.languageDisplayMap[lowercased];\n      }\n\n      // 首字母大写\n      return language.charAt(0).toUpperCase() + language.slice(1);\n    },\n    // 获取题解预览文本\n    getSolutionPreview(content) {\n      if (!content) return '无预览内容';\n\n      // 移除Markdown标记，限制长度\n      const plainText = content.replace(/#{1,6}\\s/g, '').replace(/\\*\\*|\\*|~~|`|>/g, '');\n      return plainText.length > 100 ? plainText.substring(0, 100) + '...' : plainText;\n    },\n    // 格式化日期\n    formatDate(dateString) {\n      if (!dateString) return '未知时间';\n      const date = new Date(dateString);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    },\n    // 处理页面变化\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.fetchSolutions();\n      // 滚动到页面顶部\n      window.scrollTo(0, 0);\n    },\n    // 处理搜索\n    handleSearch() {\n      this.currentPage = 1; // 重置到第一页\n      this.fetchSolutions();\n    },\n    // 处理语言筛选变化\n    handleLanguageChange() {\n      this.currentPage = 1; // 重置到第一页\n      this.fetchSolutions();\n    },\n    // 重置所有筛选条件\n    resetFilters() {\n      this.searchQuery = '';\n      this.selectedLanguage = '';\n      this.currentPage = 1;\n      this.fetchSolutions();\n    },\n    // 获取空状态消息\n    getEmptyStateMessage() {\n      if (this.searchQuery && this.selectedLanguage) {\n        return `没有找到关于题目 #${this.searchQuery} 的 ${this.selectedLanguage} 语言草稿`;\n      } else if (this.searchQuery) {\n        return `没有找到关于题目 #${this.searchQuery} 的草稿`;\n      } else if (this.selectedLanguage) {\n        return `没有找到使用 ${this.selectedLanguage} 语言的草稿`;\n      }\n      return '暂时没有任何草稿，开始编写你的第一个解题思路吧！';\n    },\n    // 查看草稿详情\n    viewDraftDetail(draftId) {\n      this.$router.push(`/${draftId}/drafts`);\n    },\n    // 跳转到题目页面\n    goToProblem(questionId) {\n      this.$router.push(`/${questionId}/problems`);\n    },\n    // 获取平台名称\n    getPlatformName(platform) {\n      return this.platformMap[platform] || platform;\n    },\n    // 平台标签样式\n    getPlatformTagType(platform) {\n      return {\n        luogu: 'success',\n        leetcode: 'warning'\n      }[platform] || 'info';\n    },\n    // 标签分类过滤\n    getFilteredTags(tags, platform) {\n      if (!tags) return [];\n\n      // 默认只显示少量标签，避免卡片过大\n      const maxTagsToShow = 3;\n\n      // LeetCode题目只显示算法标签\n      if (platform === 'leetcode') {\n        return tags.filter(tag => this.leetcodeTags.includes(tag)).slice(0, maxTagsToShow);\n      }\n\n      // 洛谷题目优先显示算法标签\n      const algorithmTags = tags.filter(tag => tag.startsWith('Algorithm_'));\n      if (algorithmTags.length > 0) {\n        return algorithmTags.slice(0, maxTagsToShow);\n      }\n      return tags.slice(0, maxTagsToShow);\n    },\n    // 获取标签名称（去掉前缀）\n    getTagName(tag) {\n      // LeetCode标签已经是纯名称\n      if (this.leetcodeTags.includes(tag)) return tag;\n\n      // 洛谷标签去掉前缀\n      return tag.split('_').slice(1).join('_') || tag;\n    },\n    // 标签样式分类\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary';\n\n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0];\n      return {\n        'Algorithm': 'primary',\n        // 算法 - 蓝色\n        'Source': 'success',\n        // 来源 - 绿色\n        'Time': 'warning',\n        // 时间 - 黄色\n        'Region': 'danger',\n        // 地区 - 红色\n        'Other': 'info' // 其他 - 灰色\n      }[prefix] || 'info';\n    }\n  }\n};","map":{"version":3,"names":["AppHeader","getDraftList","getQuestionDetail","LeetcodeTags","name","components","data","solutions","loading","total","currentPage","pageSize","searchQuery","selectedLanguage","questionDetails","detailsLoading","languageOptions","value","label","languageParamMap","languageDisplayMap","platformMap","luogu","leetcode","leetcodeTags","created","fetchSolutions","methods","params","page","trim","question_id","languageParam","toLowerCase","language","response","Array","isArray","length","code","items","results","count","fetchQuestionDetails","error","$message","message","process","env","NODE_ENV","useMockData","questionIds","Set","map","solution","id","oj_platform","Math","floor","random","algorithm_tags","content","content_text","created_at","updated_at","difficulty","getNormalizedLanguage","lowercased","reverseMap","getDisplayLanguage","charAt","toUpperCase","slice","getSolutionPreview","plainText","replace","substring","formatDate","dateString","date","Date","getFullYear","String","getMonth","padStart","getDate","handlePageChange","window","scrollTo","handleSearch","handleLanguageChange","resetFilters","getEmptyStateMessage","viewDraftDetail","draftId","$router","push","goToProblem","questionId","getPlatformName","platform","getPlatformTagType","getFilteredTags","tags","maxTagsToShow","filter","tag","includes","algorithmTags","startsWith","getTagName","split","join","getTagType","prefix"],"sources":["/Users/hsd/File/Code/Project/AlgorithmWeb/algorithmFrontend/src/views/DraftsView.vue"],"sourcesContent":["<template>\n  <div class=\"solutions-view\">\n    <AppHeader />\n    <main class=\"page-container\">\n      <div class=\"solutions-header\">\n        <h1>草稿箱</h1>\n        <p class=\"solutions-subtitle\">管理你的解题思路草稿，随时继续编辑</p>\n        \n        <!-- 搜索和筛选区域 -->\n        <div class=\"filter-container\">\n          <div class=\"search-box\">\n            <el-input\n              v-model=\"searchQuery\"\n              placeholder=\"输入题目ID进行搜索\"\n              prefix-icon=\"el-icon-search\"\n              clearable\n              @keyup.enter=\"handleSearch\"\n            >\n              <template #append>\n                <el-button @click=\"handleSearch\">搜索</el-button>\n              </template>\n            </el-input>\n          </div>\n          \n          <div class=\"language-filter\">\n            <el-select\n              v-model=\"selectedLanguage\"\n              placeholder=\"编程语言筛选\"\n              clearable\n              @change=\"handleLanguageChange\"\n            >\n              <el-option\n                v-for=\"lang in languageOptions\"\n                :key=\"lang.value\"\n                :label=\"lang.label\"\n                :value=\"lang.value\"\n              >\n                <span class=\"language-icon\" :class=\"'lang-' + lang.value.toLowerCase()\"></span>\n                {{ lang.label }}\n              </el-option>\n            </el-select>\n          </div>\n        </div>\n      </div>\n      \n      <!-- 内容展示区 -->\n      <div class=\"content-area\">\n        <div v-if=\"loading\" class=\"loading-container\">\n          <el-skeleton :rows=\"10\" animated />\n        </div>\n        \n        <div v-else-if=\"solutions.length === 0\" class=\"empty-state\">\n          <div class=\"empty-icon\">\n            <i class=\"el-icon-document\"></i>\n          </div>\n          <h3>暂无草稿</h3>\n          <p>{{ getEmptyStateMessage() }}</p>\n          <el-button type=\"primary\" @click=\"resetFilters\">清除筛选条件</el-button>\n        </div>\n        \n        <transition-group \n          name=\"solution-list\" \n          tag=\"div\" \n          class=\"solutions-grid\"\n          v-else\n        >\n          <div \n            v-for=\"solution in solutions\" \n            :key=\"solution.id\" \n            class=\"solution-card\"\n            @click=\"viewDraftDetail(solution.id)\"\n          >\n            <div class=\"solution-card-header\">\n              <div class=\"header-left-section\">\n                <div class=\"problem-id-highlight\">\n                  #{{ solution.question_id }}\n                </div>\n                <div v-if=\"questionDetails[solution.question_id]?.oj_platform\" class=\"platform-tag\">\n                  <el-tag \n                    :type=\"getPlatformTagType(questionDetails[solution.question_id]?.oj_platform)\" \n                    size=\"small\"\n                  >\n                    {{ getPlatformName(questionDetails[solution.question_id]?.oj_platform) }}\n                  </el-tag>\n                </div>\n              </div>\n              <div class=\"language-tag\" :class=\"'lang-bg-' + getNormalizedLanguage(solution.language)\">\n                {{ getDisplayLanguage(solution.language) }}\n              </div>\n            </div>\n            \n            <div class=\"solution-card-content\">\n              <h3 class=\"solution-title\" @click.stop=\"goToProblem(solution.question_id)\">\n                <span v-if=\"questionDetails[solution.question_id]\">\n                  {{ questionDetails[solution.question_id].name || `题目 #${solution.question_id}` }}\n                </span>\n                <span v-else>\n                  <span v-if=\"detailsLoading[solution.question_id]\">加载中...</span>\n                  <span v-else>题目 #{{ solution.question_id }}</span>\n                </span>\n                <i class=\"el-icon-link\"></i>\n              </h3>\n              \n              <!-- 算法标签区域 -->\n              <div class=\"tags-container\" v-if=\"questionDetails[solution.question_id]?.algorithm_tags?.length\">\n                <div class=\"tag-container\">\n                  <el-tag\n                    v-for=\"tag in getFilteredTags(\n                      questionDetails[solution.question_id].algorithm_tags,\n                      questionDetails[solution.question_id].oj_platform\n                    )\"\n                    :key=\"tag\"\n                    :type=\"getTagType(tag, questionDetails[solution.question_id].oj_platform)\"\n                    size=\"small\"\n                    class=\"tag-item\"\n                  >\n                    {{ getTagName(tag) }}\n                  </el-tag>\n                </div>\n              </div>\n              \n              <div class=\"solution-preview\">\n                {{ getSolutionPreview(solution.content_text) }}\n              </div>\n            </div>\n            \n            <div class=\"solution-card-footer\">\n              <div class=\"solution-meta\">\n                <span class=\"solution-date\">\n                  <i class=\"el-icon-time\"></i>\n                  {{ formatDate(solution.updated_at || solution.created_at) }}\n                </span>\n              </div>\n              <el-button size=\"small\" type=\"text\">查看全文</el-button>\n            </div>\n          </div>\n        </transition-group>\n        \n        <!-- 分页控件 -->\n        <div class=\"pagination-container\" v-if=\"total > 0\">\n          <el-pagination\n            background\n            layout=\"prev, pager, next, jumper\"\n            :total=\"total\"\n            :page-size=\"pageSize\"\n            v-model:current-page=\"currentPage\"\n            @current-change=\"handlePageChange\"\n          ></el-pagination>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\nimport AppHeader from '@/components/AppHeader.vue'\nimport { getDraftList } from '@/api/solution'\nimport { getQuestionDetail } from '@/api/question'\nimport { LeetcodeTags } from '@/constants/tags'\nexport default {\n  name: 'DraftView',\n  components: {\n    AppHeader\n  },\n  data() {\n    return {\n      solutions: [],\n      loading: true,\n      total: 0,\n      currentPage: 1,\n      pageSize: 12, // 每页显示的题解数量\n      searchQuery: '',\n      selectedLanguage: '',\n      questionDetails: {}, // 存储题目详细信息\n      detailsLoading: {}, // 跟踪各题目详情的加载状态\n      \n      // 预设语言选项\n      languageOptions: [\n        { value: 'Python', label: 'Python' },\n        { value: 'Java', label: 'Java' },\n        { value: 'C++', label: 'C++' },\n        { value: 'JavaScript', label: 'JavaScript' },\n        { value: 'Go', label: 'Go' },\n        { value: 'Rust', label: 'Rust' },\n        { value: 'C#', label: 'C#' },\n        { value: 'Ruby', label: 'Ruby' },\n        { value: 'Swift', label: 'Swift' },\n        { value: 'Kotlin', label: 'Kotlin' }\n      ],\n      \n      // 语言名称到API参数的映射\n      languageParamMap: {\n        'c++': 'cpp',\n        'c#': 'csharp'\n      },\n      \n      // 语言API参数到显示名称的映射\n      languageDisplayMap: {\n        'cpp': 'C++',\n        'csharp': 'C#'\n      },\n      \n      // 平台映射\n      platformMap: {\n        luogu: '洛谷',\n        leetcode: 'LeetCode'\n      },\n      \n      // LeetCode标签列表\n      leetcodeTags : LeetcodeTags\n    }\n  },\n  created() {\n    this.fetchSolutions()\n  },\n  methods: {\n    // 获取题解列表\n    async fetchSolutions() {\n      this.loading = true\n      \n      try {\n        // 构建查询参数\n        const params = {\n          page: this.currentPage\n        }\n        \n        // 仅当有值时才添加可选参数\n        if (this.searchQuery.trim()) {\n          params.question_id = this.searchQuery.trim()\n        }\n        \n        // 处理语言参数，转换为小写并应用映射\n        if (this.selectedLanguage) {\n          const languageParam = this.selectedLanguage.toLowerCase()\n          // 检查是否需要特殊映射（如 c++ -> cpp）\n          params.language = this.languageParamMap[languageParam] || languageParam\n        }\n        \n        // 调用API\n        const response = await getDraftList(params)\n        \n        // 检查响应格式\n        if (response.data) {\n          // 直接使用response.data作为数据源，适应不同的API响应格式\n          if (Array.isArray(response.data)) {\n            // 如果是数组，表示直接返回了项目列表\n            this.solutions = response.data\n            this.total = response.data.length\n          } else if (response.data.code === 200 && response.data.data) {\n            // 如果是带有code的标准格式\n            if (Array.isArray(response.data.data)) {\n              this.solutions = response.data.data\n              this.total = response.data.data.length\n            } else if (response.data.data.items) {\n              this.solutions = response.data.data.items || []\n              this.total = response.data.data.total || this.solutions.length\n            } else {\n              this.solutions = []\n              this.total = 0\n            }\n          } else {\n            // 其他情况，尝试解析各种可能的格式\n            this.solutions = response.data.items || response.data.results || response.data.data || []\n            this.total = response.data.total || response.data.count || this.solutions.length || 0\n          }\n        } else {\n          this.solutions = []\n          this.total = 0\n        }\n        \n        // 获取题目详情\n        this.fetchQuestionDetails()\n      } catch (error) {\n        this.$message.error('获取草稿列表失败: ' + (error.message || '未知错误'))\n        \n        // 在开发环境下使用模拟数据\n        if (process.env.NODE_ENV === 'development') {\n          this.useMockData()\n        } else {\n          this.solutions = []\n          this.total = 0\n        }\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    // 获取题目详情\n    async fetchQuestionDetails() {\n      // 获取唯一题目ID列表\n      const questionIds = [...new Set(this.solutions.map(solution => solution.question_id))]\n      \n      // 为每个题目ID获取详情\n      for (const id of questionIds) {\n        // 避免重复请求\n        if (this.questionDetails[id] || this.detailsLoading[id]) {\n          continue\n        }\n        \n        // 标记为加载中\n        this.detailsLoading[id] = true\n        \n        try {\n          const response = await getQuestionDetail(id)\n          \n          if (response.data && response.data.code === 200) {\n            // 如果返回标准格式\n            this.questionDetails[id] = response.data.data\n          } else if (response.data) {\n            // 处理其他可能的响应格式\n            this.questionDetails[id] = response.data\n          }\n        } catch (error) {\n          // 在开发模式下使用模拟数据\n          if (process.env.NODE_ENV === 'development') {\n            this.questionDetails[id] = {\n              id: id,\n              name: `模拟题目 #${id}`,\n              oj_platform: ['leetcode', 'luogu'][Math.floor(Math.random() * 2)],\n              algorithm_tags: ['数组', '动态规划', 'Algorithm_贪心', 'Source_CSP']\n            }\n          }\n        } finally {\n          this.detailsLoading[id] = false\n        }\n      }\n    },\n    \n    // 开发阶段使用模拟数据\n    useMockData() {\n      this.solutions = [\n        {\n          id: 1,\n          question_id: '101',\n          content: '# 解题思路\\n\\n这道题可以使用动态规划来解决...',\n          content_text: '解题思路\\n\\n这道题可以使用动态规划来解决，我们定义dp[i]表示到达第i个台阶的方法数，则dp[i] = dp[i-1] + dp[i-2]。边界条件是dp[1]=1, dp[2]=2...',\n          language: 'Python',\n          created_at: '2025-05-01T10:30:00Z',\n          updated_at: '2025-05-01T10:30:00Z'\n        },\n        {\n          id: 2,\n          question_id: '102',\n          content: '# 双指针解法\\n\\n使用双指针技巧，可以在O(n)时间内解决...',\n          content_text: '双指针解法\\n\\n使用双指针技巧，可以在O(n)时间内解决这个问题。首先初始化左指针left=0和右指针right=n-1，然后向中间移动...',\n          language: 'Java',\n          created_at: '2025-04-28T15:20:00Z',\n          updated_at: '2025-04-29T09:15:00Z'\n        },\n        {\n          id: 3,\n          question_id: '103',\n          content: '# 二分查找\\n\\n对于有序数组，二分查找是最优选择...',\n          content_text: '二分查找\\n\\n对于有序数组，二分查找是最优选择。时间复杂度为O(log n)，远优于线性搜索...',\n          language: 'C++',\n          created_at: '2025-04-25T20:10:00Z',\n          updated_at: '2025-04-25T20:10:00Z'\n        }\n      ]\n      this.total = this.solutions.length\n      \n      // 在开发环境中添加模拟的题目详情\n      this.questionDetails = {\n        '101': {\n          id: '101',\n          name: '爬楼梯',\n          difficulty: '简单',\n          oj_platform: 'leetcode',\n          algorithm_tags: ['动态规划', '数学', '记忆化']\n        },\n        '102': {\n          id: '102',\n          name: '两数之和',\n          difficulty: '简单',\n          oj_platform: 'leetcode',\n          algorithm_tags: ['数组', '哈希表']\n        },\n        '103': {\n          id: '103',\n          name: '二分查找',\n          difficulty: '普及-',\n          oj_platform: 'luogu',\n          algorithm_tags: ['Algorithm_二分查找', 'Source_CSP', 'Region_中国']\n        }\n      }\n    },\n    \n    // 获取规范化后的语言名称（用于CSS类名）\n    getNormalizedLanguage(language) {\n      if (!language) return '';\n      \n      // 转为小写\n      const lowercased = language.toLowerCase();\n      \n      // 特殊处理，比如将 'cpp' 转为 'c++'\n      const reverseMap = {\n        'cpp': 'c++',\n        'csharp': 'c#'\n      };\n      \n      return reverseMap[lowercased] || lowercased;\n    },\n    \n    // 获取显示用的语言名称\n    getDisplayLanguage(language) {\n      if (!language) return '';\n      \n      // 转为小写\n      const lowercased = language.toLowerCase();\n      \n      // 从特殊映射中获取显示名称\n      if (this.languageDisplayMap[lowercased]) {\n        return this.languageDisplayMap[lowercased];\n      }\n      \n      // 首字母大写\n      return language.charAt(0).toUpperCase() + language.slice(1);\n    },\n    \n    // 获取题解预览文本\n    getSolutionPreview(content) {\n      if (!content) return '无预览内容'\n      \n      // 移除Markdown标记，限制长度\n      const plainText = content\n        .replace(/#{1,6}\\s/g, '')\n        .replace(/\\*\\*|\\*|~~|`|>/g, '')\n      \n      return plainText.length > 100 \n        ? plainText.substring(0, 100) + '...' \n        : plainText\n    },\n    \n    // 格式化日期\n    formatDate(dateString) {\n      if (!dateString) return '未知时间'\n      \n      const date = new Date(dateString)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`\n    },\n    \n    // 处理页面变化\n    handlePageChange(page) {\n      this.currentPage = page\n      this.fetchSolutions()\n      // 滚动到页面顶部\n      window.scrollTo(0, 0)\n    },\n    \n    // 处理搜索\n    handleSearch() {\n      this.currentPage = 1 // 重置到第一页\n      this.fetchSolutions()\n    },\n    \n    // 处理语言筛选变化\n    handleLanguageChange() {\n      this.currentPage = 1 // 重置到第一页\n      this.fetchSolutions()\n    },\n    \n    // 重置所有筛选条件\n    resetFilters() {\n      this.searchQuery = ''\n      this.selectedLanguage = ''\n      this.currentPage = 1\n      this.fetchSolutions()\n    },\n    \n    // 获取空状态消息\n    getEmptyStateMessage() {\n      if (this.searchQuery && this.selectedLanguage) {\n        return `没有找到关于题目 #${this.searchQuery} 的 ${this.selectedLanguage} 语言草稿`\n      } else if (this.searchQuery) {\n        return `没有找到关于题目 #${this.searchQuery} 的草稿`\n      } else if (this.selectedLanguage) {\n        return `没有找到使用 ${this.selectedLanguage} 语言的草稿`\n      }\n      return '暂时没有任何草稿，开始编写你的第一个解题思路吧！'\n    },\n    \n    // 查看草稿详情\n    viewDraftDetail(draftId) {\n      this.$router.push(`/${draftId}/drafts`)\n    },\n    \n    // 跳转到题目页面\n    goToProblem(questionId) {\n      this.$router.push(`/${questionId}/problems`)\n    },\n    \n    // 获取平台名称\n    getPlatformName(platform) {\n      return this.platformMap[platform] || platform\n    },\n    \n    // 平台标签样式\n    getPlatformTagType(platform) {\n      return {\n        luogu: 'success',\n        leetcode: 'warning'\n      }[platform] || 'info'\n    },\n    \n    // 标签分类过滤\n    getFilteredTags(tags, platform) {\n      if (!tags) return []\n      \n      // 默认只显示少量标签，避免卡片过大\n      const maxTagsToShow = 3\n      \n      // LeetCode题目只显示算法标签\n      if (platform === 'leetcode') {\n        return tags.filter(tag => this.leetcodeTags.includes(tag)).slice(0, maxTagsToShow)\n      }\n      \n      // 洛谷题目优先显示算法标签\n      const algorithmTags = tags.filter(tag => tag.startsWith('Algorithm_'))\n      if (algorithmTags.length > 0) {\n        return algorithmTags.slice(0, maxTagsToShow)\n      }\n      \n      return tags.slice(0, maxTagsToShow)\n    },\n    \n    // 获取标签名称（去掉前缀）\n    getTagName(tag) {\n      // LeetCode标签已经是纯名称\n      if (this.leetcodeTags.includes(tag)) return tag\n      \n      // 洛谷标签去掉前缀\n      return tag.split('_').slice(1).join('_') || tag\n    },\n    \n    // 标签样式分类\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary'\n      \n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0]\n      return {\n        'Algorithm': 'primary',  // 算法 - 蓝色\n        'Source': 'success',     // 来源 - 绿色\n        'Time': 'warning',       // 时间 - 黄色\n        'Region': 'danger',      // 地区 - 红色\n        'Other': 'info'          // 其他 - 灰色\n      }[prefix] || 'info'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.solutions-view {\n  min-height: 100vh;\n  background-color: #f8f9fc;\n}\n\n.page-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 30px 20px;\n}\n\n.solutions-header {\n  margin-bottom: 30px;\n  text-align: center;\n}\n\n.solutions-header h1 {\n  font-size: 2.5rem;\n  color: #2c3e50;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.solutions-subtitle {\n  color: #606f7b;\n  font-size: 1.1rem;\n  margin-bottom: 30px;\n}\n\n.filter-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 16px;\n  margin-bottom: 30px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.search-box {\n  flex: 1;\n  min-width: 280px;\n}\n\n.language-filter {\n  width: 200px;\n}\n\n.content-area {\n  position: relative;\n  min-height: 400px;\n}\n\n.loading-container {\n  padding: 20px;\n}\n\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 60px 20px;\n  text-align: center;\n}\n\n.empty-icon {\n  font-size: 60px;\n  color: #dce0e6;\n  margin-bottom: 20px;\n}\n\n.empty-state h3 {\n  font-size: 20px;\n  color: #606266;\n  margin-bottom: 10px;\n}\n\n.empty-state p {\n  color: #909399;\n  margin-bottom: 20px;\n  max-width: 500px;\n}\n\n.solutions-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 40px;\n}\n\n.solution-card {\n  background-color: #fff;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);\n  transition: all 0.3s ease;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.solution-card:hover {\n  box-shadow: 0 4px 20px 0 rgba(0, 0, 0, 0.09);\n  transform: translateY(-3px);\n}\n\n.solution-card-header {\n  padding: 12px 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f8f9fa;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n/* Header layout styles */\n.header-left-section {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.problem-id-highlight {\n  background-color: #4caf50;\n  color: white;\n  padding: 2px 8px;\n  border-radius: 4px;\n  font-weight: bold;\n  font-size: 0.9rem;\n  min-width: 40px;\n  text-align: center;\n}\n\n.platform-tag {\n  font-weight: 600;\n  color: #606266;\n  font-size: 0.9rem;\n}\n\n.language-tag {\n  padding: 2px 8px;\n  border-radius: 4px;\n  color: white;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n/* 不同语言的背景色 */\n.lang-bg-python {\n  background-color: #3776ab;\n}\n\n.lang-bg-java {\n  background-color: #f89820;\n}\n\n.lang-bg-c\\+\\+ {\n  background-color: #00599c;\n}\n\n.lang-bg-javascript {\n  background-color: #f7df1e;\n  color: #000;\n}\n\n.lang-bg-go {\n  background-color: #00acd7;\n}\n\n.lang-bg-rust {\n  background-color: #b7410e;\n}\n\n.lang-bg-c\\# {\n  background-color: #68217a;\n}\n\n.lang-bg-ruby {\n  background-color: #cc342d;\n}\n\n.lang-bg-swift {\n  background-color: #f05138;\n}\n\n.lang-bg-kotlin {\n  background-color: #7f52ff;\n}\n\n/* 其他语言使用默认颜色 */\n[class*=\"lang-bg-\"]:not(\n  .lang-bg-python,\n  .lang-bg-java,\n  .lang-bg-c\\+\\+,\n  .lang-bg-javascript,\n  .lang-bg-go,\n  .lang-bg-rust,\n  .lang-bg-c\\#,\n  .lang-bg-ruby,\n  .lang-bg-swift,\n  .lang-bg-kotlin\n) {\n  background-color: #909399;\n}\n\n.solution-card-content {\n  padding: 16px;\n  flex-grow: 1;\n}\n\n.solution-title {\n  font-size: 1.1rem;\n  margin: 0 0 12px;\n  color: #303133;\n  display: flex;\n  align-items: center;\n  line-height: 1.4;\n}\n\n.solution-title i {\n  margin-left: 6px;\n  font-size: 14px;\n  opacity: 0.6;\n}\n\n.solution-title:hover {\n  color: #409eff;\n}\n\n.solution-title:hover i {\n  opacity: 1;\n}\n\n/* 算法标签样式 */\n.tags-container {\n  margin-bottom: 12px;\n}\n\n.tag-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n}\n\n.tag-item {\n  transition: all 0.3s;\n  font-size: 0.7rem;\n}\n\n.solution-preview {\n  color: #606266;\n  font-size: 0.95rem;\n  line-height: 1.6;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.solution-card-footer {\n  padding: 12px 16px;\n  border-top: 1px solid #f0f0f0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.solution-meta {\n  color: #909399;\n  font-size: 0.85rem;\n}\n\n.solution-date i {\n  margin-right: 4px;\n}\n\n.pagination-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 40px;\n}\n\n/* 语言图标 */\n.language-icon {\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  margin-right: 8px;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  vertical-align: middle;\n}\n\n/* 动画效果 */\n.solution-list-enter-active, .solution-list-move {\n  transition: all 0.5s ease;\n}\n\n.solution-list-enter {\n  opacity: 0;\n  transform: translateY(20px);\n}\n\n.solution-list-leave-active {\n  position: absolute;\n  opacity: 0;\n}\n\n/* 响应式调整 */\n@media (max-width: 768px) {\n  .solutions-header h1 {\n    font-size: 2rem;\n  }\n  \n  .filter-container {\n    flex-direction: column;\n  }\n  \n  .search-box, .language-filter {\n    width: 100%;\n  }\n  \n  .solutions-grid {\n    grid-template-columns: 1fr;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}