{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, unref as _unref, withKeys as _withKeys, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, withModifiers as _withModifiers, resolveDirective as _resolveDirective, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"filter-card\"\n};\nconst _hoisted_3 = {\n  class: \"search-container\"\n};\nconst _hoisted_4 = {\n  class: \"filter-header\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"selected-filters\"\n};\nconst _hoisted_6 = {\n  class: \"filter-tags\"\n};\nconst _hoisted_7 = {\n  class: \"content-wrapper\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"tag-mode-switch\"\n};\nconst _hoisted_9 = {\n  class: \"table-container\"\n};\nconst _hoisted_10 = {\n  class: \"problem-title\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"solution-count\"\n};\nconst _hoisted_12 = {\n  key: 1\n};\nconst _hoisted_13 = [\"href\"];\nconst _hoisted_14 = {\n  class: \"tag-container\"\n};\nconst _hoisted_15 = {\n  key: 1,\n  class: \"pagination-wrapper\"\n};\nconst _hoisted_16 = {\n  class: \"platform-selector\"\n};\nconst _hoisted_17 = {\n  key: 0,\n  class: \"filter-section\"\n};\nconst _hoisted_18 = {\n  class: \"tag-group\"\n};\nconst _hoisted_19 = {\n  class: \"tag-group\"\n};\nconst _hoisted_20 = {\n  key: 1,\n  class: \"filter-section\"\n};\nconst _hoisted_21 = {\n  class: \"tag-group\"\n};\nconst _hoisted_22 = {\n  class: \"tag-group\"\n};\nconst _hoisted_23 = {\n  class: \"tag-group\"\n};\nconst _hoisted_24 = {\n  class: \"tag-group\"\n};\nconst _hoisted_25 = {\n  class: \"tag-group\"\n};\nconst _hoisted_26 = {\n  class: \"tag-group\"\n};\nimport { ref, computed, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { getAllTags } from '@/api/question';\nimport { getQuestionTrashList, searchQuestionTrash } from '@/api/question';\nimport { Filter } from '@element-plus/icons-vue';\nimport { LeetcodeTags, LuoguDifficulties, LeetcodeDifficulties } from '@/constants/tags';\nimport { Search } from '@element-plus/icons-vue';\nconst pageSize = 20;\nexport default {\n  __name: 'ProblemTrashView',\n  setup(__props) {\n    const router = useRouter();\n\n    // 在setup()中添加以下响应式变量\n    const searchQuery = ref('');\n    const searchType = ref('name'); // 默认按名称搜索\n    const isSearching = ref(false);\n\n    // 数据状态\n    const loading = ref(false);\n    const problems = ref([]);\n    const currentPage = ref(1);\n    const totalCount = ref(0);\n    const tagDisplayMode = ref('algorithm');\n    const filterDialogVisible = ref(false);\n\n    // 筛选相关状态（仅用于UI展示）\n    const selectedPlatform = ref('');\n    const selectedDifficulties = ref([]);\n    const selectedTags = ref([]);\n\n    // 临时筛选状态（弹窗中使用）\n    const filterPlatform = ref('leetcode');\n    const tempDifficulties = ref([]);\n    const tempTags = ref([]);\n    const filterMode = ref('intersection'); // 默认交集\n    // 洛谷标签\n    const luoguTags = ref({\n      Algorithm: [],\n      Source: [],\n      Time: [],\n      Region: [],\n      Other: []\n    });\n\n    // 计算属性\n    const hasLuoguProblems = computed(() => {\n      return problems.value.some(p => p.oj_platform === 'luogu');\n    });\n    const hasSelectedFilters = computed(() => {\n      return selectedPlatform.value || selectedDifficulties.value.length > 0 || selectedTags.value.length > 0;\n    });\n\n    // 加载洛谷标签\n    const loadLuoguTags = async () => {\n      try {\n        const res = await getAllTags();\n        if (res.data.code === 200) {\n          luoguTags.value = res.data.data;\n        }\n      } catch (error) {\n        console.error('加载洛谷标签失败:', error);\n      }\n    };\n\n    // 显示筛选弹窗\n    const showFilterDialog = () => {\n      // 初始化弹窗中的筛选条件\n      filterPlatform.value = selectedPlatform.value || 'leetcode';\n      tempDifficulties.value = [...selectedDifficulties.value];\n      tempTags.value = [...selectedTags.value];\n      filterDialogVisible.value = true;\n    };\n\n    // 修改applyFilters函数，添加重新加载数据的逻辑\n    const applyFilters = () => {\n      selectedPlatform.value = filterPlatform.value;\n      selectedDifficulties.value = [...tempDifficulties.value];\n      selectedTags.value = [...tempTags.value];\n      filterDialogVisible.value = false;\n\n      // 重置分页并重新加载数据\n      currentPage.value = 1;\n      fetchProblems();\n    };\n\n    // 修改removeFilter函数，添加重新加载数据的逻辑\n    const removeFilter = (type, value = null) => {\n      switch (type) {\n        case 'platform':\n          selectedPlatform.value = '';\n          break;\n        case 'difficulty':\n          selectedDifficulties.value = selectedDifficulties.value.filter(d => d !== value);\n          break;\n        case 'tag':\n          selectedTags.value = selectedTags.value.filter(t => t !== value);\n          break;\n      }\n\n      // 重置分页并重新加载数据\n      currentPage.value = 1;\n      fetchProblems();\n    };\n\n    // 平台映射\n    const PLATFORM_MAP = {\n      luogu: '洛谷',\n      leetcode: 'LeetCode'\n    };\n\n    // 获取平台名称\n    const getPlatformName = platform => {\n      return PLATFORM_MAP[platform] || platform;\n    };\n\n    // 平台标签样式\n    const getPlatformTagType = platform => {\n      return {\n        luogu: 'success',\n        leetcode: 'warning'\n      }[platform] || 'info';\n    };\n\n    // 难度标签样式\n    const getDifficultyTagType = row => {\n      if (row.oj_platform === 'luogu') {\n        const levelMap = {\n          '入门': 'info',\n          '普及-': 'success',\n          '普及/提高-': 'success',\n          '普及+/提高': 'warning',\n          '提高+/省选-': 'danger',\n          '省选/NOI-': 'danger',\n          'NOI/NOI+': 'danger',\n          'CTSC': 'danger'\n        };\n        return levelMap[row.difficulty] || 'info';\n      }\n      return {\n        '简单': 'success',\n        '中等': 'warning',\n        '困难': 'danger'\n      }[row.difficulty] || 'info';\n    };\n\n    // 生成OJ题目链接\n    const generateOjLink = row => {\n      const baseUrls = {\n        luogu: `https://www.luogu.com.cn/problem/${row.ext_question_id}`,\n        leetcode: `https://leetcode.cn/problems/${row.ext_question_id}/`\n      };\n      return baseUrls[row.oj_platform] || '#';\n    };\n\n    // 标签分类过滤\n    const getFilteredTags = (tags, platform) => {\n      if (!tags) return [];\n\n      // LeetCode题目只显示算法标签\n      if (platform === 'leetcode') {\n        return tags.filter(tag => LeetcodeTags.includes(tag));\n      }\n\n      // 洛谷题目根据当前模式过滤\n      return tags.filter(tag => {\n        if (tagDisplayMode.value === 'all') return true;\n        const prefix = tag.split('_')[0];\n        switch (tagDisplayMode.value) {\n          case 'algorithm':\n            return prefix === 'Algorithm';\n          case 'source':\n            return prefix === 'Source';\n          case 'time':\n            return prefix === 'Time';\n          case 'region':\n            return prefix === 'Region';\n          case 'other':\n            return !['Algorithm', 'Source', 'Time', 'Region'].includes(prefix);\n          default:\n            return true;\n        }\n      });\n    };\n\n    // 获取标签名称（去掉前缀）\n    const getTagName = tag => {\n      // LeetCode标签已经是纯名称\n      if (LeetcodeTags.includes(tag)) return tag;\n\n      // 洛谷标签去掉前缀\n      return tag.split('_').slice(1).join('_') || tag;\n    };\n\n    // 标签样式分类\n    const getTagType = (tag, platform) => {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary';\n\n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0];\n      return {\n        'Algorithm': 'primary',\n        // 算法 - 蓝色\n        'Source': 'success',\n        // 来源 - 绿色\n        'Time': 'warning',\n        // 时间 - 黄色\n        'Region': 'danger',\n        // 地区 - 红色\n        'Other': 'info' // 其他 - 灰色\n      }[prefix] || 'info';\n    };\n    const fetchProblems = async () => {\n      try {\n        loading.value = true;\n        if (searchQuery.value.trim()) {\n          const params = {\n            page: currentPage.value,\n            page_size: pageSize,\n            [searchType.value]: searchQuery.value.trim()\n          };\n          const res = await searchQuestionTrash(params); // 使用回收站搜索接口\n          problems.value = res.data.results;\n          totalCount.value = res.data.count;\n          return;\n        }\n        const params = {\n          page: currentPage.value,\n          page_size: pageSize,\n          filter_mode: filterMode.value\n        };\n        if (selectedPlatform.value) {\n          params.platforms = selectedPlatform.value;\n        }\n        if (selectedDifficulties.value.length > 0) {\n          params.difficulties = selectedDifficulties.value.join(',');\n        }\n        if (selectedTags.value.length > 0) {\n          params.algorithm_tags = selectedTags.value.join(',');\n        }\n        const res = await getQuestionTrashList(params); // 使用回收站列表接口\n        problems.value = res.data.results;\n        totalCount.value = res.data.count;\n      } catch (error) {\n        console.error('加载回收站题目失败:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 初始化加载\n    onMounted(() => {\n      fetchProblems();\n      loadLuoguTags();\n    });\n\n    // 跳转到题目详情\n    const handleRowClick = row => {\n      router.push(`/problems/${row.id}`);\n    };\n\n    // 修改 handleSearch 方法\n    const handleSearch = async () => {\n      if (!searchQuery.value.trim()) return;\n      try {\n        isSearching.value = true;\n        loading.value = true;\n        const params = {\n          page: currentPage.value,\n          page_size: pageSize,\n          [searchType.value]: searchQuery.value.trim()\n        };\n        const res = await searchQuestionTrash(params); // 使用回收站搜索接口\n        problems.value = res.data.results;\n        totalCount.value = res.data.count;\n        selectedPlatform.value = '';\n        selectedDifficulties.value = [];\n        selectedTags.value = [];\n      } catch (error) {\n        console.error('回收站搜索失败:', error);\n      } finally {\n        loading.value = false;\n        isSearching.value = false;\n      }\n    };\n\n    // 清空搜索\n    const handleSearchClear = () => {\n      if (searchQuery.value === '') {\n        // 如果已经清空，则恢复原始列表\n        fetchProblems();\n      }\n    };\n    return (_ctx, _cache) => {\n      const _component_el_option = _resolveComponent(\"el-option\");\n      const _component_el_select = _resolveComponent(\"el-select\");\n      const _component_el_button = _resolveComponent(\"el-button\");\n      const _component_el_input = _resolveComponent(\"el-input\");\n      const _component_el_icon = _resolveComponent(\"el-icon\");\n      const _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n      const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n      const _component_el_tag = _resolveComponent(\"el-tag\");\n      const _component_el_table_column = _resolveComponent(\"el-table-column\");\n      const _component_el_table = _resolveComponent(\"el-table\");\n      const _component_el_pagination = _resolveComponent(\"el-pagination\");\n      const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n      const _component_el_tab_pane = _resolveComponent(\"el-tab-pane\");\n      const _component_el_tabs = _resolveComponent(\"el-tabs\");\n      const _component_el_dialog = _resolveComponent(\"el-dialog\");\n      const _directive_loading = _resolveDirective(\"loading\");\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_input, {\n        modelValue: searchQuery.value,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => searchQuery.value = $event),\n        placeholder: \"搜索题目\",\n        class: \"search-input\",\n        clearable: \"\",\n        onClear: handleSearchClear,\n        onKeyup: _withKeys(handleSearch, [\"enter\"])\n      }, {\n        prepend: _withCtx(() => [_createVNode(_component_el_select, {\n          modelValue: searchType.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => searchType.value = $event),\n          placeholder: \"选择类型\",\n          style: {\n            \"width\": \"110px\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_option, {\n            label: \"题号\",\n            value: \"id\"\n          }), _createVNode(_component_el_option, {\n            label: \"站外ID\",\n            value: \"ext_id\"\n          }), _createVNode(_component_el_option, {\n            label: \"题目名称\",\n            value: \"name\"\n          })]),\n          _: 1\n        }, 8, [\"modelValue\"])]),\n        append: _withCtx(() => [_createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: handleSearch,\n          icon: _unref(Search)\n        }, null, 8, [\"icon\"])]),\n        _: 1\n      }, 8, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: showFilterDialog,\n        size: \"small\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_icon, null, {\n          default: _withCtx(() => [_createVNode(_unref(Filter))]),\n          _: 1\n        }), _cache[18] || (_cache[18] = _createTextVNode(\" 筛选 \"))]),\n        _: 1\n      }), _createVNode(_component_el_radio_group, {\n        modelValue: filterMode.value,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => filterMode.value = $event),\n        size: \"small\",\n        style: {\n          \"margin-left\": \"10px\"\n        }\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_radio_button, {\n          label: \"intersection\"\n        }, {\n          default: _withCtx(() => _cache[19] || (_cache[19] = [_createTextVNode(\"交集\")])),\n          _: 1\n        }), _createVNode(_component_el_radio_button, {\n          label: \"union\"\n        }, {\n          default: _withCtx(() => _cache[20] || (_cache[20] = [_createTextVNode(\"并集\")])),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"modelValue\"])]), hasSelectedFilters.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[21] || (_cache[21] = _createElementVNode(\"span\", {\n        class: \"filter-label\"\n      }, \"已选择：\", -1)), _createElementVNode(\"div\", _hoisted_6, [selectedPlatform.value ? (_openBlock(), _createBlock(_component_el_tag, {\n        key: 0,\n        closable: \"\",\n        type: getPlatformTagType(selectedPlatform.value),\n        onClose: _cache[3] || (_cache[3] = $event => removeFilter('platform'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(getPlatformName(selectedPlatform.value)), 1)]),\n        _: 1\n      }, 8, [\"type\"])) : _createCommentVNode(\"\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(selectedDifficulties.value, diff => {\n        return _openBlock(), _createBlock(_component_el_tag, {\n          key: `diff-${diff}`,\n          closable: \"\",\n          type: getDifficultyTagType({\n            difficulty: diff,\n            oj_platform: selectedPlatform.value\n          }),\n          onClose: $event => removeFilter('difficulty', diff)\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(diff), 1)]),\n          _: 2\n        }, 1032, [\"type\", \"onClose\"]);\n      }), 128)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(selectedTags.value, tag => {\n        return _openBlock(), _createBlock(_component_el_tag, {\n          key: `tag-${tag}`,\n          closable: \"\",\n          type: getTagType(tag, selectedPlatform.value),\n          onClose: $event => removeFilter('tag', tag)\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(getTagName(tag)), 1)]),\n          _: 2\n        }, 1032, [\"type\", \"onClose\"]);\n      }), 128))])])) : _createCommentVNode(\"\", true)]), _createElementVNode(\"div\", _hoisted_7, [hasLuoguProblems.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createVNode(_component_el_radio_group, {\n        modelValue: tagDisplayMode.value,\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => tagDisplayMode.value = $event),\n        size: \"small\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_radio_button, {\n          label: \"algorithm\"\n        }, {\n          default: _withCtx(() => _cache[22] || (_cache[22] = [_createTextVNode(\"算法标签\")])),\n          _: 1\n        }), _createVNode(_component_el_radio_button, {\n          label: \"source\"\n        }, {\n          default: _withCtx(() => _cache[23] || (_cache[23] = [_createTextVNode(\"来源标签\")])),\n          _: 1\n        }), _createVNode(_component_el_radio_button, {\n          label: \"time\"\n        }, {\n          default: _withCtx(() => _cache[24] || (_cache[24] = [_createTextVNode(\"时间标签\")])),\n          _: 1\n        }), _createVNode(_component_el_radio_button, {\n          label: \"region\"\n        }, {\n          default: _withCtx(() => _cache[25] || (_cache[25] = [_createTextVNode(\"地区标签\")])),\n          _: 1\n        }), _createVNode(_component_el_radio_button, {\n          label: \"other\"\n        }, {\n          default: _withCtx(() => _cache[26] || (_cache[26] = [_createTextVNode(\"其他标签\")])),\n          _: 1\n        }), _createVNode(_component_el_radio_button, {\n          label: \"all\"\n        }, {\n          default: _withCtx(() => _cache[27] || (_cache[27] = [_createTextVNode(\"全部标签\")])),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"modelValue\"])])) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", _hoisted_9, [_withDirectives((_openBlock(), _createBlock(_component_el_table, {\n        data: problems.value,\n        style: {\n          \"width\": \"100%\"\n        },\n        onRowClick: handleRowClick\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_table_column, {\n          prop: \"id\",\n          label: \"题号\",\n          width: \"80\"\n        }), _createVNode(_component_el_table_column, {\n          label: \"题目名称\",\n          \"min-width\": \"220\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createElementVNode(\"span\", _hoisted_10, _toDisplayString(row.name), 1), row.solution_count > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_11, \" (\" + _toDisplayString(row.solution_count) + \"解) \", 1)) : _createCommentVNode(\"\", true)]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          label: \"平台\",\n          width: \"100\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createVNode(_component_el_tag, {\n            type: getPlatformTagType(row.oj_platform),\n            size: \"small\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(getPlatformName(row.oj_platform)), 1)]),\n            _: 2\n          }, 1032, [\"type\"])]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          prop: \"solution_count\",\n          label: \"题解\",\n          width: \"80\",\n          align: \"center\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [row.solution_count > 0 ? (_openBlock(), _createBlock(_component_el_tag, {\n            key: 0,\n            type: \"info\",\n            size: \"small\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(row.solution_count), 1)]),\n            _: 2\n          }, 1024)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_12, \"-\"))]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          label: \"原题ID\",\n          width: \"120\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createElementVNode(\"a\", {\n            href: generateOjLink(row),\n            target: \"_blank\",\n            class: \"external-id\",\n            onClick: _cache[5] || (_cache[5] = _withModifiers(() => {}, [\"stop\"]))\n          }, _toDisplayString(row.ext_question_id), 9, _hoisted_13)]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          label: \"难度\",\n          width: \"120\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createVNode(_component_el_tag, {\n            type: getDifficultyTagType(row),\n            size: \"small\",\n            effect: \"dark\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(row.difficulty), 1)]),\n            _: 2\n          }, 1032, [\"type\"])]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          label: \"标签\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createElementVNode(\"div\", _hoisted_14, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(getFilteredTags(row.algorithm_tags, row.oj_platform), tag => {\n            return _openBlock(), _createBlock(_component_el_tag, {\n              key: tag,\n              type: getTagType(tag, row.oj_platform),\n              size: \"small\",\n              class: \"tag-item\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(getTagName(tag)), 1)]),\n              _: 2\n            }, 1032, [\"type\"]);\n          }), 128))])]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"data\"])), [[_directive_loading, loading.value]])]), totalCount.value > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_createVNode(_component_el_pagination, {\n        \"current-page\": currentPage.value,\n        \"onUpdate:currentPage\": _cache[6] || (_cache[6] = $event => currentPage.value = $event),\n        \"page-size\": pageSize,\n        total: totalCount.value,\n        layout: \"prev, pager, next\",\n        onCurrentChange: fetchProblems\n      }, null, 8, [\"current-page\", \"total\"])])) : _createCommentVNode(\"\", true)]), _createVNode(_component_el_dialog, {\n        modelValue: filterDialogVisible.value,\n        \"onUpdate:modelValue\": _cache[17] || (_cache[17] = $event => filterDialogVisible.value = $event),\n        title: \"筛选条件\",\n        width: \"70%\"\n      }, {\n        footer: _withCtx(() => [_createVNode(_component_el_button, {\n          onClick: _cache[16] || (_cache[16] = $event => filterDialogVisible.value = false)\n        }, {\n          default: _withCtx(() => _cache[32] || (_cache[32] = [_createTextVNode(\"取消\")])),\n          _: 1\n        }), _createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: applyFilters\n        }, {\n          default: _withCtx(() => _cache[33] || (_cache[33] = [_createTextVNode(\"确定\")])),\n          _: 1\n        })]),\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_16, [_createVNode(_component_el_radio_group, {\n          modelValue: filterPlatform.value,\n          \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => filterPlatform.value = $event)\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_radio_button, {\n            label: \"leetcode\"\n          }, {\n            default: _withCtx(() => _cache[28] || (_cache[28] = [_createTextVNode(\"LeetCode\")])),\n            _: 1\n          }), _createVNode(_component_el_radio_button, {\n            label: \"luogu\"\n          }, {\n            default: _withCtx(() => _cache[29] || (_cache[29] = [_createTextVNode(\"洛谷\")])),\n            _: 1\n          })]),\n          _: 1\n        }, 8, [\"modelValue\"])]), filterPlatform.value === 'leetcode' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_cache[30] || (_cache[30] = _createElementVNode(\"h3\", null, \"难度\", -1)), _createElementVNode(\"div\", _hoisted_18, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(LeetcodeDifficulties), diff => {\n          return _openBlock(), _createBlock(_component_el_checkbox, {\n            key: diff,\n            label: diff,\n            modelValue: tempDifficulties.value,\n            \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => tempDifficulties.value = $event),\n            value: diff\n          }, null, 8, [\"label\", \"modelValue\", \"value\"]);\n        }), 128))]), _cache[31] || (_cache[31] = _createElementVNode(\"h3\", null, \"算法标签\", -1)), _createElementVNode(\"div\", _hoisted_19, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(LeetcodeTags), tag => {\n          return _openBlock(), _createBlock(_component_el_checkbox, {\n            key: tag,\n            label: tag,\n            modelValue: tempTags.value,\n            \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => tempTags.value = $event),\n            value: tag\n          }, null, 8, [\"label\", \"modelValue\", \"value\"]);\n        }), 128))])])) : _createCommentVNode(\"\", true), filterPlatform.value === 'luogu' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_createVNode(_component_el_tabs, {\n          type: \"border-card\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_tab_pane, {\n            label: \"难度\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_21, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(LuoguDifficulties), diff => {\n              return _openBlock(), _createBlock(_component_el_checkbox, {\n                key: diff,\n                label: diff,\n                modelValue: tempDifficulties.value,\n                \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => tempDifficulties.value = $event),\n                value: diff\n              }, null, 8, [\"label\", \"modelValue\", \"value\"]);\n            }), 128))])]),\n            _: 1\n          }), _createVNode(_component_el_tab_pane, {\n            label: \"算法标签\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_22, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(luoguTags.value.Algorithm, tag => {\n              return _openBlock(), _createBlock(_component_el_checkbox, {\n                key: tag.tag_id,\n                label: tag.name,\n                modelValue: tempTags.value,\n                \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => tempTags.value = $event),\n                value: `Algorithm_${tag.name}`\n              }, null, 8, [\"label\", \"modelValue\", \"value\"]);\n            }), 128))])]),\n            _: 1\n          }), _createVNode(_component_el_tab_pane, {\n            label: \"来源标签\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_23, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(luoguTags.value.Source, tag => {\n              return _openBlock(), _createBlock(_component_el_checkbox, {\n                key: tag.tag_id,\n                label: tag.name,\n                modelValue: tempTags.value,\n                \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => tempTags.value = $event),\n                value: `Source_${tag.name}`\n              }, null, 8, [\"label\", \"modelValue\", \"value\"]);\n            }), 128))])]),\n            _: 1\n          }), _createVNode(_component_el_tab_pane, {\n            label: \"时间标签\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_24, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(luoguTags.value.Time, tag => {\n              return _openBlock(), _createBlock(_component_el_checkbox, {\n                key: tag.tag_id,\n                label: tag.name,\n                modelValue: tempTags.value,\n                \"onUpdate:modelValue\": _cache[13] || (_cache[13] = $event => tempTags.value = $event),\n                value: `Time_${tag.name}`\n              }, null, 8, [\"label\", \"modelValue\", \"value\"]);\n            }), 128))])]),\n            _: 1\n          }), _createVNode(_component_el_tab_pane, {\n            label: \"地区标签\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_25, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(luoguTags.value.Region, tag => {\n              return _openBlock(), _createBlock(_component_el_checkbox, {\n                key: tag.tag_id,\n                label: tag.name,\n                modelValue: tempTags.value,\n                \"onUpdate:modelValue\": _cache[14] || (_cache[14] = $event => tempTags.value = $event),\n                value: `Region_${tag.name}`\n              }, null, 8, [\"label\", \"modelValue\", \"value\"]);\n            }), 128))])]),\n            _: 1\n          }), _createVNode(_component_el_tab_pane, {\n            label: \"其他标签\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_26, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(luoguTags.value.Other, tag => {\n              return _openBlock(), _createBlock(_component_el_checkbox, {\n                key: tag.tag_id,\n                label: tag.name,\n                modelValue: tempTags.value,\n                \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => tempTags.value = $event),\n                value: `Other_${tag.name}`\n              }, null, 8, [\"label\", \"modelValue\", \"value\"]);\n            }), 128))])]),\n            _: 1\n          })]),\n          _: 1\n        })])) : _createCommentVNode(\"\", true)]),\n        _: 1\n      }, 8, [\"modelValue\"])]);\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRouter","getAllTags","getQuestionTrashList","searchQuestionTrash","Filter","LeetcodeTags","LuoguDifficulties","LeetcodeDifficulties","Search","pageSize","router","searchQuery","searchType","isSearching","loading","problems","currentPage","totalCount","tagDisplayMode","filterDialogVisible","selectedPlatform","selectedDifficulties","selectedTags","filterPlatform","tempDifficulties","tempTags","filterMode","luoguTags","Algorithm","Source","Time","Region","Other","hasLuoguProblems","value","some","p","oj_platform","hasSelectedFilters","length","loadLuoguTags","res","data","code","error","console","showFilterDialog","applyFilters","fetchProblems","removeFilter","type","filter","d","t","PLATFORM_MAP","luogu","leetcode","getPlatformName","platform","getPlatformTagType","getDifficultyTagType","row","levelMap","difficulty","generateOjLink","baseUrls","ext_question_id","getFilteredTags","tags","tag","includes","prefix","split","getTagName","slice","join","getTagType","trim","params","page","page_size","results","count","filter_mode","platforms","difficulties","algorithm_tags","handleRowClick","push","id","handleSearch","handleSearchClear"],"sources":["/var/www/AlgorithmWeb/algorithmFrontend/src/views/ProblemTrashView.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <!-- 替换原有的filter-card部分 -->\n    <div class=\"filter-card\">\n      <!-- 搜索框放在最上方 -->\n      <div class=\"search-container\">\n        <el-input\n          v-model=\"searchQuery\"\n          placeholder=\"搜索题目\"\n          class=\"search-input\"\n          clearable\n          @clear=\"handleSearchClear\"\n          @keyup.enter=\"handleSearch\"\n        >\n          <template #prepend>\n            <el-select \n              v-model=\"searchType\" \n              placeholder=\"选择类型\"\n              style=\"width: 110px\"\n            >\n              <el-option label=\"题号\" value=\"id\" />\n              <el-option label=\"站外ID\" value=\"ext_id\" />\n              <el-option label=\"题目名称\" value=\"name\" />\n            </el-select>\n          </template>\n          <template #append>\n            <el-button \n              type=\"primary\" \n              @click=\"handleSearch\"\n              :icon=\"Search\"\n            />\n          </template>\n        </el-input>\n      </div>\n\n      <!-- 筛选按钮和模式选择 -->\n      <div class=\"filter-header\">\n        <el-button type=\"primary\" @click=\"showFilterDialog\" size=\"small\">\n          <el-icon><Filter /></el-icon>\n          筛选\n        </el-button>\n        <el-radio-group v-model=\"filterMode\" size=\"small\" style=\"margin-left: 10px\">\n          <el-radio-button label=\"intersection\">交集</el-radio-button>\n          <el-radio-button label=\"union\">并集</el-radio-button>\n        </el-radio-group>\n      </div>\n      \n      <!-- 已选条件展示 -->\n      <div class=\"selected-filters\" v-if=\"hasSelectedFilters\">\n        <span class=\"filter-label\">已选择：</span>\n        <div class=\"filter-tags\">\n          <!-- 平台筛选 -->\n          <el-tag \n            v-if=\"selectedPlatform\"\n            closable\n            :type=\"getPlatformTagType(selectedPlatform)\"\n            @close=\"removeFilter('platform')\"\n          >\n            {{ getPlatformName(selectedPlatform) }}\n          </el-tag>\n          \n          <!-- 难度筛选 -->\n          <el-tag \n            v-for=\"diff in selectedDifficulties\"\n            :key=\"`diff-${diff}`\"\n            closable\n            :type=\"getDifficultyTagType({ difficulty: diff, oj_platform: selectedPlatform })\"\n            @close=\"removeFilter('difficulty', diff)\"\n          >\n            {{ diff }}\n          </el-tag>\n          \n          <!-- 标签筛选 -->\n          <el-tag \n            v-for=\"tag in selectedTags\"\n            :key=\"`tag-${tag}`\"\n            closable\n            :type=\"getTagType(tag, selectedPlatform)\"\n            @close=\"removeFilter('tag', tag)\"\n          >\n            {{ getTagName(tag) }}\n          </el-tag>\n        </div>\n      </div>\n    </div>\n\n    <!-- 主内容区 -->\n    <div class=\"content-wrapper\">\n      <!-- 标签展示模式切换（仅对洛谷题目有效） -->\n      <div class=\"tag-mode-switch\" v-if=\"hasLuoguProblems\">\n        <el-radio-group v-model=\"tagDisplayMode\" size=\"small\">\n          <el-radio-button label=\"algorithm\">算法标签</el-radio-button>\n          <el-radio-button label=\"source\">来源标签</el-radio-button>\n          <el-radio-button label=\"time\">时间标签</el-radio-button>\n          <el-radio-button label=\"region\">地区标签</el-radio-button>\n          <el-radio-button label=\"other\">其他标签</el-radio-button>\n          <el-radio-button label=\"all\">全部标签</el-radio-button>\n        </el-radio-group>\n      </div>\n\n      <!-- 题目列表表格 -->\n      <div class=\"table-container\">\n        <el-table \n          :data=\"problems\" \n          style=\"width: 100%\"\n          v-loading=\"loading\"\n          @row-click=\"handleRowClick\"\n        >\n          <!-- 题号列 -->\n          <el-table-column prop=\"id\" label=\"题号\" width=\"80\" />\n          \n          <!-- 题目名称列 -->\n          <el-table-column label=\"题目名称\" min-width=\"220\">\n            <template #default=\"{row}\">\n              <span class=\"problem-title\">{{ row.name }}</span>\n              <span class=\"solution-count\" v-if=\"row.solution_count > 0\">\n                ({{ row.solution_count }}解)\n              </span>\n            </template>\n          </el-table-column>\n          \n          <!-- 平台列 -->\n          <el-table-column label=\"平台\" width=\"100\">\n            <template #default=\"{row}\">\n              <el-tag :type=\"getPlatformTagType(row.oj_platform)\" size=\"small\">\n                {{ getPlatformName(row.oj_platform) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n\n          <!-- 添加题解数列 -->\n            <el-table-column prop=\"solution_count\" label=\"题解\" width=\"80\" align=\"center\">\n              <template #default=\"{row}\">\n                <el-tag v-if=\"row.solution_count > 0\" type=\"info\" size=\"small\">\n                  {{ row.solution_count }}\n                </el-tag>\n                <span v-else>-</span>\n              </template>\n            </el-table-column>\n\n          <!-- 原题ID列 -->\n          <el-table-column label=\"原题ID\" width=\"120\">\n            <template #default=\"{row}\">\n              <a \n                :href=\"generateOjLink(row)\" \n                target=\"_blank\" \n                class=\"external-id\"\n                @click.stop\n              >\n                {{ row.ext_question_id }}\n              </a>\n            </template>\n          </el-table-column>\n          \n          <!-- 难度列 -->\n          <el-table-column label=\"难度\" width=\"120\">\n            <template #default=\"{row}\">\n              <el-tag \n                :type=\"getDifficultyTagType(row)\" \n                size=\"small\"\n                effect=\"dark\"\n              >\n                {{ row.difficulty }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          \n          <!-- 标签列 -->\n          <el-table-column label=\"标签\">\n            <template #default=\"{row}\">\n              <div class=\"tag-container\">\n                <el-tag\n                  v-for=\"tag in getFilteredTags(row.algorithm_tags, row.oj_platform)\"\n                  :key=\"tag\"\n                  :type=\"getTagType(tag, row.oj_platform)\"\n                  size=\"small\"\n                  class=\"tag-item\"\n                >\n                  {{ getTagName(tag) }}\n                </el-tag>\n              </div>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n\n      <!-- 分页器 -->\n      <div class=\"pagination-wrapper\" v-if=\"totalCount > 0\">\n        <el-pagination\n          v-model:current-page=\"currentPage\"\n          :page-size=\"pageSize\"\n          :total=\"totalCount\"\n          layout=\"prev, pager, next\"\n          @current-change=\"fetchProblems\"\n        />\n      </div>\n    </div>\n\n    <!-- 筛选弹窗 -->\n    <el-dialog v-model=\"filterDialogVisible\" title=\"筛选条件\" width=\"70%\">\n      <div class=\"platform-selector\">\n        <el-radio-group v-model=\"filterPlatform\">\n          <el-radio-button label=\"leetcode\">LeetCode</el-radio-button>\n          <el-radio-button label=\"luogu\">洛谷</el-radio-button>\n        </el-radio-group>\n      </div>\n\n      <!-- LeetCode筛选条件 -->\n      <div v-if=\"filterPlatform === 'leetcode'\" class=\"filter-section\">\n        <h3>难度</h3>\n        <div class=\"tag-group\">\n          <el-checkbox \n            v-for=\"diff in LeetcodeDifficulties\" \n            :key=\"diff\" \n            :label=\"diff\"\n            v-model=\"tempDifficulties\"\n            :value=\"diff\"\n          />\n        </div>\n\n        <h3>算法标签</h3>\n        <div class=\"tag-group\">\n          <el-checkbox \n            v-for=\"tag in LeetcodeTags\" \n            :key=\"tag\" \n            :label=\"tag\"\n            v-model=\"tempTags\"\n            :value=\"tag\"\n          />\n        </div>\n      </div>\n\n      <!-- 洛谷筛选条件 -->\n      <div v-if=\"filterPlatform === 'luogu'\" class=\"filter-section\">\n        <el-tabs type=\"border-card\">\n          <el-tab-pane label=\"难度\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"diff in LuoguDifficulties\" \n                :key=\"diff\" \n                :label=\"diff\"\n                v-model=\"tempDifficulties\"\n                :value=\"diff\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"算法标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Algorithm\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Algorithm_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"来源标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Source\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Source_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"时间标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Time\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Time_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"地区标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Region\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Region_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n\n          <el-tab-pane label=\"其他标签\">\n            <div class=\"tag-group\">\n              <el-checkbox \n                v-for=\"tag in luoguTags.Other\" \n                :key=\"tag.tag_id\" \n                :label=\"tag.name\"\n                v-model=\"tempTags\"\n                :value=\"`Other_${tag.name}`\"\n              />\n            </div>\n          </el-tab-pane>\n        </el-tabs>\n      </div>\n\n      <template #footer>\n        <el-button @click=\"filterDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"applyFilters\">确定</el-button>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { getAllTags } from '@/api/question'\nimport { getQuestionTrashList, searchQuestionTrash } from '@/api/question'\nimport { Filter } from '@element-plus/icons-vue'\nimport { \n  LeetcodeTags, \n  LuoguDifficulties, \n  LeetcodeDifficulties \n} from '@/constants/tags'\nimport { Search } from '@element-plus/icons-vue'\n\nconst router = useRouter()\n\n// 在setup()中添加以下响应式变量\nconst searchQuery = ref('')\nconst searchType = ref('name') // 默认按名称搜索\nconst isSearching = ref(false)\n\n// 数据状态\nconst loading = ref(false)\nconst problems = ref([])\nconst currentPage = ref(1)\nconst pageSize = 20\nconst totalCount = ref(0)\nconst tagDisplayMode = ref('algorithm')\nconst filterDialogVisible = ref(false)\n\n// 筛选相关状态（仅用于UI展示）\nconst selectedPlatform = ref('')\nconst selectedDifficulties = ref([])\nconst selectedTags = ref([])\n\n// 临时筛选状态（弹窗中使用）\nconst filterPlatform = ref('leetcode')\nconst tempDifficulties = ref([])\nconst tempTags = ref([])\nconst filterMode = ref('intersection') // 默认交集\n// 洛谷标签\nconst luoguTags = ref({\n  Algorithm: [],\n  Source: [],\n  Time: [],\n  Region: [],\n  Other: []\n})\n\n// 计算属性\nconst hasLuoguProblems = computed(() => {\n  return problems.value.some(p => p.oj_platform === 'luogu')\n})\n\nconst hasSelectedFilters = computed(() => {\n  return selectedPlatform.value || selectedDifficulties.value.length > 0 || selectedTags.value.length > 0\n})\n\n// 加载洛谷标签\nconst loadLuoguTags = async () => {\n  try {\n    const res = await getAllTags()\n    if (res.data.code === 200) {\n      luoguTags.value = res.data.data\n    }\n  } catch (error) {\n    console.error('加载洛谷标签失败:', error)\n  }\n}\n\n// 显示筛选弹窗\nconst showFilterDialog = () => {\n  // 初始化弹窗中的筛选条件\n  filterPlatform.value = selectedPlatform.value || 'leetcode'\n  tempDifficulties.value = [...selectedDifficulties.value]\n  tempTags.value = [...selectedTags.value]\n  filterDialogVisible.value = true\n}\n\n// 修改applyFilters函数，添加重新加载数据的逻辑\nconst applyFilters = () => {\n  selectedPlatform.value = filterPlatform.value\n  selectedDifficulties.value = [...tempDifficulties.value]\n  selectedTags.value = [...tempTags.value]\n  filterDialogVisible.value = false\n  \n  // 重置分页并重新加载数据\n  currentPage.value = 1\n  fetchProblems()\n}\n\n// 修改removeFilter函数，添加重新加载数据的逻辑\nconst removeFilter = (type, value = null) => {\n  switch(type) {\n    case 'platform':\n      selectedPlatform.value = ''\n      break\n    case 'difficulty':\n      selectedDifficulties.value = selectedDifficulties.value.filter(d => d !== value)\n      break\n    case 'tag':\n      selectedTags.value = selectedTags.value.filter(t => t !== value)\n      break\n  }\n  \n  // 重置分页并重新加载数据\n  currentPage.value = 1\n  fetchProblems()\n}\n\n// 平台映射\nconst PLATFORM_MAP = {\n  luogu: '洛谷',\n  leetcode: 'LeetCode'\n}\n\n// 获取平台名称\nconst getPlatformName = (platform) => {\n  return PLATFORM_MAP[platform] || platform\n}\n\n// 平台标签样式\nconst getPlatformTagType = (platform) => {\n  return {\n    luogu: 'success',\n    leetcode: 'warning'\n  }[platform] || 'info'\n}\n\n// 难度标签样式\nconst getDifficultyTagType = (row) => {\n  if (row.oj_platform === 'luogu') {\n    const levelMap = {\n      '入门': 'info',\n      '普及-': 'success',\n      '普及/提高-': 'success',\n      '普及+/提高': 'warning',\n      '提高+/省选-': 'danger',\n      '省选/NOI-': 'danger',\n      'NOI/NOI+': 'danger',\n      'CTSC': 'danger'\n    }\n    return levelMap[row.difficulty] || 'info'\n  }\n  return {\n    '简单': 'success',\n    '中等': 'warning',\n    '困难': 'danger'\n  }[row.difficulty] || 'info'\n}\n\n// 生成OJ题目链接\nconst generateOjLink = (row) => {\n  const baseUrls = {\n    luogu: `https://www.luogu.com.cn/problem/${row.ext_question_id}`,\n    leetcode: `https://leetcode.cn/problems/${row.ext_question_id}/`\n  }\n  return baseUrls[row.oj_platform] || '#'\n}\n\n// 标签分类过滤\nconst getFilteredTags = (tags, platform) => {\n  if (!tags) return []\n  \n  // LeetCode题目只显示算法标签\n  if (platform === 'leetcode') {\n    return tags.filter(tag => LeetcodeTags.includes(tag))\n  }\n  \n  // 洛谷题目根据当前模式过滤\n  return tags.filter(tag => {\n    if (tagDisplayMode.value === 'all') return true\n    \n    const prefix = tag.split('_')[0]\n    switch(tagDisplayMode.value) {\n      case 'algorithm': return prefix === 'Algorithm'\n      case 'source': return prefix === 'Source'\n      case 'time': return prefix === 'Time'\n      case 'region': return prefix === 'Region'\n      case 'other': return !['Algorithm', 'Source', 'Time', 'Region'].includes(prefix)\n      default: return true\n    }\n  })\n}\n\n// 获取标签名称（去掉前缀）\nconst getTagName = (tag) => {\n  // LeetCode标签已经是纯名称\n  if (LeetcodeTags.includes(tag)) return tag\n  \n  // 洛谷标签去掉前缀\n  return tag.split('_').slice(1).join('_') || tag\n}\n\n// 标签样式分类\nconst getTagType = (tag, platform) => {\n  // LeetCode标签统一为蓝色\n  if (platform === 'leetcode') return 'primary'\n  \n  // 洛谷标签根据前缀分类\n  const prefix = tag.split('_')[0]\n  return {\n    'Algorithm': 'primary',  // 算法 - 蓝色\n    'Source': 'success',     // 来源 - 绿色\n    'Time': 'warning',       // 时间 - 黄色\n    'Region': 'danger',      // 地区 - 红色\n    'Other': 'info'          // 其他 - 灰色\n  }[prefix] || 'info'\n}\n\nconst fetchProblems = async () => {\n  try {\n    loading.value = true\n    \n    if (searchQuery.value.trim()) {\n      const params = {\n        page: currentPage.value,\n        page_size: pageSize,\n        [searchType.value]: searchQuery.value.trim()\n      }\n      const res = await searchQuestionTrash(params) // 使用回收站搜索接口\n      problems.value = res.data.results\n      totalCount.value = res.data.count\n      return\n    }\n    \n    const params = {\n      page: currentPage.value,\n      page_size: pageSize,\n      filter_mode: filterMode.value\n    }\n    \n    if (selectedPlatform.value) {\n      params.platforms = selectedPlatform.value\n    }\n    if (selectedDifficulties.value.length > 0) {\n      params.difficulties = selectedDifficulties.value.join(',')\n    }\n    if (selectedTags.value.length > 0) {\n      params.algorithm_tags = selectedTags.value.join(',')\n    }\n    \n    const res = await getQuestionTrashList(params) // 使用回收站列表接口\n    problems.value = res.data.results\n    totalCount.value = res.data.count\n    \n  } catch (error) {\n    console.error('加载回收站题目失败:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\n\n// 初始化加载\nonMounted(() => {\n  fetchProblems()\n  loadLuoguTags()\n})\n\n// 跳转到题目详情\nconst handleRowClick = (row) => {\n  router.push(`/problems/${row.id}`)\n}\n\n\n// 修改 handleSearch 方法\nconst handleSearch = async () => {\n  if (!searchQuery.value.trim()) return\n  \n  try {\n    isSearching.value = true\n    loading.value = true\n    \n    const params = {\n      page: currentPage.value,\n      page_size: pageSize,\n      [searchType.value]: searchQuery.value.trim()\n    }\n    \n    const res = await searchQuestionTrash(params) // 使用回收站搜索接口\n    problems.value = res.data.results\n    totalCount.value = res.data.count\n    \n    selectedPlatform.value = ''\n    selectedDifficulties.value = []\n    selectedTags.value = []\n    \n  } catch (error) {\n    console.error('回收站搜索失败:', error)\n  } finally {\n    loading.value = false\n    isSearching.value = false\n  }\n}\n\n// 清空搜索\nconst handleSearchClear = () => {\n  if (searchQuery.value === '') {\n    // 如果已经清空，则恢复原始列表\n    fetchProblems()\n  }\n}\n\n\n</script>\n\n<style scoped>\n.main-container {\n  padding-top: 60px;\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);\n}\n\n.filter-card {\n  width: 90%;\n  max-width: 1200px;\n  margin: 0 auto 30px;\n  padding: 25px;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(0, 0, 0, 0.03);\n}\n\n.content-wrapper {\n  width: 90%;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 25px;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n}\n\n.search-container {\n  margin-bottom: 20px;\n}\n\n.search-input {\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.filter-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.selected-filters {\n  padding: 12px 0;\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.filter-label {\n  font-size: 14px;\n  color: #606266;\n  margin-right: 12px;\n}\n\n.filter-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.tag-mode-switch {\n  margin: 0 0 20px auto;\n  padding: 8px 12px;\n  background: rgba(0, 0, 0, 0.02);\n  border-radius: 6px;\n}\n\n.table-container {\n  margin: 20px 0;\n}\n\n.pagination-wrapper {\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.problem-title {\n  font-weight: 500;\n  color: var(--el-color-primary);\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.problem-title:hover {\n  color: #409EFF;\n  text-decoration: underline;\n}\n\n.external-id {\n  color: #606266;\n  transition: all 0.3s;\n}\n\n.external-id:hover {\n  color: var(--el-color-primary);\n}\n\n.tag-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n}\n\n.tag-item {\n  transition: all 0.3s;\n}\n\n.tag-item:hover {\n  transform: translateY(-2px);\n}\n\n/* 弹窗样式优化 */\n:deep(.el-dialog) {\n  border-radius: 12px;\n  background: rgba(255, 255, 255, 0.95);\n}\n\n:deep(.el-dialog__header) {\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.platform-selector {\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.filter-section {\n  padding: 0 10px;\n}\n\n.tag-group {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n}\n\n/* 表格优化 */\n:deep(.el-table) {\n  --el-table-border-color: rgba(0, 0, 0, 0.05);\n  --el-table-header-bg-color: rgba(0, 0, 0, 0.02);\n}\n\n:deep(.el-table__row) {\n  transition: all 0.3s;\n}\n\n:deep(.el-table__row:hover) {\n  background-color: #f8fafc !important;\n  transform: translateY(-1px);\n}\n\n:deep(.el-table th.el-table__cell) {\n  font-weight: 600;\n}\n\n/* 响应式调整 */\n@media (max-width: 768px) {\n  .filter-card,\n  .content-wrapper {\n    width: 95%;\n    padding: 20px 15px;\n  }\n\n  .filter-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 12px;\n  }\n\n  .search-container :deep(.el-input-group__prepend) {\n    width: 100px;\n  }\n\n  .tag-mode-switch {\n    margin: 0 auto 20px;\n    width: 100%;\n  }\n\n  :deep(.el-table) {\n    font-size: 14px;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}