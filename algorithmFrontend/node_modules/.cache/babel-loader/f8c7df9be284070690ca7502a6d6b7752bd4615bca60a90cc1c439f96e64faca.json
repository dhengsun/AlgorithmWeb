{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport AppHeader from '@/components/AppHeader.vue';\nimport { getDraftDetail } from '@/api/solution'; // 使用solution API获取草稿\nimport { getQuestionDetail } from '@/api/question';\nimport request from '@/api/request';\nimport MarkdownIt from 'markdown-it';\nimport DOMPurify from 'dompurify';\nimport { EditPen, Delete, View, RefreshLeft, Upload } from '@element-plus/icons-vue';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'DraftDetailView',\n  components: {\n    AppHeader,\n    EditPen,\n    Delete,\n    View,\n    RefreshLeft,\n    Upload\n  },\n  data() {\n    return {\n      draftId: this.$route.params.id,\n      draft: null,\n      questionDetails: null,\n      loading: true,\n      error: null,\n      mdi: new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true,\n        breaks: true\n      }),\n      // 当前用户信息（实际应从用户状态获取）\n      currentUserId: null,\n      // 应从用户状态获取\n\n      // 删除、恢复和发布相关状态\n      deleteDialogVisible: false,\n      restoreDialogVisible: false,\n      publishDialogVisible: false,\n      processing: false,\n      // 语言名称到显示名称的映射\n      languageDisplayMap: {\n        'cpp': 'C++',\n        'csharp': 'C#',\n        'javascript': 'JavaScript',\n        'python': 'Python',\n        'java': 'Java',\n        'go': 'Go',\n        'rust': 'Rust'\n      }\n    };\n  },\n  computed: {\n    // 渲染Markdown\n    compiledMarkdown() {\n      if (!this.draft) return '';\n      try {\n        // 使用content_text作为Markdown内容\n        const content = String(this.draft.content_text || '');\n        const html = this.mdi.render(content);\n        return DOMPurify.sanitize(html);\n      } catch (e) {\n        console.error('Markdown处理错误:', e);\n        return '内容解析出错';\n      }\n    },\n    // 检查当前用户是否可以管理草稿（编辑、删除、恢复、发布）\n    canManageDraft() {\n      // 这里应该根据实际权限检查逻辑实现\n      // 例如检查当前登录用户是否是草稿作者或管理员\n      return true; // 为了示例，此处默认为true\n    }\n  },\n  mounted() {\n    this.fetchDraftDetail();\n  },\n  methods: {\n    // 获取草稿详情\n    async fetchDraftDetail() {\n      this.loading = true;\n      this.error = null;\n      try {\n        // 使用getSolutionDetail API但访问的是草稿路径\n        const response = await getDraftDetail(this.draftId, true); // 添加参数表示获取草稿\n\n        if (response.data && response.data.code === 200) {\n          this.draft = response.data.data;\n        } else {\n          this.draft = response.data;\n        }\n\n        // 获取题目详情\n        if (this.draft && this.draft.question_id) {\n          await this.fetchQuestionDetail(this.draft.question_id);\n        }\n      } catch (error) {\n        console.error('获取草稿详情失败:', error);\n        this.error = '获取草稿详情失败: ' + (error.message || '未知错误');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 获取题目详情\n    async fetchQuestionDetail(questionId) {\n      try {\n        const response = await getQuestionDetail(questionId);\n        if (response.data && response.data.code === 200) {\n          this.questionDetails = response.data.data;\n        } else {\n          this.questionDetails = response.data;\n        }\n\n        // 确保算法标签是数组\n        if (this.questionDetails && typeof this.questionDetails.algorithm_tags === 'string') {\n          this.questionDetails.algorithm_tags = this.questionDetails.algorithm_tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n        }\n      } catch (error) {\n        console.error('获取题目详情失败:', error);\n      }\n    },\n    // 编辑按钮处理\n    handleEdit() {\n      if (!this.draft) return;\n      // 跳转到编辑页面\n      this.$router.push(`/${this.draft.id}/drafts/update`);\n    },\n    // 删除按钮处理\n    handleDelete() {\n      if (!this.draft || this.draft.is_deleted) return;\n      this.deleteDialogVisible = true;\n    },\n    // 恢复按钮处理\n    handleRestore() {\n      if (!this.draft) return;\n      this.restoreDialogVisible = true;\n    },\n    // 发布按钮处理\n    handlePublish() {\n      if (!this.draft || this.draft.is_deleted) return;\n      this.publishDialogVisible = true;\n    },\n    // 确认删除\n    async confirmDelete() {\n      if (!this.draft) return;\n      this.processing = true;\n      try {\n        const response = await request({\n          url: '/api/solution/delete/',\n          method: 'post',\n          data: {\n            id: this.draft.id\n          }\n        });\n        this.deleteDialogVisible = false;\n        ElMessage({\n          type: 'success',\n          message: response.message || '草稿删除成功'\n        });\n\n        // 刷新当前页面以显示删除状态\n        await this.fetchDraftDetail();\n      } catch (error) {\n        console.error('删除草稿失败:', error);\n        const errorMsg = error.response?.data?.message || error.message || '删除失败: 未知错误';\n        ElMessage({\n          type: 'error',\n          message: errorMsg\n        });\n      } finally {\n        this.processing = false;\n      }\n    },\n    // 确认恢复\n    async confirmRestore() {\n      if (!this.draft) return;\n      this.processing = true;\n      try {\n        const response = await request({\n          url: '/api/solution/restore/',\n          method: 'post',\n          data: {\n            id: this.draft.id\n          }\n        });\n        this.restoreDialogVisible = false;\n        ElMessage({\n          type: 'success',\n          message: response.message || '草稿恢复成功'\n        });\n\n        // 刷新当前页面以显示恢复后的状态\n        await this.fetchDraftDetail();\n      } catch (error) {\n        console.error('恢复草稿失败:', error);\n        const errorMsg = error.response?.data?.message || error.message || '恢复失败: 未知错误';\n        ElMessage({\n          type: 'error',\n          message: errorMsg\n        });\n      } finally {\n        this.processing = false;\n      }\n    },\n    // 确认发布为题解\n    async confirmPublish() {\n      if (!this.draft || this.draft.is_deleted) return;\n      this.processing = true;\n      try {\n        // 1. 发送请求（注意解构出data）\n        const {\n          data: responseData\n        } = await request({\n          url: '/api/solution/pub/',\n          method: 'post',\n          data: {\n            id: this.draft.id\n          }\n        });\n\n        // 2. 关闭对话框\n        this.publishDialogVisible = false;\n\n        // 3. 处理响应（现在正确检查responseData.code）\n        if (responseData.code === 200) {\n          ElMessage({\n            type: 'success',\n            message: responseData.message || '发布成功'\n          });\n\n          // 4. 跳转逻辑（正确获取嵌套的id）\n          const solutionId = responseData.data?.id;\n          if (solutionId) {\n            this.$router.push(`/${solutionId}/solutions`);\n          } else {\n            this.$router.push('/solutions');\n          }\n        } else {\n          // 5. 处理业务错误（正确获取错误消息）\n          throw new Error(responseData.message || `发布失败，错误码：${responseData.code}`);\n        }\n      } catch (error) {\n        // 6. 统一错误处理\n        console.error('发布失败:', error);\n        ElMessage({\n          type: 'error',\n          message: error.message || '发布过程中发生未知错误'\n        });\n      } finally {\n        this.processing = false;\n      }\n    },\n    // 跳转到题目详情\n    goToProblem(questionId) {\n      this.$router.push(`/${questionId}/problems`);\n    },\n    // 格式化日期\n    formatDate(dateString) {\n      if (!dateString) return '未知时间';\n      const date = new Date(dateString);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    // 获取规范化后的语言名称（用于CSS类名）\n    getNormalizedLanguage(language) {\n      if (!language) return '';\n\n      // 转为小写\n      const lowercased = language.toLowerCase();\n\n      // 特殊处理，比如将 'cpp' 转为 'c++'\n      const reverseMap = {\n        'cpp': 'c++',\n        'csharp': 'c#'\n      };\n      return reverseMap[lowercased] || lowercased;\n    },\n    // 获取显示用的语言名称\n    getDisplayLanguage(language) {\n      if (!language) return '';\n\n      // 转为小写\n      const lowercased = language.toLowerCase();\n\n      // 从特殊映射中获取显示名称\n      if (this.languageDisplayMap[lowercased]) {\n        return this.languageDisplayMap[lowercased];\n      }\n\n      // 首字母大写\n      return language.charAt(0).toUpperCase() + language.slice(1);\n    },\n    // 平台相关方法\n    getPlatformName(platform) {\n      const platforms = {\n        'luogu': '洛谷',\n        'leetcode': 'LeetCode'\n      };\n      return platforms[platform] || platform;\n    },\n    // 平台标签样式\n    getPlatformTagType(platform) {\n      return {\n        luogu: 'success',\n        leetcode: 'warning'\n      }[platform] || 'info';\n    },\n    // 难度标签样式\n    getDifficultyTagType(question) {\n      if (question.oj_platform === 'luogu') {\n        const levelMap = {\n          '入门': 'info',\n          '普及-': 'success',\n          '普及/提高-': 'success',\n          '普及+/提高': 'warning',\n          '提高+/省选-': 'danger',\n          '省选/NOI-': 'danger',\n          'NOI/NOI+': 'danger',\n          'CTSC': 'danger'\n        };\n        return levelMap[question.difficulty] || 'info';\n      }\n\n      // LeetCode难度\n      return {\n        '简单': 'success',\n        '中等': 'warning',\n        '困难': 'danger'\n      }[question.difficulty] || 'info';\n    },\n    // 标签样式\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary';\n\n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0];\n      return {\n        'Algorithm': 'primary',\n        // 算法 - 蓝色\n        'Source': 'success',\n        // 来源 - 绿色\n        'Time': 'warning',\n        // 时间 - 黄色\n        'Region': 'danger',\n        // 地区 - 红色\n        'Other': 'info' // 其他 - 灰色\n      }[prefix] || 'info';\n    },\n    // 获取标签名称\n    getTagName(tag) {\n      // 洛谷标签去掉前缀\n      const parts = tag.split('_');\n      if (parts.length > 1) {\n        return parts.slice(1).join('_');\n      }\n      return tag;\n    }\n  }\n};","map":{"version":3,"names":["AppHeader","getDraftDetail","getQuestionDetail","request","MarkdownIt","DOMPurify","EditPen","Delete","View","RefreshLeft","Upload","ElMessage","name","components","data","draftId","$route","params","id","draft","questionDetails","loading","error","mdi","html","linkify","typographer","breaks","currentUserId","deleteDialogVisible","restoreDialogVisible","publishDialogVisible","processing","languageDisplayMap","computed","compiledMarkdown","content","String","content_text","render","sanitize","e","console","canManageDraft","mounted","fetchDraftDetail","methods","response","code","question_id","fetchQuestionDetail","message","questionId","algorithm_tags","split","map","tag","trim","filter","length","handleEdit","$router","push","handleDelete","is_deleted","handleRestore","handlePublish","confirmDelete","url","method","type","errorMsg","confirmRestore","confirmPublish","responseData","solutionId","Error","goToProblem","formatDate","dateString","date","Date","toLocaleString","year","month","day","hour","minute","getNormalizedLanguage","language","lowercased","toLowerCase","reverseMap","getDisplayLanguage","charAt","toUpperCase","slice","getPlatformName","platform","platforms","getPlatformTagType","luogu","leetcode","getDifficultyTagType","question","oj_platform","levelMap","difficulty","getTagType","prefix","getTagName","parts","join"],"sources":["/Users/hsd/File/Code/Project/AlgorithmWeb/algorithmFrontend/src/views/DraftDetailView.vue"],"sourcesContent":["<template>\n  <div class=\"draft-detail-view\">\n    <AppHeader />\n    <main class=\"page-container\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n      \n      <div v-else-if=\"error\" class=\"error-container\">\n        <el-alert\n          :title=\"error\"\n          type=\"error\"\n          :closable=\"false\"\n        />\n      </div>\n      \n      <div v-else-if=\"draft && draft.is_deleted\" class=\"draft-content\">\n        <div class=\"left-section\">\n          <el-card class=\"draft-description-card\">\n            <div class=\"deleted-banner\">\n              <el-alert\n                title=\"此草稿已被删除\"\n                type=\"warning\"\n                :closable=\"false\"\n              />\n            </div>\n            \n            <h1 class=\"draft-title\">题目 #{{ draft.question_id }} 的解题思路（草稿）</h1>\n            \n            <div class=\"draft-metadata\">\n              <span class=\"draft-time\">\n                <i class=\"el-icon-time\"></i>\n                创建于: {{ formatDate(draft.created_at) }}\n              </span>\n              <span class=\"draft-time\" v-if=\"draft.updated_at !== draft.created_at\">\n                <i class=\"el-icon-edit-outline\"></i>\n                更新于: {{ formatDate(draft.updated_at) }}\n              </span>\n              <span class=\"draft-language\">\n                <el-tag size=\"small\" :class=\"'lang-tag-' + getNormalizedLanguage(draft.language)\">\n                  {{ getDisplayLanguage(draft.language) }}\n                </el-tag>\n              </span>\n              <span class=\"draft-status\">\n                <el-tag size=\"small\" type=\"warning\">已删除</el-tag>\n                <el-tag size=\"small\" type=\"info\">草稿</el-tag>\n              </span>\n            </div>\n            \n            <!-- 草稿内容 - Markdown渲染 -->\n            <div ref=\"markdownContent\" class=\"markdown-content\" v-html=\"compiledMarkdown\"></div>\n          </el-card>\n        </div>\n        \n        <div class=\"right-section\">\n          <!-- 题目信息卡片 -->\n          <el-card class=\"question-info-card\">\n            <h2 @click=\"goToProblem(draft.question_id)\" class=\"clickable-title\">\n              {{ questionDetails?.name || `题目 #${draft.question_id}` }}\n              <i class=\"el-icon-link\"></i>\n            </h2>\n            <div class=\"info-meta\">\n              <div>题目ID: {{ draft.question_id }}</div>\n              <div v-if=\"questionDetails?.ext_question_id\">外部ID: {{ questionDetails.ext_question_id }}</div>\n              <div v-if=\"questionDetails?.oj_platform\">\n                平台: \n                <el-tag :type=\"getPlatformTagType(questionDetails.oj_platform)\" size=\"small\">\n                  {{ getPlatformName(questionDetails.oj_platform) }}\n                </el-tag>\n              </div>\n            </div>\n            \n            <div class=\"action-buttons\" v-if=\"canManageDraft\">\n              <!-- 对已删除草稿显示恢复、编辑和查看题目按钮 -->\n              <el-button type=\"warning\" size=\"small\" @click=\"handleRestore\">\n                <el-icon><RefreshLeft /></el-icon>\n                恢复\n              </el-button>\n              <el-button type=\"primary\" size=\"small\" @click=\"handleEdit\">\n                <el-icon><EditPen /></el-icon>\n                编辑\n              </el-button>\n              <el-button type=\"info\" size=\"small\" @click=\"goToProblem(draft.question_id)\">\n                <el-icon><View /></el-icon>\n                查看题目\n              </el-button>\n            </div>\n          </el-card>\n          \n          <!-- 题目标签和难度 -->\n          <el-card class=\"question-tags-card\" v-if=\"questionDetails\">\n            <div class=\"difficulty-section\">\n              <h3>难度级别</h3>\n              <el-tag \n                :type=\"getDifficultyTagType(questionDetails)\"\n                effect=\"dark\"\n              >\n                {{ questionDetails.difficulty }}\n              </el-tag>\n            </div>\n            \n            <div class=\"tags-section\" v-if=\"questionDetails.algorithm_tags?.length\">\n              <h3>算法标签</h3>\n              <div class=\"tags-container\">\n                <el-tag \n                  v-for=\"tag in questionDetails.algorithm_tags\" \n                  :key=\"tag\"\n                  :type=\"getTagType(tag, questionDetails.oj_platform)\"\n                  class=\"algorithm-tag\"\n                >\n                  {{ getTagName(tag) }}\n                </el-tag>\n              </div>\n            </div>\n          </el-card>\n        </div>\n      </div>\n      \n      <div v-else class=\"draft-content\">\n        <div class=\"left-section\">\n          <el-card class=\"draft-description-card\">\n            <h1 class=\"draft-title\">题目 #{{ draft.question_id }} 的解题思路（草稿）</h1>\n            \n            <div class=\"draft-metadata\">\n              <span class=\"draft-time\">\n                <i class=\"el-icon-time\"></i>\n                创建于: {{ formatDate(draft.created_at) }}\n              </span>\n              <span class=\"draft-time\" v-if=\"draft.updated_at !== draft.created_at\">\n                <i class=\"el-icon-edit-outline\"></i>\n                更新于: {{ formatDate(draft.updated_at) }}\n              </span>\n              <span class=\"draft-language\">\n                <el-tag size=\"small\" :class=\"'lang-tag-' + getNormalizedLanguage(draft.language)\">\n                  {{ getDisplayLanguage(draft.language) }}\n                </el-tag>\n              </span>\n              <span class=\"draft-status\">\n                <el-tag size=\"small\" type=\"info\">草稿</el-tag>\n              </span>\n            </div>\n            \n            <!-- 草稿内容 - Markdown渲染 -->\n            <div ref=\"markdownContent\" class=\"markdown-content\" v-html=\"compiledMarkdown\"></div>\n          </el-card>\n        </div>\n        \n        <div class=\"right-section\">\n          <!-- 题目信息卡片 -->\n          <el-card class=\"question-info-card\">\n            <h2 @click=\"goToProblem(draft.question_id)\" class=\"clickable-title\">\n              {{ questionDetails?.name || `题目 #${draft.question_id}` }}\n              <i class=\"el-icon-link\"></i>\n            </h2>\n            <div class=\"info-meta\">\n              <div>题目ID: {{ draft.question_id }}</div>\n              <div v-if=\"questionDetails?.ext_question_id\">外部ID: {{ questionDetails.ext_question_id }}</div>\n              <div v-if=\"questionDetails?.oj_platform\">\n                平台: \n                <el-tag :type=\"getPlatformTagType(questionDetails.oj_platform)\" size=\"small\">\n                  {{ getPlatformName(questionDetails.oj_platform) }}\n                </el-tag>\n              </div>\n            </div>\n            \n            <div class=\"action-buttons\" v-if=\"canManageDraft\">\n              <!-- 发布按钮（只在草稿未删除时显示） -->\n              <el-button v-if=\"!draft.is_deleted\" type=\"success\" size=\"small\" @click=\"handlePublish\">\n                <el-icon><Upload /></el-icon>\n                发布\n              </el-button>\n              <el-button type=\"primary\" size=\"small\" @click=\"handleEdit\">\n                <el-icon><EditPen /></el-icon>\n                编辑\n              </el-button>\n              <el-button v-if=\"!draft.is_deleted\" type=\"danger\" size=\"small\" @click=\"handleDelete\">\n                <el-icon><Delete /></el-icon>\n                删除\n              </el-button>\n              <el-button v-if=\"draft.is_deleted\" type=\"warning\" size=\"small\" @click=\"handleRestore\">\n                <el-icon><RefreshLeft /></el-icon>\n                恢复\n              </el-button>\n              <el-button type=\"info\" size=\"small\" @click=\"goToProblem(draft.question_id)\">\n                <el-icon><View /></el-icon>\n                查看题目\n              </el-button>\n            </div>\n          </el-card>\n          \n          <!-- 题目标签和难度 -->\n          <el-card class=\"question-tags-card\" v-if=\"questionDetails\">\n            <div class=\"difficulty-section\">\n              <h3>难度级别</h3>\n              <el-tag \n                :type=\"getDifficultyTagType(questionDetails)\"\n                effect=\"dark\"\n              >\n                {{ questionDetails.difficulty }}\n              </el-tag>\n            </div>\n            \n            <div class=\"tags-section\" v-if=\"questionDetails.algorithm_tags?.length\">\n              <h3>算法标签</h3>\n              <div class=\"tags-container\">\n                <el-tag \n                  v-for=\"tag in questionDetails.algorithm_tags\" \n                  :key=\"tag\"\n                  :type=\"getTagType(tag, questionDetails.oj_platform)\"\n                  class=\"algorithm-tag\"\n                >\n                  {{ getTagName(tag) }}\n                </el-tag>\n              </div>\n            </div>\n          </el-card>\n        </div>\n      </div>\n    </main>\n\n    <!-- 删除确认对话框 -->\n    <el-dialog\n      v-model=\"deleteDialogVisible\"\n      title=\"确认删除\"\n      width=\"30%\"\n    >\n      <span>确定要删除这篇草稿吗？此操作不可逆。</span>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\n          <el-button type=\"danger\" @click=\"confirmDelete\" :loading=\"processing\">确认删除</el-button>\n        </span>\n      </template>\n    </el-dialog>\n    \n    <!-- 恢复确认对话框 -->\n    <el-dialog\n      v-model=\"restoreDialogVisible\"\n      title=\"确认恢复\"\n      width=\"30%\"\n    >\n      <span>确定要恢复这篇草稿吗？</span>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"restoreDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"confirmRestore\" :loading=\"processing\">确认恢复</el-button>\n        </span>\n      </template>\n    </el-dialog>\n    \n    <!-- 发布确认对话框 -->\n    <el-dialog\n      v-model=\"publishDialogVisible\"\n      title=\"确认发布\"\n      width=\"30%\"\n    >\n      <span>确定要将此草稿发布为正式题解吗？</span>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"publishDialogVisible = false\">取消</el-button>\n          <el-button type=\"success\" @click=\"confirmPublish\" :loading=\"processing\">确认发布</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport AppHeader from '@/components/AppHeader.vue';\nimport { getDraftDetail } from '@/api/solution'; // 使用solution API获取草稿\nimport { getQuestionDetail } from '@/api/question';\nimport request from '@/api/request';\nimport MarkdownIt from 'markdown-it';\nimport DOMPurify from 'dompurify';\nimport { EditPen, Delete, View, RefreshLeft, Upload } from '@element-plus/icons-vue';\nimport { ElMessage } from 'element-plus';\n\nexport default {\n  name: 'DraftDetailView',\n  components: {\n    AppHeader,\n    EditPen,\n    Delete,\n    View,\n    RefreshLeft,\n    Upload\n  },\n  data() {\n    return {\n      draftId: this.$route.params.id,\n      draft: null,\n      questionDetails: null,\n      loading: true,\n      error: null,\n      mdi: new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true,\n        breaks: true\n      }),\n      \n      // 当前用户信息（实际应从用户状态获取）\n      currentUserId: null, // 应从用户状态获取\n      \n      // 删除、恢复和发布相关状态\n      deleteDialogVisible: false,\n      restoreDialogVisible: false,\n      publishDialogVisible: false,\n      processing: false,\n      \n      // 语言名称到显示名称的映射\n      languageDisplayMap: {\n        'cpp': 'C++',\n        'csharp': 'C#',\n        'javascript': 'JavaScript',\n        'python': 'Python',\n        'java': 'Java',\n        'go': 'Go',\n        'rust': 'Rust'\n      }\n    };\n  },\n  computed: {\n    // 渲染Markdown\n    compiledMarkdown() {\n      if (!this.draft) return '';\n      \n      try {\n        // 使用content_text作为Markdown内容\n        const content = String(this.draft.content_text || '');\n        const html = this.mdi.render(content);\n        return DOMPurify.sanitize(html);\n      } catch (e) {\n        console.error('Markdown处理错误:', e);\n        return '内容解析出错';\n      }\n    },\n    \n    // 检查当前用户是否可以管理草稿（编辑、删除、恢复、发布）\n    canManageDraft() {\n      // 这里应该根据实际权限检查逻辑实现\n      // 例如检查当前登录用户是否是草稿作者或管理员\n      return true; // 为了示例，此处默认为true\n    }\n  },\n  mounted() {\n    this.fetchDraftDetail();\n  },\n  methods: {\n    // 获取草稿详情\n    async fetchDraftDetail() {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        // 使用getSolutionDetail API但访问的是草稿路径\n        const response = await getDraftDetail(this.draftId, true); // 添加参数表示获取草稿\n        \n        if (response.data && response.data.code === 200) {\n          this.draft = response.data.data;\n        } else {\n          this.draft = response.data;\n        }\n        \n        // 获取题目详情\n        if (this.draft && this.draft.question_id) {\n          await this.fetchQuestionDetail(this.draft.question_id);\n        }\n      } catch (error) {\n        console.error('获取草稿详情失败:', error);\n        this.error = '获取草稿详情失败: ' + (error.message || '未知错误');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // 获取题目详情\n    async fetchQuestionDetail(questionId) {\n      try {\n        const response = await getQuestionDetail(questionId);\n        \n        if (response.data && response.data.code === 200) {\n          this.questionDetails = response.data.data;\n        } else {\n          this.questionDetails = response.data;\n        }\n        \n        // 确保算法标签是数组\n        if (this.questionDetails && typeof this.questionDetails.algorithm_tags === 'string') {\n          this.questionDetails.algorithm_tags = this.questionDetails.algorithm_tags\n            .split(',')\n            .map(tag => tag.trim())\n            .filter(tag => tag.length > 0);\n        }\n      } catch (error) {\n        console.error('获取题目详情失败:', error);\n      }\n    },\n    \n    // 编辑按钮处理\n    handleEdit() {\n      if (!this.draft) return;\n      // 跳转到编辑页面\n      this.$router.push(`/${this.draft.id}/drafts/update`);\n    },\n    \n    // 删除按钮处理\n    handleDelete() {\n      if (!this.draft || this.draft.is_deleted) return;\n      this.deleteDialogVisible = true;\n    },\n    \n    // 恢复按钮处理\n    handleRestore() {\n      if (!this.draft) return;\n      this.restoreDialogVisible = true;\n    },\n    \n    // 发布按钮处理\n    handlePublish() {\n      if (!this.draft || this.draft.is_deleted) return;\n      this.publishDialogVisible = true;\n    },\n    \n    // 确认删除\n    async confirmDelete() {\n      if (!this.draft) return;\n      \n      this.processing = true;\n      try {\n        const response = await request({\n          url: '/api/solution/delete/',\n          method: 'post',\n          data: { id: this.draft.id }\n        });\n        \n        this.deleteDialogVisible = false;\n        \n        ElMessage({\n          type: 'success',\n          message: response.message || '草稿删除成功'\n        });\n        \n        // 刷新当前页面以显示删除状态\n        await this.fetchDraftDetail();\n      } catch (error) {\n        console.error('删除草稿失败:', error);\n        \n        const errorMsg = error.response?.data?.message || \n                         error.message || \n                         '删除失败: 未知错误';\n        \n        ElMessage({\n          type: 'error',\n          message: errorMsg\n        });\n      } finally {\n        this.processing = false;\n      }\n    },\n    \n    // 确认恢复\n    async confirmRestore() {\n      if (!this.draft) return;\n      \n      this.processing = true;\n      try {\n        const response = await request({\n          url: '/api/solution/restore/',\n          method: 'post',\n          data: { id: this.draft.id }\n        });\n        \n        this.restoreDialogVisible = false;\n        \n        ElMessage({\n          type: 'success',\n          message: response.message || '草稿恢复成功'\n        });\n        \n        // 刷新当前页面以显示恢复后的状态\n        await this.fetchDraftDetail();\n      } catch (error) {\n        console.error('恢复草稿失败:', error);\n        \n        const errorMsg = error.response?.data?.message || \n                         error.message || \n                         '恢复失败: 未知错误';\n        \n        ElMessage({\n          type: 'error',\n          message: errorMsg\n        });\n      } finally {\n        this.processing = false;\n      }\n    },\n    \n    // 确认发布为题解\n    async confirmPublish() {\n      if (!this.draft || this.draft.is_deleted) return;\n      \n      this.processing = true;\n      try {\n        // 1. 发送请求（注意解构出data）\n        const { data: responseData } = await request({\n          url: '/api/solution/pub/',\n          method: 'post',\n          data: { id: this.draft.id }\n        });\n\n        // 2. 关闭对话框\n        this.publishDialogVisible = false;\n        \n        // 3. 处理响应（现在正确检查responseData.code）\n        if (responseData.code === 200) {\n          ElMessage({\n            type: 'success',\n            message: responseData.message || '发布成功'\n          });\n          \n          // 4. 跳转逻辑（正确获取嵌套的id）\n          const solutionId = responseData.data?.id;\n          if (solutionId) {\n            this.$router.push(`/${solutionId}/solutions`);\n          } else {\n            this.$router.push('/solutions');\n          }\n        } else {\n          // 5. 处理业务错误（正确获取错误消息）\n          throw new Error(responseData.message || `发布失败，错误码：${responseData.code}`);\n        }\n      } catch (error) {\n        // 6. 统一错误处理\n        console.error('发布失败:', error);\n        ElMessage({\n          type: 'error',\n          message: error.message || '发布过程中发生未知错误'\n        });\n      } finally {\n        this.processing = false;\n      }\n    },\n    \n    // 跳转到题目详情\n    goToProblem(questionId) {\n      this.$router.push(`/${questionId}/problems`);\n    },\n    \n    // 格式化日期\n    formatDate(dateString) {\n      if (!dateString) return '未知时间';\n      \n      const date = new Date(dateString);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    \n    // 获取规范化后的语言名称（用于CSS类名）\n    getNormalizedLanguage(language) {\n      if (!language) return '';\n      \n      // 转为小写\n      const lowercased = language.toLowerCase();\n      \n      // 特殊处理，比如将 'cpp' 转为 'c++'\n      const reverseMap = {\n        'cpp': 'c++',\n        'csharp': 'c#'\n      };\n      \n      return reverseMap[lowercased] || lowercased;\n    },\n    \n    // 获取显示用的语言名称\n    getDisplayLanguage(language) {\n      if (!language) return '';\n      \n      // 转为小写\n      const lowercased = language.toLowerCase();\n      \n      // 从特殊映射中获取显示名称\n      if (this.languageDisplayMap[lowercased]) {\n        return this.languageDisplayMap[lowercased];\n      }\n      \n      // 首字母大写\n      return language.charAt(0).toUpperCase() + language.slice(1);\n    },\n    \n    // 平台相关方法\n    getPlatformName(platform) {\n      const platforms = {\n        'luogu': '洛谷',\n        'leetcode': 'LeetCode'\n      };\n      return platforms[platform] || platform;\n    },\n    \n    // 平台标签样式\n    getPlatformTagType(platform) {\n      return {\n        luogu: 'success',\n        leetcode: 'warning'\n      }[platform] || 'info';\n    },\n    \n    // 难度标签样式\n    getDifficultyTagType(question) {\n      if (question.oj_platform === 'luogu') {\n        const levelMap = {\n          '入门': 'info',\n          '普及-': 'success',\n          '普及/提高-': 'success',\n          '普及+/提高': 'warning',\n          '提高+/省选-': 'danger',\n          '省选/NOI-': 'danger',\n          'NOI/NOI+': 'danger',\n          'CTSC': 'danger'\n        };\n        return levelMap[question.difficulty] || 'info';\n      }\n      \n      // LeetCode难度\n      return {\n        '简单': 'success',\n        '中等': 'warning',\n        '困难': 'danger'\n      }[question.difficulty] || 'info';\n    },\n    \n    // 标签样式\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary';\n      \n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0];\n      return {\n        'Algorithm': 'primary',  // 算法 - 蓝色\n        'Source': 'success',     // 来源 - 绿色\n        'Time': 'warning',       // 时间 - 黄色\n        'Region': 'danger',      // 地区 - 红色\n        'Other': 'info'          // 其他 - 灰色\n      }[prefix] || 'info';\n    },\n    \n    // 获取标签名称\n    getTagName(tag) {\n      // 洛谷标签去掉前缀\n      const parts = tag.split('_');\n      if (parts.length > 1) {\n        return parts.slice(1).join('_');\n      }\n      return tag;\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 基础布局优化 */\n.draft-detail-view {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n}\n\n.page-container {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n/* 加载状态优化 */\n.loading-container {\n  padding: 3rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n}\n\n/* 错误状态优化 */\n.error-container {\n  padding: 2rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n}\n\n/* 已删除状态的横幅优化 */\n.deleted-banner {\n  margin-bottom: 1.5rem;\n}\n\n/* 主内容区网格布局 */\n.draft-content {\n  display: grid;\n  grid-template-columns: minmax(0, 1fr) 340px;\n  gap: 2rem;\n  align-items: start;\n}\n\n/* 左侧草稿内容区 */\n.left-section {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n/* 右侧信息卡片区 */\n.right-section {\n  display: grid;\n  gap: 1.5rem;\n  position: sticky;\n  top: 1rem;\n  align-self: start;\n}\n\n/* 卡片通用样式 */\n.el-card {\n  border-radius: 12px;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  transition: all 0.3s ease;\n}\n\n.el-card:hover {\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);\n  transform: translateY(-2px);\n}\n\n/* 草稿描述卡片 */\n.draft-description-card {\n  padding: 2rem;\n  background: white;\n}\n\n.draft-title {\n  font-size: 1.8rem;\n  color: #2d3748;\n  margin-bottom: 1.2rem;\n  font-weight: 600;\n  line-height: 1.3;\n  border-bottom: 1px solid #e2e8f0;\n  padding-bottom: 0.8rem;\n}\n\n.draft-metadata {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1.2rem;\n  margin-bottom: 2rem;\n  color: #4a5568;\n  font-size: 0.95rem;\n  align-items: center;\n}\n\n.draft-time {\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n}\n\n/* 语言标签样式 */\n.lang-tag-python {\n  background-color: #3776ab;\n  color: white;\n}\n\n.lang-tag-java {\n  background-color: #f89820;\n  color: white;\n}\n\n.lang-tag-c\\+\\+ {\n  background-color: #00599c;\n  color: white;\n}\n\n.lang-tag-javascript {\n  background-color: #f7df1e;\n  color: #000;\n}\n\n.lang-tag-go {\n  background-color: #00acd7;\n  color: white;\n}\n\n.lang-tag-rust {\n  background-color: #b7410e;\n  color: white;\n}\n\n.lang-tag-c\\# {\n  background-color: #68217a;\n  color: white;\n}\n\n/* 题目信息卡片 */\n.question-info-card {\n  padding: 1.5rem;\n}\n\n.question-info-card h2 {\n  font-size: 1.4rem;\n  color: #2d3748;\n  margin-bottom: 1rem;\n  font-weight: 600;\n  line-height: 1.3;\n}\n\n.clickable-title {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.clickable-title:hover {\n  color: #3182ce;\n}\n\n.clickable-title i {\n  font-size: 0.8rem;\n  opacity: 0.7;\n}\n\n.info-meta {\n  display: grid;\n  gap: 0.8rem;\n  color: #4a5568;\n  font-size: 0.95rem;\n  margin: 1.5rem 0;\n}\n\n.info-meta div {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n/* 操作按钮组 */\n.action-buttons {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 0.8rem;\n  margin-top: 1.5rem;\n}\n\n.action-buttons .el-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.3s ease;\n  min-width: 0;\n  white-space: nowrap;\n  padding: 8px 15px;\n}\n\n/* 标签卡片 */\n.question-tags-card {\n  padding: 1.5rem;\n}\n\n.difficulty-section,\n.tags-section {\n  margin-bottom: 1.5rem;\n}\n\n.difficulty-section h3,\n.tags-section h3 {\n  font-size: 1.1rem;\n  color: #2d3748;\n  margin-bottom: 0.8rem;\n  font-weight: 500;\n}\n\n/* 标签容器 */\n.tags-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.6rem;\n}\n\n.algorithm-tag {\n  transition: all 0.3s ease;\n  margin: 0;\n}\n\n.algorithm-tag:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 内容渲染样式优化 */\n.markdown-content {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  color: #2d3748;\n  line-height: 1.7;\n  font-size: 1rem;\n}\n\n/* 标题样式 */\n.markdown-content :deep(h1),\n.markdown-content :deep(h2),\n.markdown-content :deep(h3) {\n  color: #1a202c;\n  font-weight: 600;\n  margin: 1.8rem 0 1rem;\n  scroll-margin-top: 80px; /* 为锚点跳转留出空间 */\n}\n\n.markdown-content :deep(h1) {\n  font-size: 1.8rem;\n  border-bottom: 1px solid #e2e8f0;\n  padding-bottom: 0.5rem;\n}\n\n.markdown-content :deep(h2) {\n  font-size: 1.5rem;\n}\n\n.markdown-content :deep(h3) {\n  font-size: 1.2rem;\n}\n\n/* 段落样式 */\n.markdown-content :deep(p) {\n  margin: 1.2rem 0;\n  color: #4a5568;\n}\n\n/* 代码块样式 */\n.markdown-content :deep(pre) {\n  background: #1e293b;\n  border-radius: 8px;\n  padding: 1.2rem;\n  margin: 1.5rem 0;\n  overflow-x: auto;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.markdown-content :deep(code) {\n  font-family: 'Fira Code', 'SFMono-Regular', Consolas, monospace;\n  background: transparent;\n  color: #f8fafc;\n  padding: 0;\n  font-size: 0.9em;\n}\n\n/* 行内代码 */\n.markdown-content :deep(p > code) {\n  background: #edf2f7;\n  color: #c53030;\n  padding: 0.2em 0.4em;\n  border-radius: 4px;\n  font-size: 0.9em;\n}\n\n/* 引用块 */\n.markdown-content :deep(blockquote) {\n  border-left: 4px solid #4299e1;\n  background: #ebf8ff;\n  color: #2b6cb0;\n  padding: 1rem 1.5rem;\n  margin: 1.5rem 0;\n  border-radius: 0 4px 4px 0;\n}\n\n/* 表格样式 */\n.markdown-content :deep(table) {\n  width: 100%;\n  margin: 1.5rem 0;\n  border-collapse: collapse;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.markdown-content :deep(th),\n.markdown-content :deep(td) {\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1rem;\n  text-align: left;\n}\n\n.markdown-content :deep(th) {\n  background: #f7fafc;\n  font-weight: 600;\n  color: #2d3748;\n}\n\n/* 列表样式 */\n.markdown-content :deep(ul),\n.markdown-content :deep(ol) {\n  margin: 1.5rem 0;\n  padding-left: 2rem;\n}\n\n.markdown-content :deep(li) {\n  margin: 0.5rem 0;\n  color: #4a5568;\n}\n\n/* 链接样式 */\n.markdown-content :deep(a) {\n  color: #4299e1;\n  text-decoration: none;\n  font-weight: 500;\n  transition: all 0.2s;\n}\n\n.markdown-content :deep(a:hover) {\n  color: #2b6cb0;\n  text-decoration: underline;\n}\n\n/* 图片样式 */\n.markdown-content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  border-radius: 6px;\n  margin: 1.5rem auto;\n  display: block;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* 对话框样式优化 */\n.el-dialog {\n  border-radius: 12px;\n  max-width: 500px;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.8rem;\n  margin-top: 1.5rem;\n}\n\n/* 响应式设计 */\n@media (max-width: 1024px) {\n  .draft-content {\n    grid-template-columns: 1fr;\n  }\n  \n  .right-section {\n    position: static;\n  }\n}\n\n@media (max-width: 768px) {\n  .page-container {\n    padding: 1rem;\n  }\n  \n  .action-buttons {\n    flex-wrap: wrap;\n  }\n  \n  .draft-description-card,\n  .question-info-card,\n  .question-tags-card {\n    padding: 1.2rem;\n  }\n  \n  .draft-title {\n    font-size: 1.5rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .action-buttons {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 0.5rem;\n  }\n  \n  .action-buttons .el-button {\n    width: 100%;\n    padding: 8px 12px;\n    font-size: 0.8rem;\n  }\n  \n  .draft-metadata {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.8rem;\n  }\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f5f9;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #cbd5e0;\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #a0aec0;\n}\n</style>"],"mappings":";;;;AA4QA,OAAOA,SAAQ,MAAO,4BAA4B;AAClD,SAASC,cAAa,QAAS,gBAAgB,EAAE;AACjD,SAASC,iBAAgB,QAAS,gBAAgB;AAClD,OAAOC,OAAM,MAAO,eAAe;AACnC,OAAOC,UAAS,MAAO,aAAa;AACpC,OAAOC,SAAQ,MAAO,WAAW;AACjC,SAASC,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAEC,WAAW,EAAEC,MAAK,QAAS,yBAAyB;AACpF,SAASC,SAAQ,QAAS,cAAc;AAExC,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,UAAU,EAAE;IACVb,SAAS;IACTM,OAAO;IACPC,MAAM;IACNC,IAAI;IACJC,WAAW;IACXC;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MAC9BC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE,IAAI;MACXC,GAAG,EAAE,IAAInB,UAAU,CAAC;QAClBoB,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,IAAI;QACbC,WAAW,EAAE,IAAI;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC;MAEF;MACAC,aAAa,EAAE,IAAI;MAAE;;MAErB;MACAC,mBAAmB,EAAE,KAAK;MAC1BC,oBAAoB,EAAE,KAAK;MAC3BC,oBAAoB,EAAE,KAAK;MAC3BC,UAAU,EAAE,KAAK;MAEjB;MACAC,kBAAkB,EAAE;QAClB,KAAK,EAAE,KAAK;QACZ,QAAQ,EAAE,IAAI;QACd,YAAY,EAAE,YAAY;QAC1B,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI;QACV,MAAM,EAAE;MACV;IACF,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAAC,IAAI,CAAChB,KAAK,EAAE,OAAO,EAAE;MAE1B,IAAI;QACF;QACA,MAAMiB,OAAM,GAAIC,MAAM,CAAC,IAAI,CAAClB,KAAK,CAACmB,YAAW,IAAK,EAAE,CAAC;QACrD,MAAMd,IAAG,GAAI,IAAI,CAACD,GAAG,CAACgB,MAAM,CAACH,OAAO,CAAC;QACrC,OAAO/B,SAAS,CAACmC,QAAQ,CAAChB,IAAI,CAAC;MACjC,EAAE,OAAOiB,CAAC,EAAE;QACVC,OAAO,CAACpB,KAAK,CAAC,eAAe,EAAEmB,CAAC,CAAC;QACjC,OAAO,QAAQ;MACjB;IACF,CAAC;IAED;IACAE,cAAcA,CAAA,EAAG;MACf;MACA;MACA,OAAO,IAAI,EAAE;IACf;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMD,gBAAgBA,CAAA,EAAG;MACvB,IAAI,CAACxB,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,KAAI,GAAI,IAAI;MAEjB,IAAI;QACF;QACA,MAAMyB,QAAO,GAAI,MAAM9C,cAAc,CAAC,IAAI,CAACc,OAAO,EAAE,IAAI,CAAC,EAAE;;QAE3D,IAAIgC,QAAQ,CAACjC,IAAG,IAAKiC,QAAQ,CAACjC,IAAI,CAACkC,IAAG,KAAM,GAAG,EAAE;UAC/C,IAAI,CAAC7B,KAAI,GAAI4B,QAAQ,CAACjC,IAAI,CAACA,IAAI;QACjC,OAAO;UACL,IAAI,CAACK,KAAI,GAAI4B,QAAQ,CAACjC,IAAI;QAC5B;;QAEA;QACA,IAAI,IAAI,CAACK,KAAI,IAAK,IAAI,CAACA,KAAK,CAAC8B,WAAW,EAAE;UACxC,MAAM,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAAC/B,KAAK,CAAC8B,WAAW,CAAC;QACxD;MACF,EAAE,OAAO3B,KAAK,EAAE;QACdoB,OAAO,CAACpB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC,IAAI,CAACA,KAAI,GAAI,YAAW,IAAKA,KAAK,CAAC6B,OAAM,IAAK,MAAM,CAAC;MACvD,UAAU;QACR,IAAI,CAAC9B,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACA,MAAM6B,mBAAmBA,CAACE,UAAU,EAAE;MACpC,IAAI;QACF,MAAML,QAAO,GAAI,MAAM7C,iBAAiB,CAACkD,UAAU,CAAC;QAEpD,IAAIL,QAAQ,CAACjC,IAAG,IAAKiC,QAAQ,CAACjC,IAAI,CAACkC,IAAG,KAAM,GAAG,EAAE;UAC/C,IAAI,CAAC5B,eAAc,GAAI2B,QAAQ,CAACjC,IAAI,CAACA,IAAI;QAC3C,OAAO;UACL,IAAI,CAACM,eAAc,GAAI2B,QAAQ,CAACjC,IAAI;QACtC;;QAEA;QACA,IAAI,IAAI,CAACM,eAAc,IAAK,OAAO,IAAI,CAACA,eAAe,CAACiC,cAAa,KAAM,QAAQ,EAAE;UACnF,IAAI,CAACjC,eAAe,CAACiC,cAAa,GAAI,IAAI,CAACjC,eAAe,CAACiC,cAAa,CACrEC,KAAK,CAAC,GAAG,EACTC,GAAG,CAACC,GAAE,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,EACrBC,MAAM,CAACF,GAAE,IAAKA,GAAG,CAACG,MAAK,GAAI,CAAC,CAAC;QAClC;MACF,EAAE,OAAOrC,KAAK,EAAE;QACdoB,OAAO,CAACpB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACnC;IACF,CAAC;IAED;IACAsC,UAAUA,CAAA,EAAG;MACX,IAAI,CAAC,IAAI,CAACzC,KAAK,EAAE;MACjB;MACA,IAAI,CAAC0C,OAAO,CAACC,IAAI,CAAC,IAAI,IAAI,CAAC3C,KAAK,CAACD,EAAE,gBAAgB,CAAC;IACtD,CAAC;IAED;IACA6C,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAAC5C,KAAI,IAAK,IAAI,CAACA,KAAK,CAAC6C,UAAU,EAAE;MAC1C,IAAI,CAACnC,mBAAkB,GAAI,IAAI;IACjC,CAAC;IAED;IACAoC,aAAaA,CAAA,EAAG;MACd,IAAI,CAAC,IAAI,CAAC9C,KAAK,EAAE;MACjB,IAAI,CAACW,oBAAmB,GAAI,IAAI;IAClC,CAAC;IAED;IACAoC,aAAaA,CAAA,EAAG;MACd,IAAI,CAAC,IAAI,CAAC/C,KAAI,IAAK,IAAI,CAACA,KAAK,CAAC6C,UAAU,EAAE;MAC1C,IAAI,CAACjC,oBAAmB,GAAI,IAAI;IAClC,CAAC;IAED;IACA,MAAMoC,aAAaA,CAAA,EAAG;MACpB,IAAI,CAAC,IAAI,CAAChD,KAAK,EAAE;MAEjB,IAAI,CAACa,UAAS,GAAI,IAAI;MACtB,IAAI;QACF,MAAMe,QAAO,GAAI,MAAM5C,OAAO,CAAC;UAC7BiE,GAAG,EAAE,uBAAuB;UAC5BC,MAAM,EAAE,MAAM;UACdvD,IAAI,EAAE;YAAEI,EAAE,EAAE,IAAI,CAACC,KAAK,CAACD;UAAG;QAC5B,CAAC,CAAC;QAEF,IAAI,CAACW,mBAAkB,GAAI,KAAK;QAEhClB,SAAS,CAAC;UACR2D,IAAI,EAAE,SAAS;UACfnB,OAAO,EAAEJ,QAAQ,CAACI,OAAM,IAAK;QAC/B,CAAC,CAAC;;QAEF;QACA,MAAM,IAAI,CAACN,gBAAgB,CAAC,CAAC;MAC/B,EAAE,OAAOvB,KAAK,EAAE;QACdoB,OAAO,CAACpB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAE/B,MAAMiD,QAAO,GAAIjD,KAAK,CAACyB,QAAQ,EAAEjC,IAAI,EAAEqC,OAAM,IAC5B7B,KAAK,CAAC6B,OAAM,IACZ,YAAY;QAE7BxC,SAAS,CAAC;UACR2D,IAAI,EAAE,OAAO;UACbnB,OAAO,EAAEoB;QACX,CAAC,CAAC;MACJ,UAAU;QACR,IAAI,CAACvC,UAAS,GAAI,KAAK;MACzB;IACF,CAAC;IAED;IACA,MAAMwC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAACrD,KAAK,EAAE;MAEjB,IAAI,CAACa,UAAS,GAAI,IAAI;MACtB,IAAI;QACF,MAAMe,QAAO,GAAI,MAAM5C,OAAO,CAAC;UAC7BiE,GAAG,EAAE,wBAAwB;UAC7BC,MAAM,EAAE,MAAM;UACdvD,IAAI,EAAE;YAAEI,EAAE,EAAE,IAAI,CAACC,KAAK,CAACD;UAAG;QAC5B,CAAC,CAAC;QAEF,IAAI,CAACY,oBAAmB,GAAI,KAAK;QAEjCnB,SAAS,CAAC;UACR2D,IAAI,EAAE,SAAS;UACfnB,OAAO,EAAEJ,QAAQ,CAACI,OAAM,IAAK;QAC/B,CAAC,CAAC;;QAEF;QACA,MAAM,IAAI,CAACN,gBAAgB,CAAC,CAAC;MAC/B,EAAE,OAAOvB,KAAK,EAAE;QACdoB,OAAO,CAACpB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAE/B,MAAMiD,QAAO,GAAIjD,KAAK,CAACyB,QAAQ,EAAEjC,IAAI,EAAEqC,OAAM,IAC5B7B,KAAK,CAAC6B,OAAM,IACZ,YAAY;QAE7BxC,SAAS,CAAC;UACR2D,IAAI,EAAE,OAAO;UACbnB,OAAO,EAAEoB;QACX,CAAC,CAAC;MACJ,UAAU;QACR,IAAI,CAACvC,UAAS,GAAI,KAAK;MACzB;IACF,CAAC;IAED;IACA,MAAMyC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAACtD,KAAI,IAAK,IAAI,CAACA,KAAK,CAAC6C,UAAU,EAAE;MAE1C,IAAI,CAAChC,UAAS,GAAI,IAAI;MACtB,IAAI;QACF;QACA,MAAM;UAAElB,IAAI,EAAE4D;QAAa,IAAI,MAAMvE,OAAO,CAAC;UAC3CiE,GAAG,EAAE,oBAAoB;UACzBC,MAAM,EAAE,MAAM;UACdvD,IAAI,EAAE;YAAEI,EAAE,EAAE,IAAI,CAACC,KAAK,CAACD;UAAG;QAC5B,CAAC,CAAC;;QAEF;QACA,IAAI,CAACa,oBAAmB,GAAI,KAAK;;QAEjC;QACA,IAAI2C,YAAY,CAAC1B,IAAG,KAAM,GAAG,EAAE;UAC7BrC,SAAS,CAAC;YACR2D,IAAI,EAAE,SAAS;YACfnB,OAAO,EAAEuB,YAAY,CAACvB,OAAM,IAAK;UACnC,CAAC,CAAC;;UAEF;UACA,MAAMwB,UAAS,GAAID,YAAY,CAAC5D,IAAI,EAAEI,EAAE;UACxC,IAAIyD,UAAU,EAAE;YACd,IAAI,CAACd,OAAO,CAACC,IAAI,CAAC,IAAIa,UAAU,YAAY,CAAC;UAC/C,OAAO;YACL,IAAI,CAACd,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;UACjC;QACF,OAAO;UACL;UACA,MAAM,IAAIc,KAAK,CAACF,YAAY,CAACvB,OAAM,IAAK,YAAYuB,YAAY,CAAC1B,IAAI,EAAE,CAAC;QAC1E;MACF,EAAE,OAAO1B,KAAK,EAAE;QACd;QACAoB,OAAO,CAACpB,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;QAC7BX,SAAS,CAAC;UACR2D,IAAI,EAAE,OAAO;UACbnB,OAAO,EAAE7B,KAAK,CAAC6B,OAAM,IAAK;QAC5B,CAAC,CAAC;MACJ,UAAU;QACR,IAAI,CAACnB,UAAS,GAAI,KAAK;MACzB;IACF,CAAC;IAED;IACA6C,WAAWA,CAACzB,UAAU,EAAE;MACtB,IAAI,CAACS,OAAO,CAACC,IAAI,CAAC,IAAIV,UAAU,WAAW,CAAC;IAC9C,CAAC;IAED;IACA0B,UAAUA,CAACC,UAAU,EAAE;MACrB,IAAI,CAACA,UAAU,EAAE,OAAO,MAAM;MAE9B,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,UAAU,CAAC;MACjC,OAAOC,IAAI,CAACE,cAAc,CAAC,OAAO,EAAE;QAClCC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,SAAS;QAChBC,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC;IAED;IACAC,qBAAqBA,CAACC,QAAQ,EAAE;MAC9B,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;;MAExB;MACA,MAAMC,UAAS,GAAID,QAAQ,CAACE,WAAW,CAAC,CAAC;;MAEzC;MACA,MAAMC,UAAS,GAAI;QACjB,KAAK,EAAE,KAAK;QACZ,QAAQ,EAAE;MACZ,CAAC;MAED,OAAOA,UAAU,CAACF,UAAU,KAAKA,UAAU;IAC7C,CAAC;IAED;IACAG,kBAAkBA,CAACJ,QAAQ,EAAE;MAC3B,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;;MAExB;MACA,MAAMC,UAAS,GAAID,QAAQ,CAACE,WAAW,CAAC,CAAC;;MAEzC;MACA,IAAI,IAAI,CAAC1D,kBAAkB,CAACyD,UAAU,CAAC,EAAE;QACvC,OAAO,IAAI,CAACzD,kBAAkB,CAACyD,UAAU,CAAC;MAC5C;;MAEA;MACA,OAAOD,QAAQ,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,IAAIN,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;IACAC,eAAeA,CAACC,QAAQ,EAAE;MACxB,MAAMC,SAAQ,GAAI;QAChB,OAAO,EAAE,IAAI;QACb,UAAU,EAAE;MACd,CAAC;MACD,OAAOA,SAAS,CAACD,QAAQ,KAAKA,QAAQ;IACxC,CAAC;IAED;IACAE,kBAAkBA,CAACF,QAAQ,EAAE;MAC3B,OAAO;QACLG,KAAK,EAAE,SAAS;QAChBC,QAAQ,EAAE;MACZ,CAAC,CAACJ,QAAQ,KAAK,MAAM;IACvB,CAAC;IAED;IACAK,oBAAoBA,CAACC,QAAQ,EAAE;MAC7B,IAAIA,QAAQ,CAACC,WAAU,KAAM,OAAO,EAAE;QACpC,MAAMC,QAAO,GAAI;UACf,IAAI,EAAE,MAAM;UACZ,KAAK,EAAE,SAAS;UAChB,QAAQ,EAAE,SAAS;UACnB,QAAQ,EAAE,SAAS;UACnB,SAAS,EAAE,QAAQ;UACnB,SAAS,EAAE,QAAQ;UACnB,UAAU,EAAE,QAAQ;UACpB,MAAM,EAAE;QACV,CAAC;QACD,OAAOA,QAAQ,CAACF,QAAQ,CAACG,UAAU,KAAK,MAAM;MAChD;;MAEA;MACA,OAAO;QACL,IAAI,EAAE,SAAS;QACf,IAAI,EAAE,SAAS;QACf,IAAI,EAAE;MACR,CAAC,CAACH,QAAQ,CAACG,UAAU,KAAK,MAAM;IAClC,CAAC;IAED;IACAC,UAAUA,CAACpD,GAAG,EAAE0C,QAAQ,EAAE;MACxB;MACA,IAAIA,QAAO,KAAM,UAAU,EAAE,OAAO,SAAS;;MAE7C;MACA,MAAMW,MAAK,GAAIrD,GAAG,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChC,OAAO;QACL,WAAW,EAAE,SAAS;QAAG;QACzB,QAAQ,EAAE,SAAS;QAAM;QACzB,MAAM,EAAE,SAAS;QAAQ;QACzB,QAAQ,EAAE,QAAQ;QAAO;QACzB,OAAO,EAAE,MAAK,CAAW;MAC3B,CAAC,CAACuD,MAAM,KAAK,MAAM;IACrB,CAAC;IAED;IACAC,UAAUA,CAACtD,GAAG,EAAE;MACd;MACA,MAAMuD,KAAI,GAAIvD,GAAG,CAACF,KAAK,CAAC,GAAG,CAAC;MAC5B,IAAIyD,KAAK,CAACpD,MAAK,GAAI,CAAC,EAAE;QACpB,OAAOoD,KAAK,CAACf,KAAK,CAAC,CAAC,CAAC,CAACgB,IAAI,CAAC,GAAG,CAAC;MACjC;MACA,OAAOxD,GAAG;IACZ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}