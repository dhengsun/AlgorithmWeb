{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, renderList as _renderList, toDisplayString as _toDisplayString, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"question-update-view\"\n};\nconst _hoisted_2 = {\n  class: \"page-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"id-query-section\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"loading-container\"\n};\nconst _hoisted_5 = {\n  key: 2,\n  class: \"error-container\"\n};\nconst _hoisted_6 = {\n  key: 3,\n  class: \"question-form-container\"\n};\nconst _hoisted_7 = {\n  class: \"tags-container\"\n};\nconst _hoisted_8 = [\"innerHTML\"];\nconst _hoisted_9 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppHeader = _resolveComponent(\"AppHeader\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  const _component_el_skeleton = _resolveComponent(\"el-skeleton\");\n  const _component_el_alert = _resolveComponent(\"el-alert\");\n  const _component_el_divider = _resolveComponent(\"el-divider\");\n  const _component_el_col = _resolveComponent(\"el-col\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_option_group = _resolveComponent(\"el-option-group\");\n  const _component_el_tab_pane = _resolveComponent(\"el-tab-pane\");\n  const _component_el_tabs = _resolveComponent(\"el-tabs\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_AppHeader), _createElementVNode(\"main\", _hoisted_2, [_createVNode(_component_el_card, {\n    class: \"update-card\"\n  }, {\n    header: _withCtx(() => _cache[8] || (_cache[8] = [_createElementVNode(\"div\", {\n      class: \"card-header\"\n    }, [_createElementVNode(\"h2\", null, \"更新题目\")], -1)])),\n    default: _withCtx(() => [!$data.question ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_el_form, {\n      model: $data.queryForm,\n      rules: $data.queryRules,\n      ref: \"queryFormRef\",\n      \"label-width\": \"80px\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_form_item, {\n        label: \"题目ID\",\n        prop: \"id\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: $data.queryForm.id,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.queryForm.id = $event),\n          placeholder: \"请输入题目ID（如E1、E2等）\"\n        }, null, 8, [\"modelValue\"])]),\n        _: 1\n      }), _createVNode(_component_el_form_item, null, {\n        default: _withCtx(() => [_createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: $options.fetchQuestion\n        }, {\n          default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\"查询题目\")])),\n          _: 1\n        }, 8, [\"onClick\"])]),\n        _: 1\n      })]),\n      _: 1\n    }, 8, [\"model\", \"rules\"])])) : $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode(_component_el_skeleton, {\n      rows: 10,\n      animated: \"\"\n    })])) : $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createVNode(_component_el_alert, {\n      title: $data.error,\n      type: \"error\",\n      closable: false,\n      onClose: $options.resetQuery\n    }, null, 8, [\"title\", \"onClose\"]), _createVNode(_component_el_button, {\n      class: \"mt-3\",\n      onClick: $options.resetQuery\n    }, {\n      default: _withCtx(() => _cache[10] || (_cache[10] = [_createTextVNode(\"返回\")])),\n      _: 1\n    }, 8, [\"onClick\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createVNode(_component_el_form, {\n      model: $data.questionForm,\n      rules: $data.rules,\n      ref: \"formRef\",\n      \"label-width\": \"100px\",\n      \"label-position\": \"top\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_divider, {\n        \"content-position\": \"left\"\n      }, {\n        default: _withCtx(() => _cache[11] || (_cache[11] = [_createTextVNode(\"基本信息\")])),\n        _: 1\n      }), _createVNode(_component_el_row, {\n        gutter: 20\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"题目名称\",\n            prop: \"name\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: $data.questionForm.name,\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.questionForm.name = $event),\n              placeholder: \"请输入题目名称\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          })]),\n          _: 1\n        }), _createVNode(_component_el_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"外部ID\",\n            prop: \"ext_question_id\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: $data.questionForm.ext_question_id,\n              \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.questionForm.ext_question_id = $event),\n              placeholder: \"请输入外部ID\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          })]),\n          _: 1\n        })]),\n        _: 1\n      }), _createVNode(_component_el_row, {\n        gutter: 20\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"平台\",\n            prop: \"oj_platform\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_select, {\n              modelValue: $data.questionForm.oj_platform,\n              \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.questionForm.oj_platform = $event),\n              placeholder: \"请选择平台\",\n              style: {\n                \"width\": \"100%\"\n              },\n              onChange: $options.handlePlatformChange\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_option, {\n                label: \"LeetCode\",\n                value: \"leetcode\"\n              }), _createVNode(_component_el_option, {\n                label: \"洛谷\",\n                value: \"luogu\"\n              })]),\n              _: 1\n            }, 8, [\"modelValue\", \"onChange\"])]),\n            _: 1\n          })]),\n          _: 1\n        }), _createVNode(_component_el_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"难度\",\n            prop: \"difficulty\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_select, {\n              modelValue: $data.questionForm.difficulty,\n              \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.questionForm.difficulty = $event),\n              placeholder: \"请选择难度\",\n              style: {\n                \"width\": \"100%\"\n              }\n            }, {\n              default: _withCtx(() => [$data.questionForm.oj_platform === 'leetcode' ? (_openBlock(), _createElementBlock(_Fragment, {\n                key: 0\n              }, [_createVNode(_component_el_option, {\n                label: \"简单\",\n                value: \"简单\"\n              }), _createVNode(_component_el_option, {\n                label: \"中等\",\n                value: \"中等\"\n              }), _createVNode(_component_el_option, {\n                label: \"困难\",\n                value: \"困难\"\n              })], 64)) : $data.questionForm.oj_platform === 'luogu' ? (_openBlock(), _createElementBlock(_Fragment, {\n                key: 1\n              }, [_createVNode(_component_el_option, {\n                label: \"入门\",\n                value: \"入门\"\n              }), _createVNode(_component_el_option, {\n                label: \"普及-\",\n                value: \"普及-\"\n              }), _createVNode(_component_el_option, {\n                label: \"普及/提高-\",\n                value: \"普及/提高-\"\n              }), _createVNode(_component_el_option, {\n                label: \"普及+/提高\",\n                value: \"普及+/提高\"\n              }), _createVNode(_component_el_option, {\n                label: \"提高+/省选-\",\n                value: \"提高+/省选-\"\n              }), _createVNode(_component_el_option, {\n                label: \"省选/NOI-\",\n                value: \"省选/NOI-\"\n              }), _createVNode(_component_el_option, {\n                label: \"NOI/NOI+\",\n                value: \"NOI/NOI+\"\n              }), _createVNode(_component_el_option, {\n                label: \"CTSC\",\n                value: \"CTSC\"\n              })], 64)) : (_openBlock(), _createElementBlock(_Fragment, {\n                key: 2\n              }, [_createVNode(_component_el_option, {\n                label: \"简单\",\n                value: \"简单\"\n              }), _createVNode(_component_el_option, {\n                label: \"中等\",\n                value: \"中等\"\n              }), _createVNode(_component_el_option, {\n                label: \"困难\",\n                value: \"困难\"\n              })], 64))]),\n              _: 1\n            }, 8, [\"modelValue\"])]),\n            _: 1\n          })]),\n          _: 1\n        })]),\n        _: 1\n      }), _createVNode(_component_el_divider, {\n        \"content-position\": \"left\"\n      }, {\n        default: _withCtx(() => _cache[12] || (_cache[12] = [_createTextVNode(\"算法标签\")])),\n        _: 1\n      }), _createVNode(_component_el_form_item, {\n        label: \"已选标签\",\n        prop: \"algorithm_tags\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.questionForm.algorithm_tags, tag => {\n          return _openBlock(), _createBlock(_component_el_tag, {\n            key: tag,\n            closable: \"\",\n            type: $options.getTagType(tag, $data.questionForm.oj_platform),\n            onClose: $event => $options.handleTagClose(tag),\n            class: \"algorithm-tag\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString($options.getTagName(tag)), 1)]),\n            _: 2\n          }, 1032, [\"type\", \"onClose\"]);\n        }), 128))])]),\n        _: 1\n      }), _createVNode(_component_el_form_item, {\n        label: \"添加标签\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_select, {\n          modelValue: $data.tagSearchValue,\n          \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.tagSearchValue = $event),\n          filterable: \"\",\n          remote: \"\",\n          \"reserve-keyword\": \"\",\n          placeholder: \"输入关键词搜索标签\",\n          \"remote-method\": $options.searchTags,\n          loading: $data.tagSearchLoading,\n          onChange: $options.handleTagSelect,\n          class: \"tag-select\",\n          clearable: \"\"\n        }, {\n          default: _withCtx(() => [$data.questionForm.oj_platform === 'luogu' && $data.tagCategoryTitle ? (_openBlock(), _createBlock(_component_el_option_group, {\n            key: 0,\n            label: $data.tagCategoryTitle\n          }, {\n            default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filteredTags, tag => {\n              return _openBlock(), _createBlock(_component_el_option, {\n                key: tag.value,\n                label: tag.label,\n                value: tag.value\n              }, null, 8, [\"label\", \"value\"]);\n            }), 128))]),\n            _: 1\n          }, 8, [\"label\"])) : (_openBlock(true), _createElementBlock(_Fragment, {\n            key: 1\n          }, _renderList($data.filteredTags, tag => {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: tag.value,\n              label: tag.label,\n              value: tag.value\n            }, null, 8, [\"label\", \"value\"]);\n          }), 128))]),\n          _: 1\n        }, 8, [\"modelValue\", \"remote-method\", \"loading\", \"onChange\"])]),\n        _: 1\n      }), _createVNode(_component_el_divider, {\n        \"content-position\": \"left\"\n      }, {\n        default: _withCtx(() => _cache[13] || (_cache[13] = [_createTextVNode(\"题目内容\")])),\n        _: 1\n      }), _createVNode(_component_el_form_item, {\n        label: \"题目内容\",\n        prop: \"content\",\n        rules: [{\n          required: true,\n          message: '题目内容不能为空',\n          trigger: 'blur'\n        }]\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_tabs, {\n          modelValue: $data.contentTabActive,\n          \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.contentTabActive = $event)\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_tab_pane, {\n            label: \"编辑\",\n            name: \"edit\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: $data.questionForm.content,\n              \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.questionForm.content = $event),\n              type: \"textarea\",\n              rows: 15,\n              placeholder: \"请输入题目内容\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_tab_pane, {\n            label: \"预览\",\n            name: \"preview\"\n          }, {\n            default: _withCtx(() => [$data.questionForm.oj_platform === 'leetcode' ? (_openBlock(), _createElementBlock(\"div\", {\n              key: 0,\n              class: \"preview-container html-content\",\n              innerHTML: $options.previewHtml\n            }, null, 8, _hoisted_8)) : (_openBlock(), _createElementBlock(\"div\", {\n              key: 1,\n              class: \"preview-container markdown-content\",\n              innerHTML: $options.previewMarkdown\n            }, null, 8, _hoisted_9))]),\n            _: 1\n          })]),\n          _: 1\n        }, 8, [\"modelValue\"])]),\n        _: 1\n      }), _createVNode(_component_el_form_item, null, {\n        default: _withCtx(() => [_createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: $options.submitForm\n        }, {\n          default: _withCtx(() => _cache[14] || (_cache[14] = [_createTextVNode(\"更新题目\")])),\n          _: 1\n        }, 8, [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: $options.resetForm\n        }, {\n          default: _withCtx(() => _cache[15] || (_cache[15] = [_createTextVNode(\"重置表单\")])),\n          _: 1\n        }, 8, [\"onClick\"]), _createVNode(_component_el_button, {\n          type: \"info\",\n          onClick: $options.resetQuery\n        }, {\n          default: _withCtx(() => _cache[16] || (_cache[16] = [_createTextVNode(\"返回查询\")])),\n          _: 1\n        }, 8, [\"onClick\"])]),\n        _: 1\n      })]),\n      _: 1\n    }, 8, [\"model\", \"rules\"])]))]),\n    _: 1\n  })])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_AppHeader","_createElementVNode","_hoisted_2","_component_el_card","header","_withCtx","_cache","default","$data","question","_hoisted_3","_component_el_form","model","queryForm","rules","queryRules","ref","_component_el_form_item","label","prop","_component_el_input","modelValue","id","$event","placeholder","_","_component_el_button","type","onClick","$options","fetchQuestion","_createTextVNode","loading","_hoisted_4","_component_el_skeleton","rows","animated","error","_hoisted_5","_component_el_alert","title","closable","onClose","resetQuery","_hoisted_6","questionForm","_component_el_divider","_component_el_row","gutter","_component_el_col","span","name","ext_question_id","_component_el_select","oj_platform","style","onChange","handlePlatformChange","_component_el_option","value","difficulty","_Fragment","_hoisted_7","_renderList","algorithm_tags","tag","_createBlock","_component_el_tag","getTagType","handleTagClose","_toDisplayString","getTagName","tagSearchValue","filterable","remote","searchTags","tagSearchLoading","handleTagSelect","clearable","tagCategoryTitle","_component_el_option_group","filteredTags","required","message","trigger","_component_el_tabs","contentTabActive","_component_el_tab_pane","content","innerHTML","previewHtml","_hoisted_8","previewMarkdown","_hoisted_9","submitForm","resetForm"],"sources":["/var/www/AlgorithmWeb/algorithmFrontend/src/views/QuestionUpdate.vue"],"sourcesContent":["<template>\n  <div class=\"question-update-view\">\n    <AppHeader />\n    <main class=\"page-container\">\n      <el-card class=\"update-card\">\n        <template #header>\n          <div class=\"card-header\">\n            <h2>更新题目</h2>\n          </div>\n        </template>\n\n        <!-- 题目ID查询部分 -->\n        <div v-if=\"!question\" class=\"id-query-section\">\n          <el-form :model=\"queryForm\" :rules=\"queryRules\" ref=\"queryFormRef\" label-width=\"80px\">\n            <el-form-item label=\"题目ID\" prop=\"id\">\n              <el-input v-model=\"queryForm.id\" placeholder=\"请输入题目ID（如E1、E2等）\"></el-input>\n            </el-form-item>\n\n            <el-form-item>\n              <el-button type=\"primary\" @click=\"fetchQuestion\">查询题目</el-button>\n            </el-form-item>\n          </el-form>\n        </div>\n\n        <!-- 加载中状态 -->\n        <div v-else-if=\"loading\" class=\"loading-container\">\n          <el-skeleton :rows=\"10\" animated />\n        </div>\n\n        <!-- 错误提示 -->\n        <div v-else-if=\"error\" class=\"error-container\">\n          <el-alert\n            :title=\"error\"\n            type=\"error\"\n            :closable=\"false\"\n            @close=\"resetQuery\"\n          />\n          <el-button class=\"mt-3\" @click=\"resetQuery\">返回</el-button>\n        </div>\n\n        <!-- 题目编辑表单 -->\n        <div v-else class=\"question-form-container\">\n          <el-form \n            :model=\"questionForm\" \n            :rules=\"rules\" \n            ref=\"formRef\" \n            label-width=\"100px\"\n            label-position=\"top\"\n          >\n            <!-- 基本信息部分 -->\n            <el-divider content-position=\"left\">基本信息</el-divider>\n            \n            <el-row :gutter=\"20\">\n              <el-col :span=\"12\">\n                <el-form-item label=\"题目名称\" prop=\"name\">\n                  <el-input v-model=\"questionForm.name\" placeholder=\"请输入题目名称\"></el-input>\n                </el-form-item>\n              </el-col>\n              <el-col :span=\"12\">\n                <el-form-item label=\"外部ID\" prop=\"ext_question_id\">\n                  <el-input v-model=\"questionForm.ext_question_id\" placeholder=\"请输入外部ID\"></el-input>\n                </el-form-item>\n              </el-col>\n            </el-row>\n\n            <el-row :gutter=\"20\">\n              <el-col :span=\"12\">\n                <el-form-item label=\"平台\" prop=\"oj_platform\">\n                  <el-select \n                    v-model=\"questionForm.oj_platform\" \n                    placeholder=\"请选择平台\" \n                    style=\"width: 100%\"\n                    @change=\"handlePlatformChange\"\n                  >\n                    <el-option label=\"LeetCode\" value=\"leetcode\"></el-option>\n                    <el-option label=\"洛谷\" value=\"luogu\"></el-option>\n                    <!-- 可以添加更多平台 -->\n                  </el-select>\n                </el-form-item>\n              </el-col>\n              <el-col :span=\"12\">\n                <el-form-item label=\"难度\" prop=\"difficulty\">\n                  <el-select \n                    v-model=\"questionForm.difficulty\" \n                    placeholder=\"请选择难度\" \n                    style=\"width: 100%\"\n                  >\n                    <!-- LeetCode 难度 -->\n                    <template v-if=\"questionForm.oj_platform === 'leetcode'\">\n                      <el-option label=\"简单\" value=\"简单\"></el-option>\n                      <el-option label=\"中等\" value=\"中等\"></el-option>\n                      <el-option label=\"困难\" value=\"困难\"></el-option>\n                    </template>\n                    \n                    <!-- 洛谷难度 -->\n                    <template v-else-if=\"questionForm.oj_platform === 'luogu'\">\n                      <el-option label=\"入门\" value=\"入门\"></el-option>\n                      <el-option label=\"普及-\" value=\"普及-\"></el-option>\n                      <el-option label=\"普及/提高-\" value=\"普及/提高-\"></el-option>\n                      <el-option label=\"普及+/提高\" value=\"普及+/提高\"></el-option>\n                      <el-option label=\"提高+/省选-\" value=\"提高+/省选-\"></el-option>\n                      <el-option label=\"省选/NOI-\" value=\"省选/NOI-\"></el-option>\n                      <el-option label=\"NOI/NOI+\" value=\"NOI/NOI+\"></el-option>\n                      <el-option label=\"CTSC\" value=\"CTSC\"></el-option>\n                    </template>\n                    \n                    <!-- 默认选项 -->\n                    <template v-else>\n                      <el-option label=\"简单\" value=\"简单\"></el-option>\n                      <el-option label=\"中等\" value=\"中等\"></el-option>\n                      <el-option label=\"困难\" value=\"困难\"></el-option>\n                    </template>\n                  </el-select>\n                </el-form-item>\n              </el-col>\n            </el-row>\n\n            <!-- 算法标签部分 -->\n            <el-divider content-position=\"left\">算法标签</el-divider>\n            <el-form-item label=\"已选标签\" prop=\"algorithm_tags\">\n              <div class=\"tags-container\">\n                <el-tag\n                  v-for=\"tag in questionForm.algorithm_tags\"\n                  :key=\"tag\"\n                  closable\n                  :type=\"getTagType(tag, questionForm.oj_platform)\"\n                  @close=\"handleTagClose(tag)\"\n                  class=\"algorithm-tag\"\n                >\n                  {{ getTagName(tag) }}\n                </el-tag>\n              </div>\n            </el-form-item>\n            \n            <!-- 新增的模糊搜索标签选择 -->\n            <el-form-item label=\"添加标签\">\n              <el-select\n                v-model=\"tagSearchValue\"\n                filterable\n                remote\n                reserve-keyword\n                placeholder=\"输入关键词搜索标签\"\n                :remote-method=\"searchTags\"\n                :loading=\"tagSearchLoading\"\n                @change=\"handleTagSelect\"\n                class=\"tag-select\"\n                clearable\n              >\n                <!-- 显示分类标题 (仅洛谷) -->\n                <template v-if=\"questionForm.oj_platform === 'luogu' && tagCategoryTitle\">\n                  <el-option-group :label=\"tagCategoryTitle\">\n                    <el-option\n                      v-for=\"tag in filteredTags\"\n                      :key=\"tag.value\"\n                      :label=\"tag.label\"\n                      :value=\"tag.value\"\n                    />\n                  </el-option-group>\n                </template>\n                \n                <!-- 无分类标题的选项 -->\n                <template v-else>\n                  <el-option\n                    v-for=\"tag in filteredTags\"\n                    :key=\"tag.value\"\n                    :label=\"tag.label\"\n                    :value=\"tag.value\"\n                  />\n                </template>\n              </el-select>\n            </el-form-item>\n\n            <!-- 题目内容部分 -->\n            <el-divider content-position=\"left\">题目内容</el-divider>\n            <el-form-item \n              label=\"题目内容\" \n              prop=\"content\"\n              :rules=\"[{ required: true, message: '题目内容不能为空', trigger: 'blur' }]\"\n            >\n              <el-tabs v-model=\"contentTabActive\">\n                <el-tab-pane label=\"编辑\" name=\"edit\">\n                  <el-input\n                    v-model=\"questionForm.content\"\n                    type=\"textarea\"\n                    :rows=\"15\"\n                    placeholder=\"请输入题目内容\"\n                  ></el-input>\n                </el-tab-pane>\n                <el-tab-pane label=\"预览\" name=\"preview\">\n                  <div v-if=\"questionForm.oj_platform === 'leetcode'\" \n                       class=\"preview-container html-content\" \n                       v-html=\"previewHtml\">\n                  </div>\n                  <div v-else \n                       class=\"preview-container markdown-content\" \n                       v-html=\"previewMarkdown\">\n                  </div>\n                </el-tab-pane>\n              </el-tabs>\n            </el-form-item>\n\n            <!-- 操作按钮 -->\n            <el-form-item>\n              <el-button type=\"primary\" @click=\"submitForm\">更新题目</el-button>\n              <el-button @click=\"resetForm\">重置表单</el-button>\n              <el-button type=\"info\" @click=\"resetQuery\">返回查询</el-button>\n            </el-form-item>\n          </el-form>\n        </div>\n      </el-card>\n    </main>\n  </div>\n</template>\n\n<script>\nimport AppHeader from '@/components/AppHeader.vue'\nimport { getQuestionDetail, getAllTags } from '@/api/question'\nimport MarkdownIt from 'markdown-it'\nimport DOMPurify from 'dompurify'\nimport { ElMessage } from 'element-plus'\n\n// 导入更新题目的API和标签常量\nimport { updateQuestion } from '@/api/question'\nimport { LeetcodeTags } from '@/constants/tags'\n\nexport default {\n  name: 'QuestionUpdate',\n  components: {\n    AppHeader\n  },\n  data() {\n    return {\n      // 查询表单\n      queryForm: {\n        id: ''\n      },\n      queryRules: {\n        id: [\n          { required: true, message: '请输入题目ID', trigger: 'blur' },\n          // 修改验证规则，允许字母和数字的组合\n          { pattern: /^[a-zA-Z0-9]+$/, message: '题目ID只能包含字母和数字', trigger: 'blur' }\n        ]\n      },\n      \n      // 题目状态\n      question: null,\n      loading: false,\n      error: null,\n      \n      // 题目表单\n      questionForm: {\n        id: '',\n        name: '',\n        ext_question_id: '',\n        oj_platform: '',\n        difficulty: '',\n        algorithm_tags: [],\n        content: ''\n      },\n      \n      // 表单验证规则\n      rules: {\n        name: [\n          { required: true, message: '请输入题目名称', trigger: 'blur' },\n          { min: 1, max: 100, message: '长度在1到100个字符', trigger: 'blur' }\n        ],\n        ext_question_id: [\n          { required: true, message: '请输入外部ID', trigger: 'blur' }\n        ],\n        oj_platform: [\n          { required: true, message: '请选择平台', trigger: 'change' }\n        ],\n        difficulty: [\n          { required: true, message: '请选择难度', trigger: 'change' }\n        ]\n      },\n      \n      // 标签相关数据\n      tagInputVisible: false,\n      tagInputValue: '',\n      tagSearchValue: '',\n      tagSearchLoading: false,\n      tagCategoryTitle: '',\n      \n      // 标签数据\n      allTags: {\n        leetcode: LeetcodeTags.map(tag => ({ label: tag, value: tag })),\n        luogu: {\n          Algorithm: [],\n          Source: [],\n          Time: [],\n          Region: [],\n          Other: []\n        }\n      },\n      filteredTags: [], // 筛选后的标签\n      \n      // 内容预览标签页\n      contentTabActive: 'edit',\n      \n      // Markdown渲染\n      mdi: new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true\n      }),\n    }\n  },\n  computed: {\n    // Markdown预览\n    previewMarkdown() {\n      if (!this.questionForm.content) return ''\n      \n      try {\n        const content = String(this.questionForm.content || '')\n        const html = this.mdi.render(content)\n        return DOMPurify.sanitize(html)\n      } catch (e) {\n        console.error('Markdown处理错误:', e)\n        return '内容解析出错'\n      }\n    },\n    \n    // HTML预览\n    previewHtml() {\n      if (!this.questionForm.content) return ''\n      \n      try {\n        let content = String(this.questionForm.content || '')\n        \n        // 简单处理HTML内容\n        return DOMPurify.sanitize(content, {\n          USE_PROFILES: { html: true },\n          ALLOWED_TAGS: [\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'br', 'hr',\n            'ol', 'ul', 'li', 'pre', 'code', 'blockquote',\n            'table', 'thead', 'tbody', 'tr', 'th', 'td',\n            'strong', 'em', 'b', 'i', 'u', 'strike', 's',\n            'a', 'img', 'span', 'div', 'section', 'article'\n          ]\n        })\n      } catch (e) {\n        console.error('HTML处理错误:', e)\n        return '内容解析出错'\n      }\n    }\n  },\n  mounted() {\n    // 加载所有平台的标签\n    this.loadAllTags()\n    \n    // 如果URL中带有id参数，则自动填充并查询\n    const urlId = this.$route.params.id\n    if (urlId) {\n      this.queryForm.id = urlId\n      this.fetchQuestion()\n    }\n  },\n  methods: {\n    // 加载所有标签\n    async loadAllTags() {\n      try {\n        // LeetCode标签已从常量导入\n        \n        // 加载洛谷标签\n        const res = await getAllTags()\n        if (res.data && res.data.code === 200) {\n          this.allTags.luogu = res.data.data\n        }\n      } catch (error) {\n        console.error('加载标签失败:', error)\n        ElMessage.error('加载标签数据失败')\n      }\n    },\n    \n    // 平台变更时重置标签搜索\n    handlePlatformChange() {\n      this.tagSearchValue = ''\n      this.filteredTags = []\n      \n      // 如果切换了平台，清空已选标签\n      if (confirm('切换平台将清空已选标签，是否继续？')) {\n        this.questionForm.algorithm_tags = []\n      } else {\n        // 恢复原平台\n        this.questionForm.oj_platform = this.question.oj_platform\n      }\n    },\n    \n    // 标签搜索功能\n    searchTags(query) {\n      this.tagSearchLoading = true\n      this.tagCategoryTitle = ''\n      \n      if (query.trim() === '') {\n        this.filteredTags = []\n        this.tagSearchLoading = false\n        return\n      }\n      \n      setTimeout(() => {\n        if (this.questionForm.oj_platform === 'leetcode') {\n          // 搜索LeetCode标签\n          this.filteredTags = this.allTags.leetcode\n            .filter(tag => tag.label.toLowerCase().includes(query.toLowerCase()))\n        } else if (this.questionForm.oj_platform === 'luogu') {\n          // 搜索洛谷标签，合并所有类别\n          let allLuoguTags = [];\n          \n          // 遍历所有类别\n          for (const category in this.allTags.luogu) {\n            // 过滤符合条件的标签并格式化\n            const matchedTags = this.allTags.luogu[category]\n              .filter(tag => tag.name.toLowerCase().includes(query.toLowerCase()))\n              .map(tag => ({\n                label: tag.name,\n                value: `${category}_${tag.name}`,\n                category\n              }))\n            \n            if (matchedTags.length) {\n              this.tagCategoryTitle = this.getCategoryName(category)\n              allLuoguTags = [...allLuoguTags, ...matchedTags]\n            }\n          }\n          \n          this.filteredTags = allLuoguTags\n        }\n        \n        this.tagSearchLoading = false\n      }, 200)\n    },\n    \n    // 获取分类中文名称\n    getCategoryName(category) {\n      const categoryMap = {\n        'Algorithm': '算法标签',\n        'Source': '来源标签',\n        'Time': '时间标签',\n        'Region': '地区标签',\n        'Other': '其他标签'\n      }\n      return categoryMap[category] || category\n    },\n    \n    // 标签选择处理\n    handleTagSelect(value) {\n      if (!value) return\n      \n      // 检查是否已选择该标签\n      if (this.questionForm.algorithm_tags.includes(value)) {\n        ElMessage.warning('该标签已添加')\n      } else {\n        this.questionForm.algorithm_tags.push(value)\n        ElMessage.success('标签添加成功')\n      }\n      \n      // 清空选择框\n      this.tagSearchValue = ''\n    },\n    \n    // 查询题目\n    async fetchQuestion() {\n      // 表单验证\n      try {\n        await this.$refs.queryFormRef.validate()\n      } catch (error) {\n        return false\n      }\n      \n      this.loading = true\n      this.error = null\n      \n      try {\n        const response = await getQuestionDetail(this.queryForm.id)\n        this.question = response.data\n        \n        // 填充表单\n        this.fillFormWithQuestion(this.question)\n        \n        this.loading = false\n      } catch (error) {\n        console.error('获取题目详情失败:', error)\n        this.error = '获取题目详情失败: ' + (error.message || '未知错误')\n        this.loading = false\n      }\n    },\n    \n    // 填充表单\n    fillFormWithQuestion(question) {\n      this.questionForm.id = question.id\n      this.questionForm.name = question.name\n      this.questionForm.ext_question_id = question.ext_question_id\n      this.questionForm.oj_platform = question.oj_platform\n      this.questionForm.difficulty = question.difficulty\n      this.questionForm.content = question.content\n      \n      // 处理标签\n      if (typeof question.algorithm_tags === 'string') {\n        this.questionForm.algorithm_tags = question.algorithm_tags\n          .split(',')\n          .map(tag => tag.trim())\n          .filter(tag => tag.length > 0)\n      } else if (Array.isArray(question.algorithm_tags)) {\n        this.questionForm.algorithm_tags = [...question.algorithm_tags]\n      } else {\n        this.questionForm.algorithm_tags = []\n      }\n    },\n    \n    // 重置查询\n    resetQuery() {\n      this.question = null\n      this.error = null\n      this.queryForm.id = ''\n      \n      if (this.$refs.queryFormRef) {\n        this.$refs.queryFormRef.resetFields()\n      }\n    },\n    \n    // 重置表单\n    resetForm() {\n      if (this.$refs.formRef) {\n        this.$refs.formRef.resetFields()\n      }\n      \n      // 重新填充原始数据\n      if (this.question) {\n        this.fillFormWithQuestion(this.question)\n      }\n    },\n    \n    // 提交表单\n    async submitForm() {\n      // 表单验证\n      try {\n        await this.$refs.formRef.validate()\n      } catch (error) {\n        return false\n      }\n      \n      this.loading = true\n      \n      try {\n        // 创建适合后端API的请求数据\n        const formData = {\n          id: this.questionForm.id,\n          name: this.questionForm.name,\n          ext_question_id: this.questionForm.ext_question_id,\n          oj_platform: this.questionForm.oj_platform,\n          difficulty: this.questionForm.difficulty,\n          content: this.questionForm.content,\n          // 确保算法标签是数组形式，与Postman测试保持一致\n          algorithm_tags: Array.isArray(this.questionForm.algorithm_tags) \n            ? [...this.questionForm.algorithm_tags] \n            : []\n        }\n        \n        // 可以添加url字段，如果后端需要\n        if (this.questionForm.oj_platform === 'leetcode') {\n          formData.url = `https://leetcode.cn/problems/${this.questionForm.ext_question_id}/`\n        } else if (this.questionForm.oj_platform === 'luogu') {\n          formData.url = `https://www.luogu.com.cn/problem/${this.questionForm.ext_question_id}`\n        }\n        \n        console.log('发送更新请求数据:', formData)\n        \n        // 调用更新API\n        await updateQuestion(formData.id, formData)\n        \n        // 显示成功消息\n        ElMessage({\n          message: '题目更新成功',\n          type: 'success'\n        })\n        \n        // 重新获取最新数据\n        this.fetchQuestion()\n      } catch (error) {\n        console.error('更新题目失败:', error)\n        ElMessage({\n          message: '更新题目失败: ' + (error.message || '未知错误'),\n          type: 'error'\n        })\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    // 删除已选标签\n    handleTagClose(tag) {\n      this.questionForm.algorithm_tags = this.questionForm.algorithm_tags.filter(t => t !== tag)\n    },\n    \n    // 获取标签名称（去掉前缀）\n    getTagName(tag) {\n      // LeetCode标签已经是纯名称\n      if (this.allTags.leetcode.some(t => t.value === tag)) {\n        return tag\n      }\n      \n      // 洛谷标签去掉前缀\n      const parts = tag.split('_')\n      if (parts.length > 1) {\n        return parts.slice(1).join('_')\n      }\n      return tag\n    },\n    \n    // 标签样式\n    getTagType(tag, platform) {\n      // LeetCode标签统一为蓝色\n      if (platform === 'leetcode') return 'primary'\n      \n      // 洛谷标签根据前缀分类\n      const prefix = tag.split('_')[0]\n      return {\n        'Algorithm': 'primary',  // 算法 - 蓝色\n        'Source': 'success',     // 来源 - 绿色\n        'Time': 'warning',       // 时间 - 黄色\n        'Region': 'danger',      // 地区 - 红色\n        'Other': 'info'          // 其他 - 灰色\n      }[prefix] || 'info'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.question-update-view {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);\n  padding-top: 60px;\n}\n\n.page-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 30px;\n}\n\n.update-card {\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  border: none;\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(5px);\n}\n\n.card-header {\n  padding: 20px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.card-header h2 {\n  font-size: 1.5rem;\n  color: #2c3e50;\n  font-weight: 600;\n  margin: 0;\n}\n\n.id-query-section,\n.question-form-container {\n  padding: 25px;\n}\n\n.loading-container,\n.error-container {\n  padding: 40px;\n  text-align: center;\n}\n\n/* 表单样式优化 */\n.el-form {\n  max-width: 900px;\n  margin: 0 auto;\n}\n\n.el-form-item {\n  margin-bottom: 22px;\n}\n\n.el-form-item:last-child {\n  margin-bottom: 0;\n}\n\n.el-input,\n.el-select,\n.el-textarea {\n  border-radius: 8px;\n}\n\n.el-textarea__inner {\n  min-height: 300px;\n  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;\n  line-height: 1.6;\n}\n\n/* 分割线样式 */\n.el-divider__text {\n  font-size: 1rem;\n  color: #606266;\n  font-weight: 500;\n}\n\n/* 标签容器 */\n.tags-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 12px;\n  background: rgba(0, 0, 0, 0.02);\n  border-radius: 8px;\n  min-height: 48px;\n}\n\n.algorithm-tag {\n  transition: all 0.3s;\n  margin: 0;\n}\n\n.algorithm-tag:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 标签选择器 */\n.tag-select {\n  width: 100%;\n}\n\n/* 预览区域 */\n.preview-container {\n  padding: 20px;\n  border-radius: 8px;\n  background: #fff;\n  min-height: 300px;\n  max-height: 500px;\n  overflow-y: auto;\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n/* Markdown/HTML内容样式 */\n.markdown-content,\n.html-content {\n  line-height: 1.8;\n}\n\n.markdown-content :deep(h1),\n.markdown-content :deep(h2),\n.markdown-content :deep(h3),\n.html-content :deep(h1),\n.html-content :deep(h2),\n.html-content :deep(h3) {\n  margin-top: 1.5em;\n  margin-bottom: 0.8em;\n  color: #2c3e50;\n  font-weight: 600;\n}\n\n.markdown-content :deep(pre),\n.html-content :deep(pre) {\n  background-color: #f8f9fa;\n  padding: 16px;\n  border-radius: 8px;\n  overflow: auto;\n  border-left: 4px solid #409eff;\n}\n\n.markdown-content :deep(code),\n.html-content :deep(code) {\n  background-color: rgba(175, 184, 193, 0.2);\n  padding: 0.2em 0.4em;\n  border-radius: 4px;\n  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;\n  color: #476582;\n}\n\n.markdown-content :deep(blockquote),\n.html-content :deep(blockquote) {\n  border-left: 4px solid #dfe2e5;\n  color: #6a737d;\n  padding: 0 1em;\n  margin: 1em 0;\n  background: rgba(0, 0, 0, 0.02);\n  border-radius: 0 4px 4px 0;\n}\n\n.markdown-content :deep(table),\n.html-content :deep(table) {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 1.5em 0;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.markdown-content :deep(th),\n.html-content :deep(th) {\n  background-color: #f8f9fa;\n  font-weight: 600;\n}\n\n.markdown-content :deep(th),\n.markdown-content :deep(td),\n.html-content :deep(th),\n.html-content :deep(td) {\n  border: 1px solid #dfe2e5;\n  padding: 12px 16px;\n  text-align: left;\n}\n\n/* 按钮组样式 */\n.el-form-item:last-child {\n  margin-top: 30px;\n  text-align: center;\n}\n\n.el-form-item:last-child .el-button {\n  min-width: 120px;\n  height: 40px;\n  margin: 0 8px;\n}\n\n/* 响应式调整 */\n@media (max-width: 768px) {\n  .page-container {\n    padding: 15px;\n  }\n\n  .id-query-section,\n  .question-form-container {\n    padding: 15px;\n  }\n\n  .el-form-item:last-child .el-button {\n    width: 100%;\n    margin: 8px 0;\n  }\n\n  .el-col {\n    margin-bottom: 16px;\n  }\n}\n\n/* 动画效果 */\n.el-tag,\n.el-button {\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.1);\n}\n\n.el-tag:hover {\n  transform: translateY(-2px);\n}\n\n.el-button:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 标签页样式优化 */\n:deep(.el-tabs__nav-wrap) {\n  padding: 0 20px;\n  background: #f8f9fa;\n  border-radius: 8px 8px 0 0;\n}\n\n:deep(.el-tabs__item) {\n  padding: 0 24px;\n  height: 48px;\n  line-height: 48px;\n  font-weight: 500;\n}\n\n:deep(.el-tabs__content) {\n  padding: 0;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}