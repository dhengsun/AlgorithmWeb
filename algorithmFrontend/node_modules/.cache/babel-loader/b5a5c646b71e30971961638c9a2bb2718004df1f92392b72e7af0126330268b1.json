{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n// LeetCode相关标签\nexport const LeetcodeTags = [\"Shell\", \"二分查找\", \"二叉搜索树\", \"二叉树\", \"交互\", \"位运算\", \"分治\", \"前缀和\", \"单向链表\", \"单调栈\", \"单调队列\", \"双向链表\", \"双指针\", \"双连通分量\", \"后缀数组\", \"哈希函数\", \"哈希表\", \"图\", \"基数排序\", \"堆（优先队列）\", \"字典树\", \"字符串\", \"字符串匹配\", \"归并排序\", \"快速选择\", \"扫描线\", \"拒绝采样\", \"拓扑排序\", \"排序\", \"数论\", \"数学\", \"数据库\", \"数据流\", \"数组\", \"最小生成树\", \"最短路\", \"有序集合\", \"栈\", \"树\", \"树状数组\", \"欧拉回路\", \"概率与统计\", \"模拟\", \"滑动窗口\", \"滚动哈希\", \"深度优先搜索\", \"状态压缩\", \"矩阵\", \"线段树\", \"组合数学\", \"脑筋急转弯\", \"计数\", \"计数排序\", \"设计\", \"贪心\", \"迭代器\", \"递归\", \"链表\", \"队列\", \"随机化\", \"集合\", \"几何\", \"动态规划\", \"博弈\", \"并查集\", \"广度优先搜索\", \"强连通分量\", \"桶排序\", \"水塘抽样\", \"记忆化搜索\", \"回溯\", \"多线程\", \"枚举\"];\n\n// 洛谷难度等级\nexport const LuoguDifficulties = ['入门', '普及-', '普及/提高-', '普及+/提高', '提高+/省选-', '省选/NOI-', 'NOI/NOI+', 'CTSC'];\n\n// LeetCode难度等级\nexport const LeetcodeDifficulties = ['简单', '中等', '困难'];\n\n// 处理洛谷API返回的标签数据\nexport const processLuoguTags = apiResponse => {\n  const tagsList = [];\n\n  // 主要处理 Algorithm 类型的标签，因为这些是算法相关标签\n  if (apiResponse.data && apiResponse.data.Algorithm) {\n    apiResponse.data.Algorithm.forEach(tag => {\n      tagsList.push(tag.name);\n    });\n  }\n  return tagsList;\n};\n\n// 洛谷标签将通过API动态获取\nexport let LuoguTags = [];\n\n// 可以提供一个更新标签的方法\nexport const updateLuoguTags = apiResponse => {\n  LuoguTags = processLuoguTags(apiResponse);\n};","map":{"version":3,"names":["LeetcodeTags","LuoguDifficulties","LeetcodeDifficulties","processLuoguTags","apiResponse","tagsList","data","Algorithm","forEach","tag","push","name","LuoguTags","updateLuoguTags"],"sources":["/var/www/AlgorithmWeb/algorithmFrontend/src/constants/tags.js"],"sourcesContent":["// LeetCode相关标签\nexport const LeetcodeTags = [\n    \"Shell\",\n    \"二分查找\",\n    \"二叉搜索树\",\n    \"二叉树\",\n    \"交互\",\n    \"位运算\",\n    \"分治\",\n    \"前缀和\",\n    \"单向链表\",\n    \"单调栈\",\n    \"单调队列\",\n    \"双向链表\",\n    \"双指针\",\n    \"双连通分量\",\n    \"后缀数组\",\n    \"哈希函数\",\n    \"哈希表\",\n    \"图\",\n    \"基数排序\",\n    \"堆（优先队列）\",\n    \"字典树\",\n    \"字符串\",\n    \"字符串匹配\",\n    \"归并排序\",\n    \"快速选择\",\n    \"扫描线\",\n    \"拒绝采样\",\n    \"拓扑排序\",\n    \"排序\",\n    \"数论\",\n    \"数学\",\n    \"数据库\",\n    \"数据流\",\n    \"数组\",\n    \"最小生成树\",\n    \"最短路\",\n    \"有序集合\",\n    \"栈\",\n    \"树\",\n    \"树状数组\",\n    \"欧拉回路\",\n    \"概率与统计\",\n    \"模拟\",\n    \"滑动窗口\",\n    \"滚动哈希\",\n    \"深度优先搜索\",\n    \"状态压缩\",\n    \"矩阵\",\n    \"线段树\",\n    \"组合数学\",\n    \"脑筋急转弯\",\n    \"计数\",\n    \"计数排序\",\n    \"设计\",\n    \"贪心\",\n    \"迭代器\",\n    \"递归\",\n    \"链表\",\n    \"队列\",\n    \"随机化\",\n    \"集合\",\n    \"几何\",\n    \"动态规划\",\n    \"博弈\",\n    \"并查集\",\n    \"广度优先搜索\",\n    \"强连通分量\",\n    \"桶排序\",\n    \"水塘抽样\",\n    \"记忆化搜索\",\n    \"回溯\",\n    \"多线程\",\n    \"枚举\"\n]\n\n\n// 洛谷难度等级\nexport const LuoguDifficulties = [\n    '入门', '普及-', '普及/提高-', '普及+/提高',\n    '提高+/省选-', '省选/NOI-', 'NOI/NOI+', 'CTSC'\n]\n\n// LeetCode难度等级\nexport const LeetcodeDifficulties = ['简单', '中等', '困难']\n\n// 处理洛谷API返回的标签数据\nexport const processLuoguTags = (apiResponse) => {\n    const tagsList = [];\n    \n    // 主要处理 Algorithm 类型的标签，因为这些是算法相关标签\n    if (apiResponse.data && apiResponse.data.Algorithm) {\n        apiResponse.data.Algorithm.forEach(tag => {\n            tagsList.push(tag.name);\n        });\n    }\n    \n    return tagsList;\n}\n\n// 洛谷标签将通过API动态获取\nexport let LuoguTags = [];\n\n// 可以提供一个更新标签的方法\nexport const updateLuoguTags = (apiResponse) => {\n    LuoguTags = processLuoguTags(apiResponse);\n}\n"],"mappings":";;;AAAA;AACA,OAAO,MAAMA,YAAY,GAAG,CACxB,OAAO,EACP,MAAM,EACN,OAAO,EACP,KAAK,EACL,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,KAAK,EACL,MAAM,EACN,KAAK,EACL,MAAM,EACN,MAAM,EACN,KAAK,EACL,OAAO,EACP,MAAM,EACN,MAAM,EACN,KAAK,EACL,GAAG,EACH,MAAM,EACN,SAAS,EACT,KAAK,EACL,KAAK,EACL,OAAO,EACP,MAAM,EACN,MAAM,EACN,KAAK,EACL,MAAM,EACN,MAAM,EACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,IAAI,EACJ,OAAO,EACP,KAAK,EACL,MAAM,EACN,GAAG,EACH,GAAG,EACH,MAAM,EACN,MAAM,EACN,OAAO,EACP,IAAI,EACJ,MAAM,EACN,MAAM,EACN,QAAQ,EACR,MAAM,EACN,IAAI,EACJ,KAAK,EACL,MAAM,EACN,OAAO,EACP,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,KAAK,EACL,QAAQ,EACR,OAAO,EACP,KAAK,EACL,MAAM,EACN,OAAO,EACP,IAAI,EACJ,KAAK,EACL,IAAI,CACP;;AAGD;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAC7B,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAC/B,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,CAC3C;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;;AAEtD;AACA,OAAO,MAAMC,gBAAgB,GAAIC,WAAW,IAAK;EAC7C,MAAMC,QAAQ,GAAG,EAAE;;EAEnB;EACA,IAAID,WAAW,CAACE,IAAI,IAAIF,WAAW,CAACE,IAAI,CAACC,SAAS,EAAE;IAChDH,WAAW,CAACE,IAAI,CAACC,SAAS,CAACC,OAAO,CAACC,GAAG,IAAI;MACtCJ,QAAQ,CAACK,IAAI,CAACD,GAAG,CAACE,IAAI,CAAC;IAC3B,CAAC,CAAC;EACN;EAEA,OAAON,QAAQ;AACnB,CAAC;;AAED;AACA,OAAO,IAAIO,SAAS,GAAG,EAAE;;AAEzB;AACA,OAAO,MAAMC,eAAe,GAAIT,WAAW,IAAK;EAC5CQ,SAAS,GAAGT,gBAAgB,CAACC,WAAW,CAAC;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}